{
  "metadata": {
    "filename": "temp_6951be5e-b8de-4df0-a75c-522b0cd0efa3",
    "extraction_date": "2025-01-25T18:59:36.797723",
    "path": "research_assistant\\data\\temp_6951be5e-b8de-4df0-a75c-522b0cd0efa3.pdf"
  },
  "pages": {
    "1": "\u0001\u0002\u0003\u0001\u0004\u0005\u0006\u0007\b\n\u0001\u0002\u0003\u0004\u0005\u0006\u0007\nCitation: Almeida, F.; Simões, J.;\nLopes, S. Exploring the Beneﬁts of\nCombining DevOps and Agile.\nFuture Internet 2022, 14, 63. https://\ndoi.org/10.3390/ﬁ14020063\nAcademic Editor: Davide Tosi\nReceived: 12 January 2022\nAccepted: 17 February 2022\nPublished: 19 February 2022\nPublisher’s Note: MDPI stays neutral\nwith regard to jurisdictional claims in\npublished maps and institutional afﬁl-\niations.\nCopyright:\n© 2022 by the authors.\nLicensee MDPI, Basel, Switzerland.\nThis article is an open access article\ndistributed\nunder\nthe\nterms\nand\nconditions of the Creative Commons\nAttribution (CC BY) license (https://\ncreativecommons.org/licenses/by/\n4.0/).\nfuture internet\nArticle\nExploring the Beneﬁts of Combining DevOps and Agile\nFernando Almeida 1,*\n, Jorge Simões 1\nand Sérgio Lopes 2\n1\nPolytechnic Higher Institute of Gaya (ISPGAYA) and INESC TEC, 4400-103 Porto, Portugal;\njsimoes@ispgaya.pt\n2\nPolytechnic Higher Institute of Gaya (ISPGAYA) and Distance Education and eLearning Laboratory-Open\nUniversity (LE@D-UAb), 1269-001 Lisbon, Portugal; ssargo@ispgaya.pt\n*\nCorrespondence: almd@fe.up.pt\nAbstract: The combined adoption of Agile and DevOps enables organizations to cope with the\nincreasing complexity of managing customer requirements and requests. It fosters the emergence\nof a more collaborative and Agile framework to replace the waterfall models applied to software\ndevelopment ﬂow and the separation of development teams from operations. This study aims to\nexplore the beneﬁts of the combined adoption of both models. A qualitative methodology is adopted\nby including twelve case studies from international software engineering companies. Thematic\nanalysis is employed in identifying the beneﬁts of the combined adoption of both paradigms. The\nﬁndings reveal the existence of twelve beneﬁts, highlighting the automation of processes, improved\ncommunication between teams, and reduction in time to market through process integration and\nshorter software delivery cycles. Although they address different goals and challenges, the Agile and\nDevOps paradigms when properly combined and aligned can offer relevant beneﬁts to organizations.\nThe novelty of this study lies in the systematization of the beneﬁts of the combined adoption of Agile\nand DevOps considering multiple perspectives of the software engineering business environment.\nKeywords: software development process; operations; software engineering; information system\ndevelopment; team structure\n1. Introduction\nThe software development process can be viewed as a set of tasks required to produce\nhigh-quality software. The literature shows that the quality of the software produced\nreﬂects the way the process was carried out [1–3]. Although several software development\nprocesses exist, generic activities common to all of them stand out, as Sommerville [4] high-\nlights, such as software speciﬁcation (e.g., requirements deﬁnition, software constraints),\nsoftware development (e.g., software design and implementation), software validation\n(e.g., software must be validated to ensure that the implemented functionality conforms\nto what was speciﬁed), and software evolution (e.g., software evolves as per customer\nneed). The software development process provides an interaction between users and\nsoftware engineers, between users and technology, and between system engineers and\ntechnology. In this sense, software development is an interactive learning process, and the\nresult is an embodiment of knowledge gathered, transformed, and organized as the process\nis conducted.\nA software development methodology includes a set of activities that assist in the\nproduction of software. These activities result in a product that demonstrates how the\ndevelopment process was conducted. Agile methodologies arise from the need to over-\ncome the difﬁculties and disadvantages of applying traditional methodologies in project\nmanagement and implementation. The Agile methodology assumes short periods of time\nbetween each delivery to ensure early and continuous delivery of software susceptible to\nevaluation [5]. In [6] it is also recognized that software implementation according to this\nparadigm is interactive and incremental, enabling early conﬁrmation of whether or not\nFuture Internet 2022, 14, 63. https://doi.org/10.3390/ﬁ14020063\nhttps://www.mdpi.com/journal/futureinternet",
    "2": "Future Internet 2022, 14, 63\n2 of 14\nthe delivered artifact meets the needs and making the respective corrections with low risk\nand cost.\nThe main social and human factors involved in the adoption of Agile methodologies\nare the impact on organizational culture, namely by the collaborative culture imposed\non developers and the implications of being embedded in an Agile team [7,8]. Constant\nfeedback to all team participants on the activities being carried out, and the commitment to\nthe team’s goals, are highlighted in Junker et al. [9] as key elements for a well-functioning\nAgile team. Feedback and collective awareness are essential as opposed to individualism\nand lack of communication. This view is also conﬁrmed by Sweetman and Conboy [10]\nwhen they highlight that feedback loops are the essence of the empirical and complex\nprocesses found in software engineering that require continuous adaptation based on\nlearning obtained daily. Furthermore, complex projects are very unpredictable and therefore\nneed a process that incorporates unpredictability [11].\nInspired by the success of Agile methods, the DevOps (Development and Operations)\nmovement emerged that aims to take this line of reasoning to a higher level. This movement\ncomes to break the traditional culture where there was almost no interaction between teams\nand, as highlighted by Luz et al. [12], the goal is to create a culture of collaboration between\ndevelopment and operations teams that allows increasing the ﬂow of completed work.\nIn summary, it is intended to increase the frequency of deployments while increasing\nthe stability and robustness of the production environment. Beyond a cultural change,\nthe DevOps movement also focuses on the practices of automating the various activities\nrequired to deliver quality code into production, such as creating environments for testing,\nautomating testing, conﬁguring infrastructure, data migration, auditing, and security,\namong others [13,14].\nIn the literature, we can essentially ﬁnd studies on DevOps that explore ways to align\ndevelopment teams with operations [15], the beneﬁts that this methodology can bring to\norganizations [16], and the challenges that are posed [17]. However, there is a research gap\nin the characterization of the simultaneous adoption of Agile and DevOps in organizations.\nIn this dimension, the number of available scientiﬁc studies is limited and they mostly\npresent individual views of their implementation, which does not allow for a sufﬁciently\ncomprehensive characterization of the beneﬁts of their combined adoption. We acknowl-\nedge the study conducted by Hemon et al. [18], which characterizes the different phases of\nAgile to DevOps transition (e.g., Agile, ongoing integration, and constant delivery), while\nMelgar et al. [19] explore the beneﬁts of the combined SCRUM-DevOps approach in terms\nof increasing speed during the deployment process and increasing the quality of software\nprocesses. In both studies, there is just one empirical case study, which makes it difﬁcult\nto generalize the ﬁndings. In this sense, this study seeks to bridge this research gap and\npresents an analysis of the beneﬁts that can be found by the combined approach of DevOps\nand Agile considering a comprehensive set of twelve case studies that are representative of\npractices of simultaneous adoption of both methodologies. This approach supported by\nmultiple case studies avoids the individual limits of each company’s vision and reduces\nthe risk of bias, and allows comparing, grouping, and systematizing the main beneﬁts of\nthe combined adoption of both methodologies.\nThe rest of this manuscript is organized as follows: Initially, a theoretical contextual-\nization of the DevOps model is performed and the similarities between DevOps and Agile\nare explored. Next, the methodology and associated methods adopted in the study are de-\nscribed. This is followed by the presentation of the results and discussion of their relevance\nto the perception of the beneﬁts of the combined adoption of DevOps and Agile. Finally,\nthe conclusions are enumerated. It is also in this last phase of the manuscript that the\nlimitations of the study are addressed and some suggestions for future work are provided.",
    "3": "Future Internet 2022, 14, 63\n3 of 14\n2. Literature Review\n2.1. DevOps Concepts and Model\nIn 2009, Paul Hammond and John Allspaw presented the talk “10+ Deploys Per\nDay: Dev and Ops Cooperation at Flickr” [20]. They explained how the developers’\nteams (Dev) and operations teams (Ops) could contribute to more agile and scalable\nsoftware development. Tight integration between Dev and Ops to safely achieve several\nsoftware deployments (more than 10) in a single day was a disruptive idea regarding\nsoftware development and its evolution. Later, Patrick Debois coined the term DevOps\n(Development and Operations) and created the DevOps Day event [21]. Although the\nDevOps movement has been discussed for more than a decade [13–15,22] it still lacks\na unique formal deﬁnition. For Wiedemann et al. [23], the lack of a unique deﬁnition\ncould be intentional to allow each team to choose the deﬁnition that better suits its needs.\nNevertheless, several authors proposed deﬁnitions such as the one by Leite et al. [13]—\n“DevOps is a collaborative and multidisciplinary effort within an organization to automate\ncontinuous delivery of new software versions while guaranteeing their correctness and\nreliability”—and others view it as a combination of values, principles, methods, practices,\nand tools [24]. Some other common deﬁnitions can be found in [23].\nOne of the key points in the execution of a project is the approach used to manage\nit. The traditional approach based on the waterfall model looks at the project in a linear\nway with several events, while in the iterative approach the development of software is\nundertaken through successive progress [25]. Therefore, it is common that the system is\npresented still incomplete or with some deﬁcient parts. The objective is that the reﬁne-\nment of the product happens in stages until the desired result is achieved. The software\ndevelopment process does not end with the release of the code, but only when it closes the\nfeedback loop between those who write the code and those who use it. DevOps aims to\nremove the barriers between traditionally independent teams: development and operations.\nUnder the DevOps approach, these teams should work together across the entire software\nlife cycle, from development and testing through deployment to operations. More than\nonly a technical subject, DevOps deals with the organizational and human issues that\narise in the software life cycle. It promotes a culture of collaboration, integration, and\ncommunication between teams to reduce the disconnect between them while assuring the\ndelivery of software in an agile, safe, and stable way. According to Rajapakse et al. [14], the\nDevOps movement is currently a widely adopted software development approach having\nas a major beneﬁt the ability to deploy releases more frequently and at a higher rate.\nSome related concepts used in conjunction with DevOps are Continuous Integration,\nContinuous Delivery, and Continuous Deployment. As noted in [14], these concepts are\nconsidered key practices within DevOps, but are not always clearly used, as stressed\nby Stahl et al. [24]. Continuous Integration is a development practice where developers\nfrequently integrate the code they produce, that has successfully passed testing, to the\nproject under development [24]. Those integrations occur typically once a day. Continuous\nDelivery is a development practice where the software is kept in a reliable deployable state\nat any time [14]. Potentially, after every change, the software can be released. This leads\nto several release candidates that are evaluated. The deployment to production is made\nmanually by a team member, with the appropriate authority, who decides when and which\ncandidate should be released [14]. Apart from Continuous Delivery, in Continuous Deploy-\nment, release candidates resulting from software changes are automatically deployed to\nproduction without the intervention of any team member [14,24].\nRegarding how organizations could adopt DevOps and measure its success, the\nCALMS framework is considered a foundational model for DevOps. CALMS is an acronym\nfor Culture-Automation-Lean-Measurement-Sharing. CALMS was created by Jez Humble,\nco-author of The DevOps Handbook. The acronym highlights the ﬁve core elements of\nCALMS [23]:\n•\nCulture: a cultural change focusing on collaboration and integration between develop-\ners’ team and operations’ team;",
    "4": "Future Internet 2022, 14, 63\n4 of 14\n•\nAutomation: a high level of automation to achieve continuous delivery running each\ncode change through automated tests;\n•\nLean: the application of lean principles to increase efﬁciency and reduce complexity;\n•\nMeasurement: keeping key performance indicators for measuring performance and\nidentifying where improvements can be achieved;\n•\nSharing: knowledge and best practice should be shared in the organization and across\norganizational boundaries.\nSecurity issues concerning DevOps led to the spread of another term: DevSecOps. It\nadds “Security” to “Development” and “Operations”, which were already part of the De-\nvOps term. According to Rajapakse et al. [14], security is often treated as a non-functional\nrequirement, handled at a later stage of the software development life cycle. Under DevSec-\nOps, security should be built into every part of the DevOps life cycle. The purpose of the\nDevSecOps philosophy is to align the speed of code delivery with building secure code,\nmerged into one streamlined process.\nThe application of DevOps still must deal with some problems and concerns that\ncan limit its use (e.g., resistance to change, organizational vision, legacy systems) [26].\nMisuse of the term, lack of clear guidelines and, as already mentioned, the lack of a\nclear deﬁnition creates some ambiguity about how to use DevOps principles. Those\nprinciples presuppose that, before DevOps, development teams and operations teams were\nworking independently with almost no knowledge about each other’s work. This lack of\nknowledge across teams is not, in general, as deep as DevOps assume. The whole software\ndevelopment process is improved with better collaboration between teams, as DevOps\nadvocates, but it does not mean that DevOps teams did not previously cooperate. Another\nconcern around DevOps is that its adoption rate is still low.\nThere is a close relation between DevOps and Agile methods in software development.\nAccording to Leite et al. [13], DevOps is an evolution of the Agile movement since software\ndevelopment under Agile favors small release iterations with customer reviews.\n2.2. Similarities and Differences between DevOps and Agile\nIn the context of Software Engineering, as discussed in this paper, DevOps can be\nunderstood as a behavioral evolution of Agile development [27], which was gradually\nconceived through practical experiences of implementation in software development.\nHowever, it is important to point out that the Agile method has its focus directed speciﬁcally\nto software development [28], while DevOps aims to involve the software development area\nin the implementation and operation of the software developed or still under development,\nwhich shows us that DevOps processes are being implemented within the Agile processes.\nCurrently, in the professional community of Information and Communication Tech-\nnologies (ICT) there is a growing consensus, in practice, that DevOps can be understood\nas “DevOps = Agile + Lean + IT service management (ITSM)” [29]. In its method and\nprocesses, DevOps adopts characteristics of frameworks related to the technical area of\nAgile software development together with ICT management processes. Complementarily,\nother relevant methodologies (e.g., Extreme Programming, Dynamic Systems Development\nMethod, Kanban, SCRUM) have approaches intrinsically related to the Agile philoso-\nphy [30–33]. SCRUM is very well-known and intensely used in the Agile method, and\nis generally enhanced by the Kanban tool, for managing the workﬂow of software devel-\nopment, but which also ﬁts very well into the DevOps development process itself [34].\nTable 1 presents the problems or gaps in the Agile method that are solved by adopting the\nDevOps method.",
    "5": "Future Internet 2022, 14, 63\n5 of 14\nTable 1. Problems with Agile development and DevOps solution (adapted from [35]).\nProblem with Agile Development\nDevOps Solution\nDelivery of new features to the customer is\noften delayed.\nDevOps tools are used to test and release new\nfeatures as they are completed.\nCompleted software components are not\ncompatible with each other.\nOpen interfaces and test automation make it\npossible to divide development into\nindependent yet compatible parts.\nQuality of the product is not ensured properly\nprior to release.\nDevOps tools and practices help automating\nquality assurance and reduce the need for\nrepetitive manual work.\nNew features break old functions.\nThe quality of existing functions is ensured\nquickly and automatically after each change.\nBudget goals and deadlines are missed.\nThe tools and procedures of DevOps increase\nthe transparency and predictability of the\ndevelopment work.\nDeveloper teams and IT operations crews are\nnot cooperating.\nDeveloper teams and IT operations crews agree\nupon responsibilities together. Their goals\nare uniﬁed.\nIn the context of the Agile method workﬂow, under the SCRUM framework imple-\nmentation, DevOps presents four metrics [36] that are directly related to software delivery\nthrough enhanced software engineering: i—waiting time, ii—deployment frequency, iii—\nmean time to restore (MTTR), and iv—change failure percentage. These metrics can be\nimplemented in the execution cycle of the Agile by SCRUM approach, enhancing the\nqualitative process of the organizational performance of software companies, in meeting\nthe planned objectives, because it increases in a relevant way the level of monitoring and\nmaturity of the activities performed in each work cycle.\nOrganizations that implement Agile methodologies focus on productivity and process\noptimization by reducing execution time [37]. However, software development environ-\nments are shrouded in constant change, with continuous interactions of teams that focus\non deliverable products. DevOps processes can improve the interactivity of the develop-\nment teams, improving the integration process of the stakeholders of a project in an Agile\nenvironment, facilitating the continuity of the processes in a more balanced and stable way.\nAccording to [38], the DevOps culture can be implemented to carry out an incident\nmanagement process for deliverable products, allowing Agile development teams to be\ncontinuously monitored, because it integrates the software deployment process by monitor-\ning operations, as provided by the DevOps framework. Therefore, DevOps enhances the\nstability of the Agile cycle, as we mentioned before; that is, while Agile focuses on produc-\ntivity in product deliverables in a more technical approach around ICT [39], DevOps directs\nits processes to checking the level of effectiveness of what is produced in the work cycles\nof the development teams. Therefore, in this central aspect of integration, there will be a\ntendency toward an improved qualitative increment in the scope of Software Engineering.\nWithin what we have discussed so far, it was veriﬁed that the processes originated\nfrom Agile methodologies are the structural base of DevOps [18,39], and that the union\nof these methodologies increases the level of intelligence of the information system that is\ngenerated in the work cycles, because it implements several functions, such as Developers,\nSystem Architects, Product Owners, Release Engineers, and Testers. Therefore, the level of\ncollaboration is elevated with professionals that are beyond the initially foreseen roles, for\nexample, in the SCRUM approach that is currently used in Agile, promoting the creation of\ncross-functional teams in the context of the DevOps approach.\nThe approach of development teams that implement Agile methodologies, to opera-\ntions teams as proposed by DevOps, tends to accelerate the software release process, with\nstudies [40] indicating that in addition to acceleration, there is an increase in software\nquality in terms of reliability and maintainability. As a result, the deliverable product meets\nthe conditions foreseen in the essential objectives of the project, from software development",
    "6": "Future Internet 2022, 14, 63\n6 of 14\n(Agile), as in deployment and testing in operations (DevOps). However, despite DevOps\ndecreasing the gap between Developers and Operators, in terms of standardization, the\nDevOps methodology lacks a simple approach or a roadmap to be followed for its imple-\nmentation in an organization [41], leaving it up to companies to deﬁne their standards\nand metrics. This can present as a complicating factor, very dependent on the maturity\nlevel of organizations and work teams, which will have to deﬁne their speciﬁc integration\nprocesses in a DevOps approach.\n3. Methodology\nThis study adopts a qualitative methodology to explore the beneﬁts of the combined\nadoption of DevOps and Agile. This type of methodology is used in the context of social\nsciences and engineering and, according to Merriam and Tisdell [42], is concerned with a\nlevel of reality that cannot be quantiﬁed, exploring meanings, aspirations, beliefs, values,\nand attitudes that correspond to a deeper space of relationships, processes, and phenomena,\nand cannot be reduced for operationalization of variables. Dyba et al. [43] recognize that the\nsoftware industry presents lines of research that are not only limited to exploring technical\nsoftware engineering issues, but also need to look at the challenges of the intersection\nbetween technical and non-technical aspects. In this sense, adopting a purely quantitative\napproach is insufﬁcient. Moreover, phenomena addressed in the ﬁeld of project develop-\nment in a DevOps and Agile paradigm are complex and unique. Therefore, the qualitative\napproach adopted in this study allows for exploring and understanding the relationships\nand activities performed by organizations in their software development activity.\nIn the scope of this study, twelve case studies were incorporated that report the\nsimultaneous inclusion of DevOps and Agile methodologies in their software development\nteams. These cases correspond to reports and press releases from commercial vendors of\nreference in this area. The data come from secondary sources and the authors have not\nmade any changes to the press releases that represent the view of each manufacturer. No\nsummarization of the press releases has been made. It cannot be guaranteed that there\nis no risk of bias since the identiﬁed beneﬁts come from press releases from commercial\ncompanies in the area and that have commercial goals in the market. However, to minimize\nthis risk, external and internal validity mechanisms were used. To ensure external validity,\nmultiple case studies were used of companies in different geographic areas, and to ensure\ninternal validity, the same identiﬁer was used to associate similar beneﬁts between the\ncase studies.\nTable 2 presents brief descriptions of the proﬁles of the case studies. In general, it can\nbe concluded that the area of activity of the organizations is similar through the offer of IT\nproducts and services based on cloud architecture. We also highlight the offer of consulting\nservices in the ﬁeld of web and mobile development, and the offer of complementary\nservices in the ﬁeld of artiﬁcial intelligence, big data, and cybersecurity.\nThematic analysis is an interpretive data analysis method widely used in the social\nsciences and engineering and was adopted in the context of this study to identify common\nbeneﬁts in the combined adoption of DevOps and Agile. Flexibility is, according to Braun\nand Clarke [44], one of the beneﬁts of thematic analysis. Through its theoretical freedom,\nthe thematic analysis provides a ﬂexible and useful research tool that can potentially\nprovide a rich and detailed set of information about the data. Figure 1 shows the process\nof conducting data. The step begins with the coding process in which one coded the\nadvantages present in each case study report. After that, an iterative process follows in\nwhich common themes of the advantages among the case studies are identiﬁed. Finally, the\nlast step consists of accounting for the beneﬁts identiﬁed in the case studies. This approach\nallows for a ranking of the top beneﬁts.",
    "7": "Future Internet 2022, 14, 63\n7 of 14\nTable 2. Proﬁles of the case studies.\nID\nCountry\nDescription\nCS1\nIndia\nA company that operates in the IT outsourcing services market in building\ntechnological solutions in areas such as web apps, mobile apps, cloud\nstrategy, analytics and business intelligence, testing, quality assurance\nservices, and Agile project management. Their report looks to different\nways to enable DevOps in Agile environments.\nCS2\nUSA\nInformation technology company and advanced training for IT\nprofessionals in the ﬁelds of programming and technological development.\nTheir report explores the relevance of Agile principles for deployment\nactivities.\nCS3\nCanada\nA global company that offers consulting services to help companies adjust\ntheir development teams by integrating new practices and technologies.\nTheir report explores how Agile practices should be updated considering\nthe needs of operations teams in organizations.\nCS4\nUSA\nCloud services provider offering technology infrastructures based on\npublic cloud, private cloud, hybrid cloud, and multi-cloud. Their report\nexplores the difference and similarities between both paradigms.\nCS5\nAustralia\nAustralian software company that develops products for software\ndevelopers, project managers, and other software development teams.\nTheir press release presents how automation processes can be\nimplemented using a combination of both paradigms.\nCS6\nUSA\nGlobal business and technology consulting ﬁrm dedicated to helping\norganizations leverage emerging technologies and the latest business\nmanagement thinking to achieve competitive advantage and mission\nsuccess. Provides consulting and training services, primarily targeted at\nexecutives. Their article explores the differences between the two\nparadigms and suggests points of convergence between them.\nCS7\nUSA\nCompany specialized in the dissemination of technological information in\nthe ﬁeld of information and communication technologies. Their press\nrelease looks to important aspects observed while combining DevOps and\nAgile.\nCS8\nUSA\nMultinational company in information technologies that develops\nautomation solutions and advanced knowledge in areas such as\nautomation, enterprise DevOps, data-driven business, and adaptive\ncybersecurity. Their article explores the role that Agile practices can play in\nDevOps.\nCS9\nSwitzerland\nCompany that operates mainly in the European market in providing\ncaptivating scalable cloud-based solutions. Their article looks at the\nisolated beneﬁts of each paradigm and tries to predict the beneﬁts of their\ncombined adoption.\nCS10\nIndia\nCompany that develops technological solutions for the education ﬁeld and\nrelies on the application of the Agile scalability paradigm, especially the\nSAFe model. Their article explores the change-driven management\napproach and looks at how DevOps and SCRUM address this challenge.\nCS11\nGermany\nIT company that operates in the global market implementing cloud\nsolutions, DevOps, software testing, quality assurance, artiﬁcial\nintelligence, and big data. Their press release looks at the problems in\nsoftware engineering that the joint adoption of both paradigms can solve.\nCS12\nUK\nA consulting company that aims to optimize work processes in\norganizations using cloud solutions, slack, and Trello services. Their press\nrelease looks at the role of the cloud and Agile methodologies in\ndeveloping the DevOps paradigm.",
    "8": "Future Internet 2022, 14, 63\n8 of 14\n \nFigure 1. Thematic analysis process (authors own illustration).\n4. Results\nThe twelve case study reports associated with each company presented in Table 2\nwere thoroughly read and each identiﬁed beneﬁt was assigned a unique identiﬁer. Each\ntheme is identiﬁed by the acronym “BF” and a number is associated to differentiate each\nbeneﬁt. Common themes have the same acronym. A brief description of how each beneﬁt is\nunderstood in the case studies is also included. Table 3 presents the identiﬁcation process of\nthe themes associated with each case study. Table 3 shows the themes for all the case studies\nmentioned in Table 2. We highlight the existence of themes that are common to several case\nstudies. Although the themes are common, the vision of each case study in relation to them\nhas some relevant oscillations, which indicate a complementary vision of the institutions\npresent in the case studies. For example, in CS1 time to market emerges due to increased\ncollaboration between teams, whereas in CS8 process integration is highlighted. Something\nsimilar emerges in relation to cost. Cost reduction is understood in CS6 as achieved from\nthe existence of multi-skilled human resources, whereas in CS8 cost reduction is motivated\nby the effects of increased team performance.\nTable 3. Identiﬁed beneﬁts themes in the case studies.\nID\nBeneﬁt\nCS1\n(BF1) Time to market: greater collaboration between teams reduces software\ndelivery cycles\n(BF2) Automation: the combined development and production process becomes more\nautomated to meet market needs\nCS2\n(BF2) Automation: continuous delivery and integration combined with fast releases\nlead to the automation of activities\n(BF3) Communication: promote constant communication between development and\noperational team\n(BF4) Mindset and culture: establishment of collaboration among teams\nCS3\n(BF1) Time to market: through continuous delivery from the development phases\n(BF5) Planning: the product backlog now includes services are products that need to\nbe deployed, scalable, maintained, monitored, and supported as a service\nCS4\n(BF4) Mindset and culture: increase the quality of collaboration\n(BF6) Visibility: more visibility for release and upgrade processes\n(BF7) Risk mitigation: better identiﬁcation of risks in the context of each sprint\n(BF8) Software quality: decrease the existence of software errors and helps to launch\nfaster patches\nCS5\n(BF2) Automation: contribution for the implementation of Agile ﬂuency model which\nfocus on value, transparency, and alignment\n(BF3) Communication: amplify feedback loops between development and\noperational team\n(BF4) Mindset and culture: looks to the performance of all system instead of local\ndepartments. Furthermore, promotes learning from failure.\n(BF5) Planning: increase the planning dimension of unplanned events typically found\nin the context of operational teams",
    "9": "Future Internet 2022, 14, 63\n9 of 14\nTable 3. Cont.\nID\nBeneﬁt\nCS6\n(BF1) Time to market: deployment chains cut the time needed to get a product\nto market\n(BF9). Cost: combining people and activities makes people more multi-skilled with\nfuture reduction in human resource costs\nCS7\n(BF2) Automation: increasing code size and complexity encourages\nprocess automation\n(BF3) Communication: communication between both teams is constant with\nfeedback loops\n(BF10): Software quality: functional and load tests are both considered\n(BF11). Efﬁciency: project management considers performance metrics that result from\ncombined methods in both areas\nCS8\n(BF1) Time to market: integrated processes make order fulﬁllment faster\n(BF6) Visibility: increased visibility over data and processes\n(BF9) Cost: increased productivity and team performance\nCS9\n(BF2) Automation: increase speed and agility to attend continuous\nrequirements changes\n(BF3) Communication: smooth communication between the team and the customers\nby continual iteration\n(BF12) Flexibility: agility in the face of continuous requests for revision becomes\nimportant to make the organization competitive\nCS10\n(BF2) Automation: implementation of a paradigm based in continuous integration,\ncontinuous delivery, and continuous deployment\n(BF3) Communication: by fostering communication in the teams, constant\ncollaboration is promoted\nCS11\n(BF2): Automation: shorten the development cycle by promoting the automation of\nrepetitive tasks\n(BF10) Software quality: focus on end-product quality\nCS12\n(BF2) Automation: better performance when compared against on-premise DevOps\nautomation. Furthermore, it contributes to eliminates human errors\n(BF12) Flexibility: it empowers each stage of the application delivery lifecycle\nTable 4 summarizes the comparative analysis of the identiﬁed beneﬁts. All previously\nidentiﬁed beneﬁts are mapped. The “ranking” attribute allows us to understand the\nrelative importance of the beneﬁts and to perceive which ones are transversal to several\ncase studies and which ones emerge only in a very speciﬁc context of each organization.\nThe beneﬁts related to automation (BF2), communication (BF3), and time to market (BF1)\nstand out. These are the three main beneﬁts that can be found in the combined adoption\nof Agile and DevOps. Conversely, there are other beneﬁts that are identiﬁed in a smaller\nnumber of case studies, namely, those related to efﬁciency (BF11), risk mitigation (BF7),\nand software quality (BF8). These beneﬁts are less relevant and arise in the speciﬁc context\nof each organization, which indicates that they are more difﬁcult to replicate in other\nsoftware companies.",
    "10": "Future Internet 2022, 14, 63\n10 of 14\nTable 4. Comparative analysis of beneﬁts and ranking.\nBeneﬁt\nCS1\nCS2\nCS3\nCS4\nCS5\nCS6\nCS7\nCS8\nCS9\nCS10\nCS11\nCS12\nRanking\nBF1\nX\nX\nX\nX\n#3\nBF2\nX\nX\nX\nX\nX\nX\nX\nX\n#1\nBF3\nX\nX\nX\nX\nX\n#2\nBF4\nX\nX\nX\n#4\nBF5\nX\nX\n#5\nBF6\nX\nX\n#5\nBF7\nX\n#10\nBF8\nX\n#10\nBF9\nX\nX\n#5\nBF10\nX\nX\n#5\nBF11\nX\n#10\nBF12\nX\nX\n#5\n5. Discussion\nAlthough Agile and DevOps are widespread and different concepts, they can be\ncombined and offer relevant beneﬁts to organizations. As reported in [45], companies have\nproblems in the process of implementing and releasing new software versions because most\nof the time this is a process performed manually. In addition, this approach leads to a high\nquantity and frequency of errors [46]. To reduce the incidence of problems and increase\nﬂexibility and automation, non-operational resources can be used and in environments that\nare not in production. The combined adoption of Agile and DevOps allows the developer\nto gain greater control over the environment, infrastructure, and applications.\nThe seamless integration between Agile and DevOps generates a more collaborative\nand Agile framework. This approach leads to a simpliﬁcation and automation of model\nprocesses to make them more rational and efﬁcient. A classic example of this beneﬁt is\ngiven by Fabro [47] when highlighting the reduction in delivery cycles, endowing small\ndevelopment packages with a previously unrecognized value. Hemon-Hildgen et al. [48]\nalso highlight the role of orchestration, which consists of automating tasks to optimize\nthe process and reduce repetitive steps that add little to the development cycle. Finally,\nautomated testing along the Agile and DevOps chain allows the reuse of tests between\nenvironments and makes them more sustainable [49].\nTeam communication is recognized in DeFranco and Laplante [50] and Schmutz\net al. [51] as the main cause for product delivery failures. By starting to work together, teams\ncan more easily track the evolution of processes from their inception, which fosters the\nemergence of process improvements. Cois et al. [52] recognize that the great differentiator\nof DevOps lies in its ability to optimize communication between the teams involved and the\ncustomer. This allows, for example, the team to involve the operations team, which enables\nthe implementation of the ITOps model [53]. This enables it to provide a sufﬁciently secure\ndevelopment environment. However, interconnecting it with an organization’s Agile teams\noffers more potential. For example, the marketing and sales departments can be involved\nin the activities covering the delivery of the releases, which allows companies to add even\nmore value to the product by using the full potential of their available resources.\nThe ﬁndings further revealed a very diverse number of beneﬁts, such as increased\nvisibility over processes, better identiﬁcation and mitigation of risks, or increased software\nquality. The integration of the two paradigms fosters consolidation, which allows project\nmanagers to have greater visibility of both the work of the teams and the interdependencies\nbetween them [54]. Furthermore, iterative planning between teams makes it easier to adapt\nin case of changes, and continuous customer feedback generates value from the beginning\nof the project, lowering the risks associated with development and operation [55]. In the\njoint Agile and DevOps paradigm, both teams share responsibility for producing functional\nand quality code and need to work together to achieve these common goals.",
    "11": "Future Internet 2022, 14, 63\n11 of 14\nFinally, it is recognized that in recent years there has been a growing adoption of the\nterm “DevOps culture”, as a counter position to DevOps implementations based only on\ntools. In DevOps culture, it is advocated that software development and infrastructure\nteams work together towards the same goal [56,57]. As Clavier and Kaminski [58] argue,\nDevOps not only optimizes development processes but changes the way employees think\nabout their products and interact with customers. The combined Agile and DevOps\napproach allows the leveraging of these beneﬁts by enhancing empathy among team\nmembers and unites sectors that previously worked independently and without personal\nconnection. Furthermore, as Venugopal [59] acknowledges, when there is trust between\nteams, then it also increases the freedom that professionals have to experiment and innovate,\nwithout the problems of incompatibility and miscommunication as there would be with\nseparate teams.\n6. Conclusions\nThis study demonstrates that the Agile and DevOps paradigms are not incompatible\nbut can bring beneﬁts to organizations when properly aligned. While Agile brought\nabout a fast delivery model aligned with customer expectations, DevOps optimized this\nsystem. In this sense, an alternative that usually gives great results is the adoption of both\nmethodologies. They not only complement each other but also help companies to face\nchanges in a team.\nChanging the strategy and methodology of a team can be a delicate process full of\nobstacles. Therefore, organizations must address this challenge in a cross-cutting way\nwithin the organization to avoid isolated silos that do not contribute to collaborative work.\nAgile creates a space for more agile work with partial deliveries, while DevOps creates an\nenvironment conducive to managing these processes, with effective communication.\nThis study offers both theoretical and practical relevant contributions. In the theoretical\ndimension, this study has enabled the identiﬁcation of a set of beneﬁts of the combined\nadoption of both paradigms through the adoption of multiple case studies of software\ncompanies in the international market. The study identiﬁes a total of 12 beneﬁts and allows\nus to explore the relative relevance of each of them. From a practical perspective, the\nbeneﬁts identiﬁed are relevant to companies that, having adopted Agile and DevOps alone,\nhave not yet taken steps towards the combined adoption of both models. The ﬁndings of\nthe study made it evident that the two models are not incompatible, but when combined\nthey can amplify their impacts on organizations.\nLimitations and Future Research Directions\nThis study presents some limitations. Firstly, the case studies included in this study\ncome from secondary sources, which does not allow us to deepen the knowledge on the\nthemes with the use of interviews that may evidence the application of both paradigms.\nFurthermore, the case studies come from companies with commercial purposes, which\nmay not give a totally unbiased view of the beneﬁts to the organizations or represent very\nspeciﬁc groups of the population. Nevertheless, this study adopted external and internal\nvalidation mechanisms to reduce this risk of bias. As future work it is recommended that\nthe business view be complemented with a scientiﬁc view of the beneﬁts of combining\nDevOps and Agile and, to this end, a systematic review of the literature in the ﬁeld can be\nconducted. Moreover, the qualitative approach used does not allow us to systematically\nidentify all the advantages and make a rigorous quantiﬁcation of these beneﬁts. As future\nwork, a quantitative study based on a large dataset is suggested to identify the advantages\nof the combined adoption of both paradigms considering also different sectors of activity\nof the organizations. It would also be relevant to consider the degree of maturity in the\nimplementation of Agile and DevOps in these organizations and, thus, explore its relevance\nin the beneﬁts found, since it is expected that some of the beneﬁts may be more easily\nachieved by organizations with lower levels of maturity in these processes.",
    "12": "Future Internet 2022, 14, 63\n12 of 14\nAuthor Contributions: Conceptualization, F.A., J.S. and S.L.; methodology, F.A.; validation, F.A., J.S.\nand S.L.; formal analysis, F.A.; investigation, F.A., J.S. and S.L. writing—original draft preparation,\nF.A., J.S. and S.L.; writing—review and editing, J.S. and S.L. All authors have read and agreed to the\npublished version of the manuscript.\nFunding: This research received no external funding.\nInstitutional Review Board Statement: Not applicable.\nInformed Consent Statement: Not applicable.\nData Availability Statement: Not applicable.\nConﬂicts of Interest: The authors declare no conﬂict of interest.\nReferences\n1.\nDyba, T.; Dingsoyr, T. Empirical studies of agile software development: A systematic review. Inf. Soft. Tech. 2008, 50, 833–859.\n[CrossRef]\n2.\nErgasheva, S.; Kruglov, A. Software Development Life Cycle early phases and quality metrics: A Systematic Literature Review. J.\nPhysics. Conf. Ser. 2020, 1694, 012007. [CrossRef]\n3.\nPanwar, D.; Tomar, P.; Kumar, P. Innovative methods to make the component-based software development process more effective\nto produce quality software. J. Stat. Manag. Syst. 2017, 20, 765–775. [CrossRef]\n4.\nSommerville, I. Software Engineering; India Education Services: Bengaluru, India, 2018.\n5.\nShore, J.; Warden, S. The Art of Agile Development; O’Reilly Media: Newton, MA, USA, 2021.\n6.\nPetersen, K.; Wohlin, C. A comparison of issues and advantages in agile and incremental development between state of the art\nand an industrial case. J. Syst. Soft 2009, 82, 1479–1490. [CrossRef]\n7.\nGregory, P.; Taylor, K. Deﬁning Agile Culture: A Collaborative and Practitioner-Led Approach. In Proceedings of the IEEE/ACM\n12th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE), Montreal, QC, Canada, 27\nMay 2019. [CrossRef]\n8.\nTolfo, C.; Wazlawick, R.S.; Ferreira, M.G.; Forcellini, F.A. Agile methods and organizational culture: Reﬂections about cultural\nlevels. J. Soft Maint. Evol. Res. Pract. 2011, 23, 423–441. [CrossRef]\n9.\nJunker, T.L.; Bakker, A.B.; Gorgievski, M.J.; Derks, D. Agile work practices and employee proactivity: A multilevel study. Hum.\nRelat. 2021; in press. [CrossRef]\n10.\nSweetman, R.; Conboy, K. Portfolios of Agile Projects: A Complex Adaptive Systems’ Agent Perspective. Proj. Manag. J. 2018, 49,\n18–38. [CrossRef]\n11.\nBrink, T. Managing uncertainty for sustainability of complex projects. Int. J. Manag. Proj. in Bus. 2017, 10, 315–329. [CrossRef]\n12.\nLuz, W.P.; Pinto, G.; Bonifácio, R. Building a collaborative culture: A grounded theory of well succeeded devops adoption in\npractice. In Proceedings of the 12th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement,\nOulu, Finland, 11–12 October 2018.\n13.\nLeite, L.; Rocha, C.; Kon, F.; Milojicic, D.; Meirelles, P. A Survey of DevOps Concepts and Challenges. ACM Comp. Surv. 2019, 52,\n127–162. [CrossRef]\n14.\nRajapakse, R.N.; Zahedi, M.; Babar, M.A.; Shen, H. Challenges and solutions when adopting DevSecOps: A systematic review.\nInf. Soft Tech. 2022, 141, 106700. [CrossRef]\n15.\nWiedemann, A.; Wiesche, M.; Gewald, H.; Krcmar, H. Understanding how DevOps aligns development and operations: A\ntripartite model of intra-IT alignment. Eur. J. Inf. Syst. 2020, 29, 458–473. [CrossRef]\n16.\nJabbari, R.; bin Ali, N.; Petersen, K.; Tanveer, B. Towards a beneﬁts dependency network for DevOps based on a systematic\nliterature review. J. Soft: Evol. Proc. 2018, 30, e1957. [CrossRef]\n17.\nJoby, P. Exploring DevOps: Challenges and Beneﬁts. J. Inf. Tech. Dig. World 2019, 1, 27–37. [CrossRef]\n18.\nHemon, A.; Lyonnet, B.; Rowe, F.; Fitzgerald, B. From Agile to DevOps: Smart Skills and Collaborations. Inf. Syst. Front. 2020, 22,\n927–945. [CrossRef]\n19.\nMelgar, A.S.; Osores, J.; Osores, R.; Relaiza, H.R.; Flores, J.A.; Orihuela, V.H.; Lozano, R.A. DevOps as a culture of interaction and\ndeployment in an insurance company. Turk. J. Comp. Mat. Educ. 2021, 12, 1701–1708. [CrossRef]\n20.\nHammond, P.; Allspaw, J. 10+ Deploys Per Day: Dev and Ops Cooperation at Flickr [Video]. 25 June 2009. Available online:\nhttps://www.youtube.com/watch?v=LdOe18KhtT4 (accessed on 28 December 2021).\n21.\nFrederic, P. The Incredible True Story of How DevOps Got Its Name [Web Log Message]. 6 May 2014. Available online:\nhttps://newrelic.com/blog/nerd-life/devops-name (accessed on 28 December 2021).\n22.\nFitzpatrick, L.; Dillon, M. The Business Case for Devops: A Five-Year Retrospective. Cutter. IT J. 2011, 24, 19–27.\n23.\nWiedemann, A.; Forsgren, N.; Wiesche, M.; Gewald, H.; Krcmar, H. Research for Practice: The DevOps Phenomenon. Com. ACM\n2019, 62, 44–49. [CrossRef]",
    "13": "Future Internet 2022, 14, 63\n13 of 14\n24.\nStahl, D.; Mårtensson, T.; Bosch, J. Continuous Practices and Devops: Beyond the Buzz, What Does it All Mean? In Proceedings of\nthe 43rd Euromicro Conference on Software Engineering and Advanced Applications (SEAA), Vienna, Austria, 30–31 August 2017.\n[CrossRef]\n25.\nLarman, C.; Basili, V.R. Iterative and Incremental Development: A Brief History. Computer 2003, 36, 47–56. [CrossRef]\n26.\nTozzi, C. 5 Problems with DevOps [Web Log Message]. 12 January 2021. Available online: https://www.itprotoday.com/devops-\nand-software-development/5-problems-devops (accessed on 28 December 2021).\n27.\nLwakatare, L.E.; Kuvaja, P.; Oivo, M. Relationship of DevOps to Agile, Lean and Continuous Deployment. In Product-Focused\nSoftware Process Improvement; Abrahamsson, P., Jedlitschka, A., Nguyen Duc, A., Felderer, M., Amasaki, S., Mikkonen, T., Eds.;\nLecture Notes in Computer Science; Springer International Publishing: Cham, Switzerland, 2016; pp. 399–415. [CrossRef]\n28.\nWang, C.; Liu, C. Adopting DevOps in Agile: Challenges and Solutions. Adopting DevOps in Agile: Challenges and Solutions.\n29 June 2018. Available online: http://www.diva-portal.org/smash/record.jsf?pid=diva2%3A1228684&dswid=5071 (accessed on\n2 January 2022).\n29.\nGalup, S.; Dattero, R.; Quan, J. What Do Agile, Lean, and ITIL Mean to DevOps? Com. ACM 2020, 63, 48–53. [CrossRef]\n30.\nHema, V.; Thota, S.; Kumar, S.N.; Padmaja, C.; Krishna, C.B.; Mahender, K. Scrum: An Effective Software Development Agile\nTool. IOP Conf. Ser. Mater. Sci. Eng. 2020, 981, 022060. [CrossRef]\n31.\nSantos, P.S.; Beltrão, A.C.; Souza, B.P.; Travassos, G.H. On the beneﬁts and challenges of using kanban in software engineering: A\nstructured synthesis study. J. Soft Eng. Res. Dev. 2018, 6, 13. [CrossRef]\n32.\nFojtik, R. Extreme Programming in development of speciﬁc software. Procedia Comput. Sci. 2011, 3, 1464–1468. [CrossRef]\n33.\nSani, A.; Arbain, A.F.; Jeong, S.R.; Ghani, I. A Review on Software Development Security Engineering using Dynamic System\nMethod (DSDM). Int. J. Comp. Applic 2013, 69, 33–44. [CrossRef]\n34.\nMousaei, M.; Gandomani, T.J. DevOps Approach and Lean Thinking in Agile Software Development: Opportunities, Advantages,\nand Challenges. J. Soft Eng. Int. Syst. 2020, 5, 1–10.\n35.\nHamunen, J. Challenges in Adopting a Devops Approach to Software Development and Operations. 23 July 2016. Available\nonline: https://aaltodoc.aalto.ﬁ/handle/123456789/20766 (accessed on 2 January 2022).\n36.\nMarnewick, C.; Langerman, J. DevOps and Organizational Performance: The Fallacy of Chasing Maturity. IEEE Soft 2021, 38,\n48–55. [CrossRef]\n37.\nSubramanian, A.; Krishnamachariar, P.K.; Gupta, M.; Sharman, R. Auditing an Agile Development Operations Ecosystem. In\nResearch Anthology on Agile Software, Software Development, and Testing; International Management Association, Ed.; IGI Global:\nHershey, PA, USA, 2022; pp. 1154–1176. [CrossRef]\n38.\nFaustino, J.; Pereira, R.; Alturas, B.; Silva, M.M.D. Agile Information Technology Service Management with DevOps: An Incident\nManagement Case Study. Int. J. Agile Syst. Manag. 2020, 13, 339–389. [CrossRef]\n39.\nDörnenburg, E. The Path to DevOps. IEEE Soft 2018, 35, 71–75. [CrossRef]\n40.\nCéspedes, D.; Angeleri, P.; Melendez, K.; Dávila, A. Software Product Quality in DevOps Contexts: A Systematic Literature\nReview. In Trends and Applications in Software Engineering; Mejia, J., Muñoz, M., Rocha, Á., Calvo-Manzano, J.A., Eds.; Advances in\nIntelligent Systems and Computing; Springer International Publishing: Cham, Switzerland, 2020; pp. 51–64. [CrossRef]\n41.\nNybom, K.; Smeds, J.; Porres, I. On the Impact of Mixing Responsibilities Between Devs and Ops. In Agile Processes, in Software\nEngineering, and Extreme Programming; Sharp, H., Hall, T., Eds.; Lecture Notes in Business Information Processing; Springer\nInternational Publishing: Cham, Switzerland, 2016; pp. 131–143. [CrossRef]\n42.\nMerriam, S.B.; Tisdell, E.J. Qualitative Research: A Guide to Design and Implementation; John Wiley & Sons: Hoboken, NJ, USA, 2015.\n43.\nDyba, T.; Prikladnicki, R.; Rönkkö, K.; Seaman, C.; Sillito, J. Qualitative research in software engineering. Emp. Soft Eng. 2011, 16,\n425–429. [CrossRef]\n44.\nBraun, V.; Clarke, V. Thematic Analysis: A Practical Guide; SAGE Publications: Thousand Oaks, CA, USA, 2021.\n45.\nDanesh, A.S.; Saybani, M.R.; Danesh, S.Y. Software release management challenges in industry: An exploratory study. Afri. J. Bus.\nManag. 2011, 5, 8050–8056. [CrossRef]\n46.\nOgheneovo, E. Software Dysfunction: Why Do Software Fail? J. Comp. Commun. 2014, 2, 25–35. [CrossRef]\n47.\nFabro, V. The Uniﬁed Value of Agile and DevOps. 14 December 2020. Available online: https://www.insight.com/en_US/\ncontent-and-resources/tech-journal/winter-2020/the-uniﬁed-value-of-agile-and-devops.html (accessed on 5 January 2022).\n48.\nHemon-Hildgen, A.; Rowe, F.; Monnier-Senicourt, L. Orchestrating automation and sharing in DevOps teams: A revelatory case\nof job satisfaction factors, risk and work conditions. Eur. J. Inf. Syst. 2020, 29, 474–499. [CrossRef]\n49.\nAli, N.; Daneth, H.; Hong, J.E. A hybrid DevOps process supporting software reuse: A pilot project. J. Soft Evol. Proc. 2020,\n32, e2248. [CrossRef]\n50.\nDeFranco, J.F.; Laplante, P.A. Review and Analysis of Software Development Team Communication Research. IEEE Trans. Prof.\nCommun. 2017, 60, 165–182. [CrossRef]\n51.\nSchmutz, J.B.; Meier, L.L.; Manser, T. How effective is teamwork really? The relationship between teamwork and performance in\nhealthcare teams: A systematic review and meta-analysis. BMJ Open 2019, 9, e028280. [CrossRef] [PubMed]\n52.\nCois, C.A.; Yankel, J.; Connell, A. Modern DevOps: Optimizing software development through effective system interactions. In\nProceedings of the IEEE International Professional Communication Conference (IPCC), Pittsburgh, PA, USA, 13–15 October 2014.\n[CrossRef]",
    "14": "Future Internet 2022, 14, 63\n14 of 14\n53.\nKumar, N.; Gondkar, R. Role of ITOps in DevOps. In Proceedings of the International Conference on Innovative Computing &\nCommunication (ICICC), New Delhi, India, 19–20 February 2021.\n54.\nReifer, D. Is Merging Agile and DevOps Worth the Pain? 17 January 2019. Available online: https://www.cutter.com/article/\nmerging-agile-and-devops-worth-pain-501791 (accessed on 5 January 2022).\n55.\nOzanich, A. DevOps Lifecycle vs Agile Methodology: Learning the Difference. 18 November 2021. Available online: https:\n//blog.hubspot.com/website/devops-vs-agile (accessed on 5 January 2022).\n56.\nEbert, C.; Gallardo, G.; Hermantes, J.; Serrano, N. DevOps. IEEE Soft 2016, 33, 94–100. [CrossRef]\n57.\nLuz, W.P.; Pinto, G.; Bonifácio, R. Adopting DevOps in the real world: A theory, a model, and a case study. J. Syst. Soft 2019, 157,\n110384. [CrossRef]\n58.\nClavier, P.; Kaminski, A. How We Applied a DevOps Mindset to Manage Our People Data. 15 January 2021. Available online:\nhttps://tdwi.org/articles/2021/01/15/biz-all-apply-devops-mindset-to-manage-people-data.aspx (accessed on 7 January 2022).\n59.\nVenugopal, D. DevOps: Driving Innovation with Old Habits. 1 September 2020. Available online: https://devops.com/devops-\ndriving-innovation-with-old-habits/ (accessed on 7 January 2022)."
  },
  "tables": {
    "1": [
      [
        [
          "",
          ""
        ],
        [
          "",
          ""
        ],
        [
          "",
          ""
        ],
        [
          "",
          null
        ]
      ]
    ]
  },
  "images": {
    "1": [
      {
        "filename": "page_1_image_1.png",
        "path": "output\\images\\temp_6951be5e-b8de-4df0-a75c-522b0cd0efa3\\page_1_image_1.png",
        "extraction_date": "2025-01-25T18:59:41.191991",
        "page_number": 1,
        "image_index": 1,
        "width": 500,
        "height": 175
      },
      {
        "filename": "page_1_image_2.png",
        "path": "output\\images\\temp_6951be5e-b8de-4df0-a75c-522b0cd0efa3\\page_1_image_2.png",
        "extraction_date": "2025-01-25T18:59:41.286648",
        "page_number": 1,
        "image_index": 2,
        "width": 355,
        "height": 234
      },
      {
        "filename": "page_1_image_3.png",
        "path": "output\\images\\temp_6951be5e-b8de-4df0-a75c-522b0cd0efa3\\page_1_image_3.png",
        "extraction_date": "2025-01-25T18:59:41.309808",
        "page_number": 1,
        "image_index": 3,
        "width": 355,
        "height": 234
      },
      {
        "filename": "page_1_image_4.png",
        "path": "output\\images\\temp_6951be5e-b8de-4df0-a75c-522b0cd0efa3\\page_1_image_4.png",
        "extraction_date": "2025-01-25T18:59:41.333269",
        "page_number": 1,
        "image_index": 4,
        "width": 355,
        "height": 234
      },
      {
        "filename": "page_1_image_5.png",
        "path": "output\\images\\temp_6951be5e-b8de-4df0-a75c-522b0cd0efa3\\page_1_image_5.png",
        "extraction_date": "2025-01-25T18:59:41.342791",
        "page_number": 1,
        "image_index": 5,
        "width": 355,
        "height": 234
      }
    ],
    "8": [
      {
        "filename": "page_8_image_1.png",
        "path": "output\\images\\temp_6951be5e-b8de-4df0-a75c-522b0cd0efa3\\page_8_image_1.png",
        "extraction_date": "2025-01-25T18:59:41.383417",
        "page_number": 8,
        "image_index": 1,
        "width": 1362,
        "height": 364
      }
    ]
  }
}