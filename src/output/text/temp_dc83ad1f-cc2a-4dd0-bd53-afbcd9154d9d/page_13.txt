A. Chandiramani et al. 
 
 
ISSN (Online) : 2583-1798 
13 
Journal of Management and Service Science 
(JMSS) 
A2Z Journals 
 
Now that we have the information we need, we can pass that to our template. To pass it to our template, we’ll create a variable 
named context. This will be a dictionary which will allow us to use its values inside our template. 
 
the_weather/weather/views.py 
def index(request): 
    ... 
    context = {'weather' : weather} 
    return render(request, 'weather/index.html', context) #returns the index.html template 
 
And then in render, we will add the context as the 3rd argument. With the weather data add inside of context, let us go to the 
template to add our data. Inside of the template, all we want to do is modify our HTML to use variables rather than values I 
typed in. Variables will be using {{}} tags [9], and they will refer to anything inside of our context dictionary. Note: Djangcity will 
give you the city name. We do not use weather['city'] like we would in Python. With all the variables replaced, we should now 
see the current weather for our city. We will create a table in the database to hold the city that we want to know the weather 
for. We will create a model for this. Let us go to the models.py file in your weather app, and add the following: 
 
the_weather/weather/models.py 
from django.db import models 
 
class City(models.Model): 
    name = models.CharField(max_length=25) 
 
    def _str_(self):  
        return self.name 
 
    class Meta:  
        verbose_name_plural = 'cities' 
 
This will create a table in the database that will have a column named name, which is the cities name. This city will be a-
charfield, which is a string. To get the changes in our database, we have should run make migrations to generate the code that 
updates the database and migrate to apply for those changes. python manage.py makemigration. Python manage.py migrate: 
We need to make it so we can see this model from our admin dashboard. To achieve that, we need to register this in our ad-
min.py file. 
 
the_weather/weather/admin.py 
from django.contrib import admin from .models import City admin.site.register(City) 
The city is added as an option on the admin dashboard. We can then add some cities into the admin dashboard. I’ll start with 
three: Ludhiana, Tamil Nadu, and Lucknow[3]. With the entries in the database, we need to query these entries in our view. 
Start by import the City model and then query that model for all objects.