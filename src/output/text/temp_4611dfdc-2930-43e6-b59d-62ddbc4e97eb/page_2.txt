www.ijcrt.org                                                                 © 2017 IJCRT | Volume 5, Issue 3 August 2017 | ISSN: 2320-2882 
IJCRT1133441 
International Journal of Creative Research Thoughts (IJCRT) www.ijcrt.org 
947 
 
The agile methodology also weakens the concept of a "finished 
product," which was the main objective of the Waterfall approach. 
Agile considers the fact that software development should be 
iterative and incremental. This means that the customer can 
execute new features or improve the existing functions on each 
new software launch. Agile methodologies allow designing 
software to break down into manageable parts called "user 
stories." Pedrycz suggests that this underline Agile 's value for the 
consumer, allowing developers to deliver quicker input loops and 
maintain product compatibility with business needs [3]. Agile also 
supports adaptive planning, evolving development, early and on-
going delivery, and constant improvement to enable developers 
to respond quickly and flexibly to customer needs, software, and 
other external factors. 
II. 
The Modern DevOps 
Agile was a response to the approaches in waterfall 
methodologies, but DevOps was not an answer to Agile. Both 
hypotheses are not the same – because businesses have started to 
see connections and improved performance and efficiency when 
used in tandem. Two important areas were known as IT 
operations (ITOps) and Development Operations (DevOps), 
which are essential for businesses in the modern era. ITOP 's 
functions include guaranteeing safety, compliance, and reliability 
while DevOps is in charge of designing and delivering end-user 
with new products. Even as ITOps provides reliability and safety 
for all customer needs via the network, DevOps goes hand in hand 
with flexibility and thorough analysis and communication with 
the 
implementation 
of 
new 
software. 
 
Fig i: DevOps continuous delivery life cycle 
Agile and DevOps are fused [3]. 
Pedrycz states that in the past decade, firms have tried 
turning from their original IT team to the specific DevOps group 
or introducing an agile methodology to their software 
development projects [3]. Multiple relationships between these 
two concepts surfaced through these changes in the organization. 
Agile Teams are focused on automated design, test automation, 
Continuous Integration (CI). According to Forsgren and Humble 
DevOps teams frequently need to use these tools, as well as 
metrics and monitoring systems, configuration management, 
virtualization, and cloud computing [4]. Agile looked like a whole 
new paradigm for software developers who were disappointed by 
the limitations of a waterfall approach. However Agile is not 
perfect according to Forsgren and Humble.   Common 
disadvantages to Agile planning involve missed deadline, 
completed elements which, owing to separated scrum or groups, 
are incompatible with each other and additional features splitting 
old features – due to the lack of coordination with DevOps and 
ITOps[4]. All these issues are related to Agile development by 
one thing: the breakdown in communication. 
Forsgren and Humble also suggest that DevOps fills the 
gap in this case. DevOps is a communications theory, both within 
itself and across other departments, because developers and 
operators need to coordinate [4]. DevOps works regularly with 
ITOps to maintain secure and stable testing environments so it 
makes sense to turn to other departments such as marketing so 
customer service by deploying new applications. Advocates of 
using both theories in suitable business requirements believe that 
DevOps can be considered as an extension of Agile methodology. 
Agile focuses on cross-functional teams, generally consisting of 
designers, testers, and developers[5]. Drury et al. mention that 
DevOps takes one step further by introducing an operator who 
can support the transition between software and implementation. 
Due to the inherent communications between DevOps and other 
teams, DevOps can help to automate processes and increase 
openness for all teams. 
content  
III. 
DevOps VS AGILE 
Given that the background and discussion dimensions are 
understood, it is important to explore the comparisons between 
DevOps and agile methodologies [6]. Agile methodology is a 
software development tool, which improves the response loop 
between users and software developers, while DevOps is a 
composition of cultures, practices, and instruments that divides 
silos into teams. While DevOps and agile, methodologies have 
similarities, they are not the same, but some people claim that 
DevOps is better as compared to agile methodology. It is 
necessary to get to the nuts and bolts to remove the ambiguity [7]. 
The contrast at a high level helps to understand the various fields 
on which both works. A. Differences 
The differences between agile and DevOps methodologies are as 
follows:  
a) Agile methodology is a project management strategy, 
whereas DevOps works on pipeline optimization. 
b) Agile concentrates on flexibility in necessities and the 
advancement of functions, whereas DevOps emphasizes 
on continuous integration and installation of software 
developed [8]. 
c) Agile is commonly aligned with systems like Scrum, 
DaD, LeSS and SAFe, but DevOps does not necessarily 
apply to specific frameworks. 
d) Agile emphasizes on operations and DevOps on 
operational efficiency and automation. 
What occurs after software development defines the 
distinction between the two. In both DevOps and Agile, the 
software is developed, tested, and deployed. But after these 
3 stages, pure agile appears to stop. DevOps, by contrast, 
includes constant operations [9].  The monitoring and 
development of software are therefore continuous. In agile, 
individual people build and test the software and deploy it. 
DevOps is all responsible for the role of engineering in 
DevOps; technology is business and software is business. 
DevOps is more linked to cost reduction and agile is more 
linked with lean and waste reduction, and terms such as agile 
accounts for projects and a minimum viable product (MVP) 
are important. Instead of predictive steps, Agile emphasizes 
and promotes empiricism (adaptation, openness, and 
inspection) [10]. When one is not focused on delivering value 
to the clients, a well-managed and automated production 
pipeline does no good [11]. The explanation as to why 
DevOps and Agile are confused is simple: many of the basic 
principles overlap. The word "continuous delivery" can also 
be correlated with the two: cooperation, pace, feedback loops. 
It is important to understand how and why they are distinct 
and, more specifically, how they can complement one 
another by gaining a clear [12]. 
Agile focuses solely on the development and deployment of 
software while DevOps tends to add IT to the mix. Both are 
methodologies that are important for software development [13]. 
The Agile methodology has been in existence for Over 20 years 
ago while DevOps was recently discovered. 
 
 
Electronic copy available at: https://ssrn.com/abstract=3655581