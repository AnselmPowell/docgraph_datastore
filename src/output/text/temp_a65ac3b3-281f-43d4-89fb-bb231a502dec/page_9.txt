TABLE IV
MULTIPLE REGRESSION MODEL FOR BRANCH USAGE (BRCNT) AND EIGHT
CONFOUNDING FACTORS ON 2,923 PROJECTS.
Variable
T Value
Signiﬁcance
(Intercept)
17.4
p<.001 ***
brCnt
8.8
p<.001 ***
log(forks count+0.5)
-9.2
p<.001 ***
log(watchers count+0.5)
-3.5
p<.001 ***
age
6.6
p<.001 ***
log(project size)
43.7
p<.001 ***
developer
9.4
p<.001 ***
PRs
4.8
p<.001 ***
log(PR comments)
4.7
p<.001 ***
log(issue comments)
8.3
p<.001 ***
Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
F-statistic = 542.9, p-value: <0.001. R2 = 0.625
The response variable is log(total commits).
containing 9,290 and 10,099 branches respectively.
For personal projects and organizational projects, we sep-
arately build two models in Tables IV and V to ﬁnd the R2
to further calculate the Cohens’ f 2. The F Statistics of four
models are all signiﬁcant (p-value<0.001). The detailed
results can be found in Table VI
From Table VI, we can ﬁnd that the Cohen’s f 2 values of
both models are larger than 0.02 (the minimum value for a
small effect) but are smaller than 0.15 (the minimum value
for a median effect). This means the number of branches
indeed has a small effect on the productivity of both personal
and organizational projects. However, despite organizational
projects tend to use more branches than personal projects
(which can be observed in RQ1), the number of branches does
not have a stronger effect on the productivity of organizational
projects than that of personal projects (with both Cohen’s f 2
values being almost equal, i.e., 0.0277 vs. 0.0265).
Finding 7. The number of branches has a small effect on the
ﬁnal productivity of projects created by personal users and
organizations, and there is no statistically signiﬁcantly differ-
ence between personal projects and organizational projects.
Implications. In this paper, we focus on how branch usage
affects a project’s commits productivity. We ﬁnd the branch
use has a small effect on a project’s overall productivity
measured by Cohen’s f 2. It would be interesting to investigate
how branch usage affects other OSS development activities
such as developer’s productivity (e.g., bug ﬁxing or feature
implementation) or software maintainability (e.g., conﬂicts
inducing by merging branches). By doing so, we are likely
to gain a more complete understanding of the functions of
branches.
V. THREATS TO VALIDITY
Generalization of Findings. In this paper, we try to gain
some insights into the branch usage in OSS communities
by conducting experiments on 2,923 GitHub projects. Since
there are also other OSS communities (such as SourceForge
and BitBucket), we cannot guarantee that our conclusions
on GitHub can be generalized to other OSS communities.
However, with the great popularity of GitHub for OSS de-
velopment and the large scale of our experiments, we think
TABLE V
MULTIPLE REGRESSION MODEL FOR CONFOUNDING FACTORS.
Variable
T Value
Signiﬁcance
(Intercept)
16.7
p<.001 ***
log(forks count+0.5)
-9.8
p<.001 ***
log(watchers count+0.5)
-3.5
p<.001 ***
age
6.5
p<.001 ***
log(project size)
45.9
p<.001 ***
developer
9.3
p<.001 ***
PRs
5.5
p<.001 ***
log(PR comments)
5.7
p<.001 ***
log(issue comments)
8.2
p<.001 ***
Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
F-statistic = 585.9, p-value: <0.001. R2 = 0.616
The response variable is log(total commits).
TABLE VI
ADJUSTED R-SQUARED (R2) OF REGRESSION MODELS BUILT ON
PROJECTS OWNED BY PERSONAL USERS AND ORGANIZATIONS.
owner
with brCnt
with no brCnt
F value
Conhen’s f2
users
0.5774
0.5657
p<0.001
0.0277
Org.
0.6268
0.6169
p<0.001
0.0265
the ﬁndings on GitHub can reveal some insights into the
practice of branching in OSS communities. In future, we plan
to perform our experiments on other OSS platforms to better
generalize our ﬁndings.
Private Projects. In this paper, we only consider projects that
are available in GitHub. This may make us miss some private
projects that are inaccessible to the public in GitHub. These
missing projects may bring some bias to our concluded ﬁnding
across the GitHub platform. However, considering the large
scale of our experiments, we believe our ﬁndings can still be
generalized to other projects.
Implicit Merged Commits. When examining commit ﬂows in
RQ4, we take commits only occurring in non-master branches
as commits that are not merged into the master branch. How-
ever, since developers may use rebase or cherry-pick
provided by Git to manipulate commits, some seemingly
unmerged commits may have been merged into the master
branch [26]. These implicit merged commits may indicate a
higher ﬂowing ratio of commits into the master branch than
we have observed in RQ4. Although we are unable to track
these commits, we think our ﬁndings of RQ4 can shed some
light into the trend of how commits ﬂow between branches.
Measurement of Project Productivity. We use the number
of commits as a project’s overall productivity, as has prior
work [51], [17]. In particular, we only take the commits
of master branch into account without considering other
branches. Since some useful work may stay in other branches
without being merged into the master branch, this might bring
some bias to our arrived conclusions. However, since it is hard
to identify whether all unmerged commits from other branches
are useful, and it is very likely that most useful commits would
go into the master branch, we think only using the commits
of master branch is also acceptable.
VI. RELATED WORK
Studies on Branching. There are some studies similar to
ours. Bird et al. showed that developers working on Windows
314
Authorized licensed use limited to: Nanjing University. Downloaded on May 20,2020 at 13:25:16 UTC from IEEE Xplore.  Restrictions apply.