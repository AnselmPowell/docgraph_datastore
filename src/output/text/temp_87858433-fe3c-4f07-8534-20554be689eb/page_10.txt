of the files if needed. Now you will always be able to recreate past results that were generated
with previous versions of the code (see the command git tag for a method to facilitate finding spe-
cific past versions) and see the exact changes you have made over the course of a project.
Share Your Code
Once you have your files saved in a Git repository, you can share it with your collaborators and
the wider scientific community by putting your code online (Fig 3). This also has the added bene-
fit of creating a backup of your scripts and provides a mechanism for transferring your files
across multiple computers. Sharing a repository is made easier if you use one of the many online
services that host Git repositories (Table 1), e.g., GitHub. Note, however, that any files that have
Fig 3. Working with both a local and remote repository as a single user. (A) On your computer, you
commit to a Git repository (commit d75es). (B) On GitHub, you create a new repository called thesis. This
repository is currently empty and not linked to the repo on your local machine. (C) The command
git remote add connects your local repository to your remote repository. The remote repository is still
empty, however, because you have not pushed any content to it. (D) You send all the local commits to the
remote repository using the command git push. Only files that have been committed will appear in the
remote repository. (E) You repeat several more rounds of updating scripts and committing on your local
computer (commit f658t and then commit xv871). You have not yet pushed these commits to the remote
repository, so only the previously pushed commit is in the remote repo (commit d75es). (F) To bring the
remote repository up to date with your local repository, you git push the two new commits to the remote
repository. The local and remote repositories now contain the same files and commit histories.
doi:10.1371/journal.pcbi.1004668.g003
PLOS Computational Biology | DOI:10.1371/journal.pcbi.1004668
January 19, 2016
10 / 18