yourself as you work from multiple computers. If you are working on a project with just one or
two other collaborators, you could extend this workflow so that they could edit the code in the
same way. You can do this by adding them as Collaborators on your repository (Settings ->
Collaborators -> Add collaborator; see https://help.github.com/articles/adding-collaborators-
to-a-personal-repository/). However, with projects with lots of contributors, GitHub provides
a workflow for finer-grained control of the code development.
Box 6. Journal Policies
Sharing data, code, and other materials is quickly moving from “desired” to “required.”
For example, PLOS’s sharing policy (http://journals.plos.org/plosone/s/materials-and-
software-sharing) already says, “We expect that all researchers submitting to PLOS will
make all relevant materials that may be reasonably requested by others available without
restrictions upon publication of the work.” Its policy on software is more specific:
We expect that all researchers submitting to PLOS submissions in which software is
the central part of the manuscript will make all relevant software available without
restrictions upon publication of the work. Authors must ensure that software remains
usable over time regardless of versions or upgrades. . .
It then goes on to specify that software must be based on open source standards, and
that it must be put in an archive which is large or long-lived. Granting agencies, philan-
thropic foundations, and other major sponsors of scientific research are all moving in the
same direction, and, to our knowledge, none has relaxed or reduced sharing require-
ments in the last decade.
Box 7. Branching
Do you ever make changes to your code, but are not sure you will want to keep those
changes for your final analysis? Or do you need to implement new features while still
providing a stable version of the code for others to use? Using Git, you can maintain par-
allel versions of your code that you can easily bounce between while you are working on
your changes. You can think of it like making a copy of the folder you keep your scripts
in, so that you have your original scripts intact but also have the new folder where you
make changes. Using Git, this is called branching, and it is better than separate folders
because (1) it uses a fraction of the space on your computer, (2) it keeps a record of when
you made the parallel copy (branch) and what you have done on the branch, and (3)
there is a way to incorporate those changes back into your main code if you decide to
keep your changes (and a way to deal with conflicts). By default, your repository will
start with one branch, usually called “master.” To create a new branch in your repository,
type git branch new_branch_name. You can see what branches a current reposi-
tory has by typing git branch, with the branch you are currently in being marked by a
star. To move between branches, type git checkout branch_to_move_to. You
can edit files and commit them on each branch separately. If you want to combine the
changes in your new branch with the master branch, you can merge the branches by typ-
ing git merge new_branch_name while in the master branch.
PLOS Computational Biology | DOI:10.1371/journal.pcbi.1004668
January 19, 2016
14 / 18