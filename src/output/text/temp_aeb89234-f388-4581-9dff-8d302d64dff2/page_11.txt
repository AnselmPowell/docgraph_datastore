not been tracked with at least one commit are not included in the Git repository, even if they are
located within the same directory on your local computer (see Box 2 for advice on the types of
files that should not be versioned with Git and Box 3 for advice on managing large files).
Below, we focus on the technical aspects of sharing your code. However, there are also other
issues to consider when deciding if and how you are going to make your code available to oth-
ers. For quick advice on these subjects, see Box 4 on how to license your code, Box 5 on con-
cerns about being scooped, and Box 6 on the increasing trend of journals to institute sharing
policies that require authors to deposit code in a public archive upon publication.
To begin using GitHub, you will first need to sign up for an account. For the code examples
in this tutorial, you will need to replace username with the username of your account. Next,
choose the option to “Create a new repository” (Fig 3B, see https://help.github.com/articles/
create-a-repo/). Call it “thesis,” because that is the directory name containing the files on your
computer, but note that you can give it a different name on GitHub if you wish. Also, now that
the code will exist in multiple places, you need to learn some more terminology (Box 1). A
local repository refers to code that is stored on the machine you are using, e.g., your laptop;
whereas a remote repository refers to the code that is hosted online. Thus, you have just created
a remote repository.
Now you need to send the code on your computer to GitHub. The key to this is the URL
that GitHub assigns your newly created remote repository. It will have the form https://github.
com/username/thesis.git (see https://help.github.com/articles/cloning-a-repository/). Notice
that this URL is using the HTTPS protocol, which is the quickest to begin using. However, it
requires you to enter your username and password when communicating with GitHub, so
you’ll want to consider switching to the SSH protocol once you are regularly using Git and
Box 2. What Not to Version Control
You can version control any file that you put in a Git repository, whether it is text-based,
an image, or a giant data file. However, just because you can version control something,
does not mean you should. Git works best for plain, text-based documents such as your
scripts or your manuscript if written in LaTeX or Markdown. This is because for text
files, Git saves the entire file only the first time you commit it and then saves just your
changes with each commit. This takes up very little space, and Git has the capability to
compare between versions (using git diff). You can commit a non-text file, but a full
copy of the file will be saved in each commit that modifies it. Over time, you may find
the size of your repository growing very quickly. A good rule of thumb is to version con-
trol anything text-based: your scripts or manuscripts if they are written in plain text.
Things not to version control are large data files that never change, binary files (including
Word and Excel documents), and the output of your code.
In addition to the type of file, you need to consider the content of the file. If you plan
on sharing your commits publicly using GitHub, ensure you are not committing any files
that contain sensitive information, such as human subject data or passwords.
To prevent accidentally committing files you do not wish to track, and to remove
them from the output of git status, you can create a file called .gitignore. In
this file, you can list subdirectories and/or file patterns that Git should ignore. For exam-
ple, if your code produced log files with the file extension .log, you could instruct Git
to ignore these files by adding .log to .gitignore. In order for these settings to be
applied to all instances of the repository, e.g., if you clone it onto another computer, you
need to add and commit this file.
PLOS Computational Biology | DOI:10.1371/journal.pcbi.1004668
January 19, 2016
11 / 18