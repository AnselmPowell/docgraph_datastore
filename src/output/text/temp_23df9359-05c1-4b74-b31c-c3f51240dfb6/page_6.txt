(use "git rm --cached <file>. . ." to unstage)
new file: process.sh
Untracked files:
(use "git add <file>. . ." to include in what will be committed)
analyze.R
clean.py
Since this is the first time that you have told Git about the file process.sh, two key things
have happened. First, this file is now being tracked, which means Git recognizes it as a file you
wish to be version controlled (Box 1). Second, the changes made to the file (in this case the
entire file, because it is the first commit) have been added to the staging area (Fig 1). Adding a
file to the staging area will result in the changes to that file being included in the next commit,
or snapshot, of the code (Box 1). As an analogy, adding files to the staging area is like putting
things in a box to mail off, and committing is like putting the box in the mail.
Since this will be the first commit, or first version, of the code, use git add to begin tracking
the other two files and add their changes to the staging area as well. Then create the first com-
mit using the command git commit.
$ git add clean.py analyze.R
$ git commit -m "Add initial version of thesis code."
[master (root-commit) 660213b] Add initial version of thesis code.
3 files changed, 154 insertions(+)
create mode 100644 analyze.R
create mode 100644 clean.py
create mode 100644 process.sh
Notice the flag -m was used to pass a message for the commit. This message describes the
changes that have been made to the code and is required. If you do not pass a message at the
command line, the default text editor for your system will open so you can enter the message.
You have just performed the typical development cycle with Git: make some changes, add
updated files to the staging area, and commit the changes as a snapshot once you are satisfied
with them (Fig 2).
Since Git records all of the commits, you can always look through the complete history of a
project. To view the record of your commits, use the command git log. For each commit, it
lists the unique identifier for that revision, author, date, and commit message.
$ git log
PLOS Computational Biology | DOI:10.1371/journal.pcbi.1004668
January 19, 2016
6 / 18