repository (or repo, for short) refers to the current version of the tracked files as well as all the
previously saved versions (Box 1). Only files that are located within this directory (and any sub-
directories) have the potential to be version controlled, i.e., Git ignores all files outside of the ini-
tialized directory. For this reason, projects under version control tend to be stored within a single
directory to correspond with a single Git repository. For strategies on how to best organize your
own projects, see Noble, 2009 [5].
$ cd ~/thesis
$ ls
analyze.R clean.py process.sh
$ git init
Initialized empty Git repository in ~/thesis/.git/
Now you are ready to start versioning your code (Fig 1). Conceptually, Git saves snapshots
of the changes you make to your files whenever you instruct it to. For instance, after you edit a
script in your text editor, you save the updated script to your thesis folder. If you tell Git to save
a shapshot of the updated document, then you will have a permanent record of the file in that
exact version even if you make subsequent edits to the file. In the Git framework, any changes
you have made to a script but have not yet recorded as a snapshot with Git reside in the work-
ing directory only (Fig 1). To follow what Git is doing as you record the initial version of your
files, use the informative command git status.
Fig 1. The git add/commit process. To store a snapshot of changes in your repository, first git add any files to the staging area you wish to commit (for
example, youâ€™ve updated the process.sh file). Second, type git commit with a message. Only files added to the staging area will be committed. All past
commits are located in the hidden .git directory in your repository.
doi:10.1371/journal.pcbi.1004668.g001
PLOS Computational Biology | DOI:10.1371/journal.pcbi.1004668
January 19, 2016
3 / 18