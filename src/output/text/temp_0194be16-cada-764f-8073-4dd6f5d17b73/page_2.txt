RQ2: Do ATH testing activities adheres to ISO/IEC/IEEE
29119 testing standard?
RQ3: What are the key challenges associated with testing
in OI?
As a point of reference for general test processes, we used the
ISO/IEC/IEEE 29119 testing standard to compare the ATH
testing process with (RQ2). This lead to identifying the key
contributors (RQ1) in ATH, followed by interviews with the
developers of ATH to ﬁnd out the possible hurdles (RQ3)
in the process. To be more speciﬁc, RQ1 is formulated to
investigate the homogeneity of the community, to see whether
or not the top contributors of ATH are the same as for the
core of Jenkins. RQ1 is answered by mining the change log
data from the online ATH GitHub repository. It is to be
noted that the change log mining is also used to identify
the key contributors of ATH for interviews. RQ2 aims at
exploring the adherence of ATH to ISO/IEC/IEEE 29119
testing standard. In order to analyze the OI test process, the
ISO/IEC/IEEE standard is a reference model for traditional
testing. Abdou et al. [3] used ISO/IEC/IEEE standard
to compare it with the OSS testing process. However, we
followed ISO/IEC/IEEE standard to compare it with the
OI testing process. There are number of standards available
for testing processes, such as ISO/IEC TR 19759, BS 7925-2
and ISO/IEC WD 29119-2 [1, 4, 12, 3], while we used the
latter since is is quite recent and internationally accepted
as as standard.
ISO/IEC/IEEE 29119 supports various
software development life cycles including spiral, waterfall
and agile models. Unlike all previously mentioned models, it
covers non functional testing, risk based testing and static
testing. The change log data extracted to answer RQ1 helped
us identifying the key interviewees in order to explore the
challenges associated with ATH. RQ3 is used to explore the
key challenges associated with OI in SE. RQ2 and RQ3 are
answered using interviews with the key contributors from
the Jenkins community.
2.2
Case Selection and Unit of Analysis
Jenkins is the leading open source continuous integration
server [2]. It oﬀers more than 1000 plugins to support build-
ing and testing virtually any project built in Java. These
tests can be also run with speciﬁc version of the Jenkins core
and a combination of plugins. Over the passage of time, the
number of test cases for Jenkins has steadily increased to over
300. In order to test Jenkins with automated tests, one of
the key contributors (referring to an anonymous company’s
employee) initiated the ATH together with the community.
ATH consists of a reusable harness that can be used by
plugin developers and users to write functional test cases.
These test cases can be run against Jenkins plugins that are
deployed in diﬀerent conﬁgurations. The focus of this case
study is to explore OI activities in ATH from the companies’
perspective rather than community’s perspective.
3.
RESULTS AND ANALYSIS
This section presents the ﬁndings from the change log
data analysis and the semi-structured interviews with the
contributors of ATH.
3.1
Stakeholders in ATH
The associations of key contributors were identiﬁed using
their email addresses followed by checking their public proﬁles
Figure 1: Key contributors to the Acceptance Test
Harness.
on GitHub. As can be seen in Fig. 1, Cloudbees and Redhat
are the biggest contributors to the development of ATH.
Surprisingly, the third biggest contributor turned out to
be Munich University which is an indication of strong ties
between the Jenkins community and academia [5].
It is
to be noted that the biggest contributor in Jenkins is not
among the top for ATH. However, we chose to interview key
contributors to Jenkins, since they initiated the idea of ATH
and convinced the community to start testing Jenkins in an
automated fashion.
Interview data suggests that the testing process of Jenkins
is the least attended process since the community was using
an old manual approach for the testing of Jenkins. Openness
lead them to consider switching from the manual to an auto-
mated testing process. Initially, the idea of testing Jenkins
in an automated fashion came from the community. An
interviewee 3 stated, “. . . the idea of acceptance test harness
came from the community but [our company] was the biggest
contributor to actually getting traction on it”.
Selenium is a test harness that tests Jenkins from outside,
using automated tests. Originally it was written in Ruby,
while Jenkins generally have unit test cases written in HTML
that only test a particular plug-in in a unit test manner.
In 2011, this became a signiﬁcant problem for two reasons.
Firstly, the HTML solution did not scale up to a large number
of plug-ins, and secondly, the community primarily used Java,
and thus the Ruby implementation became a bottleneck
regarding competence.
Therefore, the main contributor took on the scaleability
issue and together with the Jenkins community decided to
rework the test harness into Java. The ATH is comprised
of a reusable harness that can be used by users and plug-in
developers to write functional test cases. An interviewee
3 stated that, “. . . from [the company’s] perspective, we can
contribute our internal acceptance test cases to the community
and have the community actually to execute those tests when
its time to test a new stable version and upgrading. Similarly,
it helps other companies and the community to do the same.
Therefore, it’s a tool that helps everyone”.
The programming language (Ruby) and scaleability issues
of the Selenium(HTML) test harness came up as a bottle-
neck to adopt it for the Jenkins testing, since the Jenkins
community works with Java. Therefore, the ATH is created
to port selenium test cases into Java unit test cases in order
to test the Jenkins through automated acceptance test cases.
188