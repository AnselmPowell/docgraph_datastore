You first specify the remote repository, “origin.” Second, you tell Git to push to the “master”
copy of the repository—we will not go into other options in this tutorial, but Box 7 discusses
them briefly.
Pushing to GitHub also has the added benefit of backing up your code in case anything
were to happen to your computer. Also, it can be used to manually transfer your code across
multiple machines, similar to a service like Dropbox (www.dropbox.com) but with the added
capabilities and control of Git. For example, what if you wanted to work on your code on your
computer at home? You can download the Git repository using the command git clone.
$ git clone https://github.com/username/thesis.git
By default, this will download the Git repository into a local directory named “thesis.” Fur-
thermore, the remote “origin” will automatically be added so that you can easily push your
changes back to GitHub. You now have copies of your repository on your work computer,
your GitHub account online, and your home computer. You can make changes, commit them
on your home computer, and send those commits to the remote repository with git push,
just as you did on your work computer.
Then the next day back at your work computer, you could update the code with the changes
you made the previous evening using the command git pull.
$ git pull origin master
This pulls in all the commits that you had previously pushed to the GitHub remote reposi-
tory from your home computer. In this workflow, you are essentially collaborating with
Box 4. Choosing a License
Putting software and other material in a public place is not the same as making it publicly
usable. In order to do that, the authors must also add a license, since copyright laws in
some jurisdictions require people to treat anything that isn’t explicitly open as being
proprietary.
While dozens of open licenses have been created, the two most widely used are the
GNU Public License (GPL) and the MIT/BSD family of licenses. Of these, the MIT/BSD-
style licenses put the fewest requirements on re-use, and thereby make it easier for people
to integrate your software into their projects.
For an excellent short discussion of these issues, and links to more information, see
Jake Vanderplas’s blog post from March 2014 at http://www.astrobetter.com/blog/2014/
03/10/the-whys-and-hows-of-licensing-scientific-code/. For a more in-depth discussion
of the legal implications of different licenses, see Morin et al., 2012 [6].
Box 5. Being Scooped
One concern scientists frequently have about putting work in progress online is that they
will be scooped, e.g., that someone will analyze their data and publish a result that they
themselves would have, but hadn’t yet. In practice, though, this happens rarely, if at all:
in fact, the authors are not aware of a single case in which this has actually happened,
and would welcome pointers to specific instances. In practice, it seems more likely that
making work public early in something like a version control repository, which automat-
ically adds timestamps to content, will help researchers establish their priority.
PLOS Computational Biology | DOI:10.1371/journal.pcbi.1004668
January 19, 2016
13 / 18