development with a VCS and hosting it online, you are performing science that is more trans-
parent, reproducible, and open to collaboration [1,2]. There is no reason this framework needs
to be limited only to code; a VCS is well-suited for tracking any plain-text files: manuscripts,
electronic lab notebooks, protocols, etc.
Version Your Code
The first step is to learn how to version your own code. In this tutorial, we will run Git from the
command line of the Unix shell. Thus, we expect readers are already comfortable with navigating
a filesystem and running basic commands in such an environment. You can find directions for
installing Git for the operating system running on your computer by following one of the links
provided in Table 1. There are many graphical user interfaces (GUIs) available for running Git
(Table 1), which we encourage you to explore, but learning to use Git on the command line is
necessary for performing more advanced operations and using Git on a remote machine.
To follow along, first create a folder in your home directory named thesis. Next, down-
load the three files provided in Supporting Information and place them in the thesis direc-
tory. Imagine that, as part of your thesis, you are studying the transcription factor CTCF, and
you want to identify high-confidence binding sites in kidney epithelial cells. To do this, you
will utilize publicly available ChIP-seq data produced by the ENCODE consortium [3]. ChIP-
seq is a method for finding the sites in the genome where a transcription factor is bound, and
these sites are referred to as peaks [4]. process.sh downloads the ENCODE CTCF ChIP-
seq data from multiple types of kidney samples and calls peaks (S1 Data); clean.py filters
peaks with a fold change cutoff and merges peaks from the different kidney samples (S2 Data);
and analyze.R creates diagnostic plots on the length of the peaks and their distribution
across the genome (S3 Data).
If you have just installed Git, the first thing you need to do is provide some information
about yourself, since it records who makes each change to the file(s). Set your name and email
by running the following lines, but replacing “First Last” and “user@domain” with your full
name and email address, respectively.
$ git config --global user.name "First Last"
$ git config --global user.email "user@domain"
To start versioning your code with Git, navigate to your newly created directory, ~/thesis.
Run the command git init to initialize the current folder as a Git repository (Figs 1 and 2A). A
Table 1. Resources.
Resource
Options
Distributed VCS
Git (https://git-scm.com)
Mercurial (https://mercurial.selenic.com)
Bazaar (http://bazaar.canonical.com)
Online hosting site
GitHub (https://github.com)
Bitbucket (https://bitbucket.org)
GitLab (https://about.gitlab.com)
Source Forge (http://sourceforge.net)
Git installation
https://git-scm.com/downloads
Git tutorials
Software Carpentry (https://swcarpentry.github.io/git-novice)
Pro Git (https://git-scm.com/book)
A Visual Git Reference (https://marklodato.github.io/visual-git-guide)
tryGit (https://try.github.io)
Graphical User Interface for Git
https://git-scm.com/downloads/guis
doi:10.1371/journal.pcbi.1004668.t001
PLOS Computational Biology | DOI:10.1371/journal.pcbi.1004668
January 19, 2016
2 / 18