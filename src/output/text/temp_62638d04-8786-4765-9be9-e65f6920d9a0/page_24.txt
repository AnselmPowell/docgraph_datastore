conclude some languages are more related to the usage of CI/CD than others.
In particular, more recent languages, such as TypeScript, Go, or Rust have a
higher percentage of projects with CI/CD than languages such as C, Java, or
C#. This may indicate a technological-generational gap between languages and
CI/CD technologies, which should further be studied aiming to improve the
adoption of CI/CD by older languages.
Another interesting aspect is the fact that top-used languages such as R
[IEEE(2023)] do not have projects that include CI/CD in a significant amount.
This may indicate this kind of technology is not of easy adoption by less tech-
nically skilled users, as R is often used by researchers and mathematicians.
A surprising aspect we discovered during our work related to RQ2 is that
many projects use more than one technology for CI/CD. In fact, up to 13
technologies may be used at the same time.
In the last 4 years, each year,
more than 23,000 projects include more than one technology, which accounts
for about 20% of all projects. From this, is possible to answer RQ2 negatively,
that is, one technology is often not sufficient to cope with all the requirements
of some projects. This raises several future work directions. A first path is
to endeavor a deeper investigation is required to understand exactly why this
happens.
Moreover, it is necessary to investigate the interoperability of the
technologies, how they work together, and how to provide the proper support for
these users, as existing technologies tend to have tools (e.g., editors, interpreters)
designed to be used independently of others.
In the analysis for RQ3, we can see about a third of the repositories have
CI/CD, a number that is relatively stable over the years. However, we have
shown the time between the creation of the repository and the adoption of
CI/CD has been decreasing substantially. Regarding the usage over the years,
with RQ3 we discovered developers tend to change quite often CI/CD technolo-
gies. Indeed, there has been a massive change from Travis to GHA, but changes
in technology are quite common. Indeed, in the last two years, more than 7%
of all snapshots include some kind of change in the CI/CD technological stack.
If we consider long-run projects (projects running from 2012 up until now),
this number is even greater. This means developers need support to be suc-
cessful in these endeavors, which currently is mostly non-existent. This opens
quite promising research paths, including techniques to support the evolution of
this kind of artifacts (e.g., model-driven approaches, languages-based), but also
for the human-computer interaction community on how to aid these developers
being more effective and efficient.
8
Threats to validity
There are multiple threats to the validity of our study, which we address in the
following paragraphs.
Our study focuses on open-source software and, in particular, on projects
hosted on GitHub. Thus, our sampling does not include other kinds of software
(e.g., propriety). Thus, we cannot generalize our conclusions to these other kinds
24