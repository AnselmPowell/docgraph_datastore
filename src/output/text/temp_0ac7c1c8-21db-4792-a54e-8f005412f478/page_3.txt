Git has a complex set of commands and can be used for rather complex operations, learning to
apply the basics requires only a handful of new concepts and commands and will provide a
solid ground to efficiently track code and related content for research projects. Many introduc-
tory and detailed tutorials are available (see Table 2 below for a few examples). In particular,
we recommend A Quick Introduction to Version Control with Git and GitHub by Blischak et al.
[5].
In a nutshell, initializing a (local) repository (often abbreviated as repo) marks a directory as
one to be tracked (Fig 1). All or parts of its content can be added explicitly to the list of files to
track.
cd project ## move into directory to be tracked
git init ## initialize local repository
## add individual files such as project description, reports,
source code
git add README project.md code.R
git commit -m "initial commit" ## saves the current local snapshot
Subsequently, every change to the tracked files, once committed, will be recorded as a new
revision, or snapshot, uniquely identifying the changes in all the modified files. Git is remark-
ably effective and efficient in archiving the complete history of a project by, among other
things, storing only the differences between files.
In addition to local copies of the repository, it is straightforward to create remote reposito-
ries on GitHub (called origin, with default branch master—see below) using the web interface,
and then synchronize local and remote repositories.
git push origin master ## push local changes to the remote
repository
git pull origin master ## pull remote changes into the local
repository
Following Tony Rossini’s advice in 2005 to “commit early, commit often, and commit in a
repository from which we can easily roll-back your mistakes,” one can organize one’s work in
small incremental changes. At any time, it is possible to go back to a previous version. In larger
projects, multiple users are able to work on the same remote repository, with all contributions
being recorded, restorable, and attributed to the author.
Users usually track source code, text files, images, and small data files inside their reposito-
ries and generally do not track derived files such as build logs or compiled binaries (read Box 2
to see how to handle large binary files in GitHub). And, although the majority of GitHub repos-
itories are used for software development, users can also keep text documents such as analysis
Table 2. Online courses, tutorials, and workshops about GitHub and Git for scientists.
Name of the Material
URL
Git help and Git help -a
Document, installed with Git
Karl Broman’s Git/Github Guide
http://kbroman.org/github_tutorial/
Version Control with GitVersion Control
with Git
http://swcarpentry.github.io/git-novice/
Introduction to Git
http://git-scm.com/book/ch1-3.html
Github Training
https://training.github.com/
Github Guides
https://guides.github.com/
Good Resources for Learning Git and
GitHub
https://help.github.com/articles/good-resources-for-learning-git-
and-github/
Software Carpentry: Version Control with
Git
http://swcarpentry.github.io/git-novice/
doi:10.1371/journal.pcbi.1004947.t002
PLOS Computational Biology | DOI:10.1371/journal.pcbi.1004947
July 14, 2016
3 / 11