such as, for example, the popular RStudio editor for the R programming language [8], directly
integrate with code versioning using Git and GitHub. In addition, for remote Git repositories,
GitHub provides its own features that will be described in subsequent rules (Fig 1).
Rule 2: GitHub for Single Users, Teams, and Organizations
Public projects on GitHub are visible to everyone, but write permission, i.e., the ability to
directly modify the content of a repository, needs to be granted explicitly. As a repository
owner, you can grant this right to other GitHub users. In addition to being owned by users,
repositories can also be created and managed as part of teams and organizations.
Project managers can structure projects to manage permissions at different levels: users,
teams, and organizations. Users are the central element of GitHub as in any other social network.
Every user has a profile listing their GitHub projects and activities, which can optionally be popu-
lated with personal information including name, email address, image, and webpage. To stay up
to date with the activity of other users, one can follow their accounts (see also Rule 10). Collabo-
ration can be achieved by simply adding a trusted Collaborator, thereby granting write access.
However, development in large projects is usually done by teams of people within a larger
organization. GitHub organizations are a great way to manage team-based access permissions
for the individual projects of institutes, research labs, and large open-source projects that need
multiple owners and administrators (Fig 1). We recommend that you, as an individual
researcher, make your profile visible to other users and display all of the projects and organiza-
tions you are working in.
Rule 3: Developing and Collaborating on New Features: Branching
and Forking
Anyone with a GitHub account can fork any repository they have access to. This will create a
complete copy of the content of the repository, while retaining a link to the original “upstream”
version. One can then start working on the same code base in one’s own fork (https://help.
github.com/articles/fork-a-repo/) under their username (see, for example, https://github.com/
ypriverol/github-paper/network/members for this work) or organization (see Rule 2). Forking
a repository allows users to freely experiment with changes without affecting the original
Box 2
Using GitHub or any similar versioning/tracking system is not a replacement for good
project management; it is an extension, an improvement for good project and file manag-
ing (see for example [9]). One practical consideration when using GitHub, for example,
is dealing with large binary files. Binary files such as images, videos, executable files, or
many raw data used in bioinformatics, are stored as a single large entity in Git. As a
result, every change, even if minimal, leads to a complete new copy of the file in the
repository, producing large size increments and the inability to search (see https://help.
github.com/articles/searching-code/) and compare file content across revisions. Git
offers a Large File Storage (LFS) module that replaces such large files with pointers while
the large binary file can be stored remotely, which results in smaller and faster reposito-
ries. Git LFS is also supported by GitHub, albeit with a space quota or for a fee, to retain
your usual GitHub workflow (https://help.github.com/categories/managing-large-files/)
(S1 File, Section 1).
PLOS Computational Biology | DOI:10.1371/journal.pcbi.1004947
July 14, 2016
5 / 11