systematically run a series of tests to check integrity and performance of code, a task that can
be automated through GitHub.
GitHub offers a set of hooks (automatically executed scripts) that are run after each push to
a repository, making it easier to follow the basic principles of continuous integration. The
GitHub web hooks allow third-party platforms to access and interact with a GitHub repository
and thus to automate post-processing tasks. Continuous integration can be achieved by Travis
CI, a hosted continued integration platform that is free for all open-source projects. Travis CI
builds and tests the source code using a plethora of options such as different platforms and
interpreter versions (S1 File, Section 2). In addition, it offers notifications that allow your team
and contributors to know if the new changes work and to prevent the introduction of errors in
the code (for instance, when merging pull requests), making the repository always ready to use.
Rule 6: Let GitHub Do More Tasks for You: Automate
More than just code compilation and testing can be integrated into your software project:
GitHub hooks can be used to automate numerous tasks to help improve the overall quality of
your project. An important complement to successful test completion is to demonstrate that
the tests sufficiently cover the existing code base. For this, the integration of Codecov is recom-
mended. This service will report how much of the code base and which lines of code are being
executed as part of your code tests. The Bioconductor project, for example, highly recommends
that packages implement unit testing (S1 File, Section 2) to support developers in their package
development and maintenance (http://bioconductor.org/developers/unitTesting-guidelines/)
and systematically tests the coverage of all of its packages (https://codecov.io/github/
Bioconductor-mirror/). One might also consider generating the documentation upon code/
documentation modification (S1 File, Section 3). This implies that your projects provide com-
prehensive documentation so others can understand and contribute back to them. For Python
or C/C++ code, automatic documentation generation can be done using sphinx and subse-
quently integrated into GitHub using “Read the Docs.” All of these platforms will create reports
and badges (sometimes called shields) that can be included on your GitHub project page, help-
ing to demonstrate that the content is of high quality and well-maintained.
Rule 7: Use GitHub to Openly and Collaboratively Discuss,
Address, and Close Issues
GitHub issues are a great way to keep track of bugs, tasks, feature requests, and enhancements.
While classical issue trackers are primarily intended to be used as bug trackers, in contrast,
GitHub issue trackers follow a different philosophy: each tracker has its own section in every
repository and can be used to trace bugs, new ideas, and enhancements by using a powerful
tagging system. The main objective of issues in GitHub is promoting collaboration and provid-
ing context by using cross-references.
Raising an issue does not require lengthy forms to be completed. It only requires a title and,
preferably, at least a short description. Issues have very clear formatting and provide space for
optional comments, which allow anyone with a Github account to provide feedback. For exam-
ple, if the developer needs more information to be able to reproduce a bug, he or she can simply
request it in a comment.
Additional elements of issues are (i) color-coded labels that help to categorize and filter
issues, (ii) milestones, and (iii) one assignee responsible for working on the issue. They help
developers to filter and prioritize tasks and turn an issue tracker into a planning tool for their
project.
PLOS Computational Biology | DOI:10.1371/journal.pcbi.1004947
July 14, 2016
7 / 11