{
  "metadata": {
    "filename": "temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d",
    "extraction_date": "2025-01-25T13:24:58.870764",
    "path": "research_assistant\\data\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d.pdf"
  },
  "pages": {
    "1": "Journal of Management and Service Science, 2021,  \n \nVol. 01, Iss. 02, S. No. 005, pp. 1-17 \n \nISSN (Online): 2583-1798   \n \n  \n \nISSN (Online) : 2583-1798 \n1 \nJournal of Management and Service Science \n(JMSS) \nA2Z Journals \n \n \nManagement of Django Web Development \nin Python \nAshish Chandiramani1, Pawan Singh2 \nDepartment of Computer Science and Engineering, Amity University Uttar Pradesh, Lucknow Campus, India1, 2 \nashishchandiramani24@gmail.com1, pawansingh51279@gmail.com2 \n \nHow to cite this paper: A. Chandiramani and\nP. Singh (2021) Management of Django Web\nDevelopment in Python. Journal of Manage-\nment and Service Science, 1(2), 5, pp. 1-17. \nhttps://doi.org/10.54060/JMSS/001.02.005 \nReceived: 28/02/2021 \nAccepted: 12/03/2021 \nPublished: 25/07/2021 \nCopyright Â© 2021 The Author(s).  \nThis work is licensed under the Creative\nCommons Attribution International License\n(CC BY 4.0). \nhttp://creativecommons.org/licenses/by/4.0\n/ \n \n \n, Abstract \nApplication Development is not only limited to the business or promotional field, but it \nalso helps to provide the necessary services to the common people across the world by \ncreating an interaction between the companies and the customers through the web-\nsite. It also creates a platform for the common people who have the ability to attract \nthe audience using their talent. We can take the example of various blog writers, online \ncouncilors and fashion influencers who have a large audience because of their quality \ncontent and knowledge in their field. We have generally seen how the electronic com-\npanies have marked their presence on the online platform via the website which ena-\nbles the users to contact the company easily. Online retail companies interact with the \nusers via website and provide the orders at the doorsteps of the people. There are var-\nious news agencies which had created their website which keeps the users updated \nwith the latest national and international articles. The website development has helped \nto create a link between the people and the companies, but behind all these facilities \nthere is a powerful language and commands that holds these computational activities \nand data transfers which helps to create a good interaction between the users and the \nwebsite owners. Web developers are classified into Front-end and Back-end web devel-\nopers, Front-end developers help to create an interactive interface that can be easily \naccessed by the users, whereas Back-end development deals with the main work that \nis done behind the screens. We can say that it helps to power the website by managing \ndata transfer and other computational activities. In this project, the importance of \nDjango and back-end web development is explained. Using the tools and commands of \nthese languages we can make an interactive and user-friendly interface that can be \neasily accessed by people. Back-end was earlier known for limited purposes but now \nwhen it is explored thoroughly proved to be one of the best languages for website de-\nvelopment, gaming, Artificial Intelligence, and highly advanced mobile applications. \nKeywords \nWeb Development, Django, Python, Backend \nOpen Access",
    "2": "A. Chandiramani et al.  \n \n \nISSN (Online) : 2583-1798 \n2 \nJournal of Management and Service Science \n(JMSS) \nA2Z Journals \n \n1. Introduction  \nThe basics of web development using Django to build blog applications that have the (CRUD) Create, Read, Update, Delete \nfunctionality. Django is a widely used free, open-source, and high-level web development framework.[5] It provides a lot of \nfeatures to the developers \"out of the box,\" so development can be rapid. However, websites built from it are secured, scalable, \nand maintainable at the same time. \n2. Objective \nThe goal of this project is to build a blog application and a Web App (Weather app) which are updated through an administra-\ntion panel. \n  \n3. Virtual Environment \nVirtual Environment act as dependencies to Python-related project. It works as a self-contained container or an isolated envi-\nronment where all Python-related package [5] and the required versions related to specific project are installed. Since new \nversions of Python, Django, or packages, etc. will roll out,[4] through the help of a Virtual Environment, you can work with \nolder versions that are specific to any project. \n \nSteps to create a Virtual Environment: \n1.To create the new directory named 'project-blog' by using 'mkdir' command in your Desktop. \n2.Change the directory to 'project-blog' by using 'cd' command. \n \n \n \n3.The virtual environment is created by using 'python -m venv env', where env is our virtual environment shown by 'ls' com-\nmand. \n \n \n4.For Activating your Virtual Environment: The Virtual Environment can be activated by using the 'source' command where the \n'Scripts' folder needs to be enabled or activated.",
    "3": "A. Chandiramani et al. \n \n \nISSN (Online) : 2583-1798 \n3 \nJournal of Management and Service Science \n(JMSS) \nA2Z Journals \n \n \n \nThe 'env' will be shown in the parenthesis when successfully activated the Virtual Environment. \n \n5.Installing the required package: We can use 'pip install django' to install Django in your specific Virtual Environment. \n \n \n \n \n4. Creating a Django Project \n1.The first step is creating project by using the 'django-admin startproject project_name' command, where 'project_name' is \n'django_blog' in our case \n \n \n2.Change the directory to the newly created project using 'cd' command and to view the created file using 'ls' command.",
    "4": "A. Chandiramani et al.  \n \n \nISSN (Online) : 2583-1798 \n4 \nJournal of Management and Service Science \n(JMSS) \nA2Z Journals \n \n3.we can run our project by using 'python manage.py runserver'. \n \n4.The project can be viewed in our favorite browser (Google Chrome, Mozilla Firefox, etc.). We can come into our browser and \ntype 'localhost:8000' or '127.0.0.1:8000' in the URL, as shown below in figure 1. \n \n \nFigure 1. Django local host installation screen \n \n4.1. Starting the new Project \nFor creating a new Django project, it is a 2-step process, which can be seen below. \n \n1.To create an app by using 'python manage.py startapp app_name' command, where app_name is 'blog' in our case. In Django, \nthere are many apps to the single project where each app serves as single and specific functionality to the project.",
    "5": "A. Chandiramani et al. \n \n \nISSN (Online) : 2583-1798 \n5 \nJournal of Management and Service Science \n(JMSS) \nA2Z Journals \n \n \n \n2.To make our project let know about our newly created app by making changes to the 'django_blog/settings.py' \nINSTALLED_APP section. \n \n \n \n4.2. Changing in our Models \nDjango uses 'SQLite' as a default database, which is light can only be used for small projects, that is fine for this project. 'Object \nRelational Mapper (ORM)' is used which makes it uncomplicated to work with the database. The true database code is not \nwritten, since the database tables are created through the help of 'class' keyword in 'models.py'. \n \n Inside 'blog/models.py', we are creating a new model named 'Post'. This is a class will become a database table after that \nwhich currently inherits from models. As in a standard blog, a certain 'Post' contains a title, which will be a field called Char \nField. It is a text-based column and accepts mandatory argument as 'max_length', which happens to be 50 in our case. Also, \nthere is another field named 'content', which is the Text Field, which contains the detail text of the 'Post' as in a standard blog. \nThe double underscore('str') method is defined, which overrides the field 'title' and returns the name of actual 'title' instead \nof some objects.",
    "6": "A. Chandiramani et al.  \n \n \nISSN (Online) : 2583-1798 \n6 \nJournal of Management and Service Science \n(JMSS) \nA2Z Journals \n \n \n4.3. Making Migrations \n'python manage.py make migrations' is a first step process which reads the 'models.py' after its creation. \n \n \n \nMigrating to the database: This is the 2nd step where 'python manage.py migrate' read the newly created folder 'migrations' \nthus creating the database. \n \n \n \nRegistering to the admin: Let's go to 'blog/admin.py' and do a import of a models called 'Post' by make use of 'from models \nimport Post'. For registering models to the admin, command as follows 'admin.site.register(Post)'.",
    "7": "A. Chandiramani et al. \n \n \nISSN (Online) : 2583-1798 \n7 \nJournal of Management and Service Science \n(JMSS) \nA2Z Journals \n \n \n \nCreating SuperUser and Viewing in the Administration panel: we need to create a SuperUser before accessing the 'admin' \npanel. To do so, use 'winpty python manage.py createsuperuser'. \n \n \n \nRun server in the background in bash by command python manage.py runserver.  \n \n \n \nFill out details afterward, i.e., the username and password that you've created earlier as shown in figure 2: \n \n \n \nFigure 2(a). Django Administration window",
    "8": "A. Chandiramani et al.  \n \n \nISSN (Online) : 2583-1798 \n8 \nJournal of Management and Service Science \n(JMSS) \nA2Z Journals \n \n \nFigure 2(b). Django Administration window  \n \n \nFigure 2(c). Django Administration window  \n \n5. Create a Web App (Weather App) \nLet us build a simple Django application that displays the weather of various cities. To get current weather data, let us use \nthe Open Weather Map API. We will work with the database and create a form, therefore the concepts used here can be \napplicable for more complicated projects.  \nThe Admin Dashboard: Next we will look at admin dashboard given by Django. To do that, 1st we have to migrate the database, \nwhich means Django will generate the pre-defined tables that is needed for the default apps. To do this, run the migrate com-\nmand.[8]  \nâ¢ \npython manage.py migrate",
    "9": "A. Chandiramani et al. \n \n \nISSN (Online) : 2583-1798 \n9 \nJournal of Management and Service Science \n(JMSS) \nA2Z Journals \n \nBy running this command, Django has generated an SQLite database for us, default database in our settings, and it has added \nseveral tables to our database. we will know if our database was created if we see a new db.sqlite3 file in our project directory. \nOne of the table Django gives you is a user table, which can be used to store users in our app. The app we are building does \nnot need to have any users having the admin user will allow you to access the admin dashboard. To create the admin user, we \nwill run the create superuser command. \nâ¢ \npython manage.py createsuperuser \n \nGive a username, email address, and a password for your admin user. Once you have done it, you will need to start your server \nagain and navigate to admin dashboard. \nâ¢ \npython manage.py runserver \n \nThen go to server/admin. We can go to that page is because admin is set up in your urls.py. If we log in with the username, \npassword we just created, we should see the Django Admin Dashboard. Groups & users represent two models Django give us \naccess to. Model are just codes representations of tables in the database. Even though Django created additional tables, there \nis no need to access the rest of them directly, therefore no models were created. Now leave the admin dashboard for now & \ngo to the code. We are required to create an app into our project for the weather app. \n5.1. Creating the App \nWe are required to create a new application to handle everything regarding the weather. To create that app: \n \nâ¢ \npython manage.py startapp weather \n \nBy startapp, Django has add a new directory & more files to our project. The newly files generated, letâs create another file \ncalled urls.py in the app directory. \n \nurls.py \nfrom django.urls import path \n \nurlpatterns = [ \n] \n \nThis file is same as to the urls.py in our weather directory. The distinction is that this urls.py file contain all the URL that are \nrelevant to this app itself. We are not specifying a URL yet, rather we can set up our project to recognize the app and route any \nURL specific to the app urls.py file. First, check the INSTALLED_APPS list and then add this app to the list. \n \nthe_weather/the_weather/settings.py \n... \n \nINSTALLED_APPS = [ \n    'django.contrib.admin',",
    "10": "A. Chandiramani et al.  \n \n \nISSN (Online) : 2583-1798 \n10 \nJournal of Management and Service Science \n(JMSS) \nA2Z Journals \n \n    'django.contrib.auth', \n    'django.contrib.contenttypes', \n    'django.contrib.sessions', \n    'django.contrib.messages', \n    'django.contrib.staticfiles', \n    'weather', \n] \n \n... \n \nThis lets Django know that we want to use our weather app in the project. By doing that, Django will know where the migrations \nand the URL are. Afterward, we need to modify the main urls.py to point to our weather app urls.py file. To do that, we add on \na line under the existing path for admin dashboard. We are also required to import include so we can point to our \napp urls.py file. \n \nthe_weather/the_weather/urls.py \nfrom django.contrib import admin \nfrom django.urls import path, include \n \nurlpatterns = [ \n    path('admin/', admin.site.urls), \n    path('', include('weather.urls')), \n] \n \nThe null string means that we wonât utilize an endpoint for the entry point to our app. Instead weâll let our app handle any \nspecific endpoint. We could have put up something like path [âweather/â, â¦], which would have meant we would have to \ntype server/weather/ to get anything with our weather app. \n5.2. Adding the Template and View \nNext, we need to add template to our project. A template in Django is an HTML file that allow for extra syntax that make the \ntemplate dynamic. We will be able to do things like add variables, if statement, and loops, among all other things.[9] We have \nan HTML files, but this will be enough for you to start. We are going to create a template directory to put that file in. \n \nâ¢ \ncd weather \nâ¢ \nmkdir templates && cd templates \nâ¢ \nmkdir weather \n \nWe created another directory with the similar name as our application. We did this because Django combine all the template \ndirectories by the various apps we have. To prevent filename being duplicated, we can take the name of our app to prevent",
    "11": "A. Chandiramani et al. \n \n \nISSN (Online) : 2583-1798 \n11 \nJournal of Management and Service Science \n(JMSS) \nA2Z Journals \n \ncreating the duplicates. Inside of our weather directory, creating a new file called index.html. This will be the main template. \nWe have our template created, let us create a view and URL combined so we can actually have this in our app. Views in Django \nare either functions or classes. since we are creating a simple view, we will create a function. Add this function to your views.py: \n \nthe_weather/weather/views.py \nfrom django.shortcuts import render \n \ndef index(request): \n    return render(request, 'weather/index.html') #returns the index.html template \n \nWe are naming our view index because this will be at index of the app, which is the root URL. having the template render, we \nwould return request, which is must for the render function, & the name of our template file we want to render, like in this \ncase weather/index.html. Letâs add this URL that will send this request to this view. The urls.py for this app, update the urlpat-\nterns list. \n \nthe_weather/weather/urls.py \nfrom django.urls import path \nfrom . import views \n \nurlpatterns = [ \n    path('', views.index),  #the path for our index view \n] \n \nThis allows us to refer the view we created. Django goes to match any URL without the endpoint and route it to view function \ncreateded by us. Go back to your project root, start the server again. \n \nâ¢ \npython manage.py runserver \n \nWhat we can see now is just the result of HTML you have in index.html file. You will see an input to add cities and the weather \nfor Lucknow. However, the form does not work, and the weather is nothing more than a placeholder, Now weâll be creating \nthose for this app. \n5.3. Using the Weather API \nWhat we need to do now is have to sign up for the âOpen Weather Map APIâ. This will allow us get real-time weather for any \ncity that we add in our app[1][2][3]. Now we go to the site, create an account, and then go to the API keys on their dashboard. \nEnter a name & generate a new API key. This key allows us to use the API for obtaining the weather. The 1 endpoint we will \nuse is shown below, so you can see following data that gets returned from modifying the following URL with our API key and \nnavigating to the URLs in your browser [1][2][3]. It takes a few minutes for our API key to become active http://api.openweath-\nermap.org/data/2.5/weather?q=lucknow&units=imperial&appid=YOUR_APP_KEY",
    "12": "A. Chandiramani et al.  \n \n \nISSN (Online) : 2583-1798 \n12 \nJournal of Management and Service Science \n(JMSS) \nA2Z Journals \n \nWith this, let us add in a request to obtain the data into our app. First, we will need to install request so we can call our API \nfrom inside our app. \nâ¢ \npipenv install requests \n \nLet us update our index view so to send a request to our URL we have. \nthe_weather/weather/views.py \nfrom django.shortcuts import render \nimport requests \n \ndef index(request): \n    url = 'http://api.openweathermap.org/data/2.5/weather?q={}&units=imperial&ap-\npid=YOUR_APP_KEY' \n    city = 'Lucknow' \n    city_.weather = requests.get(url.format(city)).json()  \n \n    return render(request, 'weather/index.html') #returns the index.html template \n \nWith those 3 lines, we are adding the URL that we would send a request to. We will make the part for the city just a placeholder \nfor when we allow user to add their own city. For now, we will set the city to be Lucknow, but later this will be set to the cities \nfrom the database. Now run the server again and we can see the details of the city regarding the weather \n5.4. Displaying the Data in the Template \nNext, we need to pass the data to the template so it can be displayed to the user. Letâs create a dictionary to hold all of the \ndata we need. Of the data returned, we need temperature, description, and icon. \n \nthe_weather/weather/views.py \ndef index(request): \n    ... \n    weather = { \n        'city' : city, \n        'temperature' : city_weather['main']['temp'], \n        'description' : city_weather['weather'][0]['description'], \n        'icon' : city_weather['weather'][0]['icon'] \n    } \n \n    return render(request, 'weather/index.html') #returns the index.html template",
    "13": "A. Chandiramani et al. \n \n \nISSN (Online) : 2583-1798 \n13 \nJournal of Management and Service Science \n(JMSS) \nA2Z Journals \n \nNow that we have the information we need, we can pass that to our template. To pass it to our template, weâll create a variable \nnamed context. This will be a dictionary which will allow us to use its values inside our template. \n \nthe_weather/weather/views.py \ndef index(request): \n    ... \n    context = {'weather' : weather} \n    return render(request, 'weather/index.html', context) #returns the index.html template \n \nAnd then in render, we will add the context as the 3rd argument. With the weather data add inside of context, let us go to the \ntemplate to add our data. Inside of the template, all we want to do is modify our HTML to use variables rather than values I \ntyped in. Variables will be using {{}} tags [9], and they will refer to anything inside of our context dictionary. Note: Djangcity will \ngive you the city name. We do not use weather['city'] like we would in Python. With all the variables replaced, we should now \nsee the current weather for our city. We will create a table in the database to hold the city that we want to know the weather \nfor. We will create a model for this. Let us go to the models.py file in your weather app, and add the following: \n \nthe_weather/weather/models.py \nfrom django.db import models \n \nclass City(models.Model): \n    name = models.CharField(max_length=25) \n \n    def _str_(self):  \n        return self.name \n \n    class Meta:  \n        verbose_name_plural = 'cities' \n \nThis will create a table in the database that will have a column named name, which is the cities name. This city will be a-\ncharfield, which is a string. To get the changes in our database, we have should run make migrations to generate the code that \nupdates the database and migrate to apply for those changes. python manage.py makemigration. Python manage.py migrate: \nWe need to make it so we can see this model from our admin dashboard. To achieve that, we need to register this in our ad-\nmin.py file. \n \nthe_weather/weather/admin.py \nfrom django.contrib import admin from .models import City admin.site.register(City) \nThe city is added as an option on the admin dashboard. We can then add some cities into the admin dashboard. Iâll start with \nthree: Ludhiana, Tamil Nadu, and Lucknow[3]. With the entries in the database, we need to query these entries in our view. \nStart by import the City model and then query that model for all objects.",
    "14": "A. Chandiramani et al.  \n \n \nISSN (Online) : 2583-1798 \n14 \nJournal of Management and Service Science \n(JMSS) \nA2Z Journals \n \n \nthe_weather/weather/views.py \nfrom django.shortcuts import render \nimport requests \nfrom .models import City \nthe_weather/weather/views.py \n... \ndef index(request): \n    url \n= \n'http://api.openweathermap.org/data/2.5/weather?q={}&units=imperial&ap-\npid=YOUR_APP_KEY' \n    cities = City.objects.all()  \n    ... \n \nSince we have the cities, we want to loop it over them & get the weather for each 1 and add it to the list that will eventually \nbe passed to the template. This will just be a variation which is of what we did in the first case. Other difference is we want to \nlooping and appending each dictionary to that list. Weâll remove the original city variable in place of a city variable in the loop: \nthe_weather/weather/views.py \ndef index(request): \n    ... \n    weather_data = [] \n \n    for city in cities: \n \n        city_weather = requests.get(url.format(city)).json()  \n \n        weather = { \n            'city' : city, \n            'temperature' : city_weather['main']['temp'], \n            'description' : city_weather['weather'][0]['description'], \n            'icon' : city_weather['weather'][0]['icon'] \n        } \n \n        weather_data.append(weather)  \n    context = {'weather_data' : weather_data} \n    ... \n \nNow letâs update the context for to pass this list instead of the single dictionary.",
    "15": "A. Chandiramani et al. \n \n \nISSN (Online) : 2583-1798 \n15 \nJournal of Management and Service Science \n(JMSS) \nA2Z Journals \n \nthe_weather/weather/views.py \n... \ncontext = {'weather_data' : weather_data} \n... \n \nNext, inside of the template, we want to loop over this list & generate the HTML for every city in the list. For this, we can put \nup a for loop around the HTML that will generate a single box for that city. After updating the HTML file[9] we can see the data \nfor all the cities we have in the database. \n5.5. Creating the Form \nThe last thing we need to do is allow our user to add a city straight in the form. For that, we need to generate a form. We could \ngenerate the form directly, but since our form will have exact same field as our model, we can use our ModelForm. Create a \nnew file called forms.py. \nthe_weather/weather/forms.py \nfrom django.forms import ModelForm, TextInput \nfrom .models import City \n \nclass CityForm(ModelForm): \n    class Meta: \n        model = City \n        fields = ['name'] \n        widgets = { \n            'name': TextInput(attrs={'class' : 'input', 'placeholder' : 'City Name'}), \n        } \nTo view this form, we need to create it in the view and pass it to our template. To do that, let us update the index video that \nwill create the form. We will replace the old city variable the same time because we no longer need it. We can also need to \nupdate context so the form gets passed to the template. \nthe_weather/weather/views.py \ndef index(request): \n    ... \n    form = CityForm() \n \n    weather_data = [] \n    ... \n    context = {'weather_data' : weather_data, 'form' : form}",
    "16": "A. Chandiramani et al.  \n \n \nISSN (Online) : 2583-1798 \n16 \nJournal of Management and Service Science \n(JMSS) \nA2Z Journals \n \nNow in the template, let us update the form section so that we can use the form from our view & a csrf_token, which is needed \nfor POST requests in Django. With the form in HTML working, we now want to handle the form data as this comes in[9]. For \nthat, weâll write an if block checking for the POST request. We want to add the check for this type of request before we start \ngrabbing our weather data, so we immediately obtain the data for the city we add. \n \nthe_weather/weather/views.py \ndef index(request): \n    cities = City.objects.all()  \n \n    url \n= \n'http://api.openweathermap.org/data/2.5/weather?q={}&units=imperial&ap-\npid=YOUR_APP_KEY' \n \n    if request.method == 'POST':  \n        form = CityForm(request.POST)  \n        form.save()  \n \n    form = CityForm() \n    ... \n \nBy passing request.POST, we will be able to validate our form data. Now you should be able to type in the name of a city, click \nadd, and see it show up. I will add Mumbai as the next city. When we drop out of the if block, the form will be recreated so we \ncan add another city if we choose. \nConclusion \nWe now have a way to keep track of the weather for multiple cities in our app. We had to work with various parts of Django to \nget this working: views, models, forms, and templates. We also had to use the Python library requests to get the actual weather \ndata[1][2][3]. \nAcknowledgements \nWhen I look at the precious knowledge, I have gained till date in my B. Tech journey, I realize how much time and effort spent \ntoward the completion of this work; not only by me but also by key individuals whom I feel very indebted to. I gratefully \nacknowledge the support of my supervisor Prof. Dr. Pawan Singh. I would not imagine completing this work without all his \nadvices. I acknowledge the time he spent in our weekly meetings, even with his busy schedule and other commitments. I am \ndeeply indebted to him for his patience. He assisted in all aspects of this work from discussing new ideas to writing and \ncompleting this project. I would like to thank Amity University, Lucknow Campus for providing me a wonderful platform for \nthis work. \nReferences \n[1]. S. Klamt and A. von Kamp, âAn application programming interface for CellNetAnalyzer,â Biosystems., vol. 105, no. 2, pp. 162â168, 2011. \n[2]. S. P. Ong, S. Cholia, A. Jain, et al, âThe Materials Application Programming Interface (API): A simple, flexible and efficient API for mate-\nrials data based on representational State Transfer (REST) principles,â Comput. Mater. Sci., vol. 97, pp. 209â215, Feb 2015.",
    "17": "A. Chandiramani et al. \n \n \nISSN (Online) : 2583-1798 \n17 \nJournal of Management and Service Science \n(JMSS) \nA2Z Journals \n \n[3]. S. E. Peters and M. Mc Clennen, âThe Paleobiology Database application programming interface,â Paleobiology, vol. 42, no. 1, pp. 1â7, \n2016. \n[4]. A. Gazis and E. Katsiri, âWeb frameworks metrics and benchmarks for data handling and visualization,â in Algorithmic Aspects of Cloud \nComputing, Cham: Springer International Publishing, vol 11409, pp. 137â151, 2019. \n[5]. C. Burch, âA web framework using Python: tutorial presentation,â Journal of Computing Sciences in Colleges archive, vol. 25 no.5 pp. \n154-155, 2010. \n[6]. L. Titchkosky, M. Arlitt, and C. Williamson, âA performance comparison of dynamic Web technologies,â Perform. Eval. Rev., vol. 31, no. \n3, pp. 2â11, 2003.  \n[7]. S. Shenker, âFundamental design issues for the future Internet,â IEEE j. sel. areas commun., vol. 13, no. 7, pp. 1176â1188, 1995.  \n[8]. M. Jailia, A. Kumar, M. Agarwal, et al, âBehavior of MVC (Model View Controller) based Web Application developed in PHP and .NET \nframework,â in International Conference on ICT in Business Industry & Government ,2016. \n[9]. Armin Ronacher, \"Jinja is Beautiful\", http://jinja.pocoo.org/ ,March 21st, 2015."
  },
  "tables": {
    "1": [
      [
        [
          ""
        ],
        [
          "How to cite this paper: A. Chandiramani and"
        ],
        [
          "P. Singh (2021) Management of Django Web"
        ],
        [
          "Development in Python. Journal of Manage-"
        ],
        [
          "ment and Service Science, 1(2), 5, pp. 1-17."
        ],
        [
          ""
        ],
        [
          "https://doi.org/10.54060/JMSS/001.02.005"
        ],
        [
          ""
        ],
        [
          "Received: 28/02/2021"
        ],
        [
          "Accepted: 12/03/2021"
        ],
        [
          "Published: 25/07/2021"
        ],
        [
          ""
        ],
        [
          "Copyright Â© 2021 The Author(s)."
        ],
        [
          "This work is licensed under the Creative"
        ],
        [
          "Commons Attribution International License"
        ],
        [
          "(CC BY 4.0)."
        ],
        [
          "http://creativecommons.org/licenses/by/4.0"
        ],
        [
          "/"
        ],
        [
          "O p e n A c c e s s"
        ],
        [
          ""
        ],
        [
          ""
        ]
      ],
      [
        [
          "",
          ""
        ],
        [
          ",",
          "Abstract"
        ],
        [
          "",
          null
        ],
        [
          null,
          "Application Development is not only limited to the business or promotional field, but it"
        ],
        [
          null,
          "also helps to provide the necessary services to the common people across the world by"
        ],
        [
          null,
          "creating an interaction between the companies and the customers through the web-"
        ],
        [
          null,
          "site. It also creates a platform for the common people who have the ability to attract"
        ],
        [
          null,
          "the audience using their talent. We can take the example of various blog writers, online"
        ],
        [
          null,
          "councilors and fashion influencers who have a large audience because of their quality"
        ],
        [
          null,
          "content and knowledge in their field. We have generally seen how the electronic com-"
        ],
        [
          null,
          "panies have marked their presence on the online platform via the website which ena-"
        ],
        [
          null,
          "bles the users to contact the company easily. Online retail companies interact with the"
        ],
        [
          null,
          "users via website and provide the orders at the doorsteps of the people. There are var-"
        ],
        [
          null,
          "ious news agencies which had created their website which keeps the users updated"
        ],
        [
          null,
          "with the latest national and international articles. The website development has helped"
        ],
        [
          null,
          "to create a link between the people and the companies, but behind all these facilities"
        ],
        [
          null,
          "there is a powerful language and commands that holds these computational activities"
        ],
        [
          null,
          "and data transfers which helps to create a good interaction between the users and the"
        ],
        [
          null,
          "website owners. Web developers are classified into Front-end and Back-end web devel-"
        ],
        [
          null,
          "opers, Front-end developers help to create an interactive interface that can be easily"
        ],
        [
          null,
          "accessed by the users, whereas Back-end development deals with the main work that"
        ],
        [
          null,
          "is done behind the screens. We can say that it helps to power the website by managing"
        ],
        [
          null,
          "data transfer and other computational activities. In this project, the importance of"
        ],
        [
          null,
          "Django and back-end web development is explained. Using the tools and commands of"
        ],
        [
          null,
          "these languages we can make an interactive and user-friendly interface that can be"
        ],
        [
          null,
          "easily accessed by people. Back-end was earlier known for limited purposes but now"
        ],
        [
          null,
          "when it is explored thoroughly proved to be one of the best languages for website de-"
        ],
        [
          null,
          "velopment, gaming, Artificial Intelligence, and highly advanced mobile applications."
        ],
        [
          null,
          ""
        ],
        [
          null,
          "Keywords"
        ],
        [
          null,
          "Web Development, Django, Python, Backend"
        ],
        [
          "",
          ""
        ]
      ]
    ],
    "8": [
      [
        [
          "Let us build a simple Django application that displays the weather of various cities. To get current weather data, let us use"
        ],
        [
          "the Open Weather Map API. We will work with the database and create a form, therefore the concepts used here can be"
        ],
        [
          "applicable for more complicated projects."
        ],
        [
          "The Admin Dashboard: Next we will look at admin dashboard given by Django. To do that, 1st we have to migrate the database,"
        ],
        [
          "which means Django will generate the pre-defined tables that is needed for the default apps. To do this, run the migrate com-"
        ],
        [
          "mand.[8]"
        ],
        [
          "â¢ python manage.py migrate"
        ]
      ]
    ],
    "9": [
      [
        [
          "By running this command, Django has generated an SQLite database for us, default database in our settings, and it has added"
        ],
        [
          "several tables to our database. we will know if our database was created if we see a new db.sqlite3 file in our project directory."
        ],
        [
          "One of the table Django gives you is a user table, which can be used to store users in our app. The app we are building does"
        ],
        [
          "not need to have any users having the admin user will allow you to access the admin dashboard. To create the admin user, we"
        ],
        [
          "will run the create superuser command."
        ],
        [
          "â¢ python manage.py createsuperuser"
        ],
        [
          ""
        ],
        [
          "Give a username, email address, and a password for your admin user. Once you have done it, you will need to start your server"
        ],
        [
          "again and navigate to admin dashboard."
        ],
        [
          "â¢ python manage.py runserver"
        ],
        [
          ""
        ],
        [
          "Then go to server/admin. We can go to that page is because admin is set up in your urls.py. If we log in with the username,"
        ],
        [
          "password we just created, we should see the Django Admin Dashboard. Groups & users represent two models Django give us"
        ],
        [
          "access to. Model are just codes representations of tables in the database. Even though Django created additional tables, there"
        ],
        [
          "is no need to access the rest of them directly, therefore no models were created. Now leave the admin dashboard for now &"
        ],
        [
          "go to the code. We are required to create an app into our project for the weather app."
        ]
      ],
      [
        [
          "We are required to create a new application to handle everything regarding the weather. To create that app:"
        ],
        [
          ""
        ],
        [
          "â¢ python manage.py startapp weather"
        ],
        [
          ""
        ],
        [
          "By startapp, Django has add a new directory & more files to our project. The newly files generated, letâs create another file"
        ],
        [
          "called urls.py in the app directory."
        ],
        [
          ""
        ],
        [
          "urls.py"
        ],
        [
          "from django.urls import path"
        ],
        [
          ""
        ],
        [
          "urlpatterns = ["
        ],
        [
          "]"
        ],
        [
          ""
        ],
        [
          "This file is same as to the urls.py in our weather directory. The distinction is that this urls.py file contain all the URL that are"
        ],
        [
          "relevant to this app itself. We are not specifying a URL yet, rather we can set up our project to recognize the app and route any"
        ],
        [
          "URL specific to the app urls.py file. First, check the INSTALLED_APPS list and then add this app to the list."
        ],
        [
          ""
        ],
        [
          "the_weather/the_weather/settings.py"
        ],
        [
          "..."
        ],
        [
          ""
        ],
        [
          "INSTALLED_APPS = ["
        ],
        [
          "'django.contrib.admin',"
        ]
      ]
    ],
    "10": [
      [
        [
          "'django.contrib.auth',"
        ],
        [
          "'django.contrib.contenttypes',"
        ],
        [
          "'django.contrib.sessions',"
        ],
        [
          "'django.contrib.messages',"
        ],
        [
          "'django.contrib.staticfiles',"
        ],
        [
          "'weather',"
        ],
        [
          "]"
        ],
        [
          ""
        ],
        [
          "..."
        ],
        [
          ""
        ],
        [
          "This lets Django know that we want to use our weather app in the project. By doing that, Django will know where the migrations"
        ],
        [
          "and the URL are. Afterward, we need to modify the main urls.py to point to our weather app urls.py file. To do that, we add on"
        ],
        [
          "a line under the existing path for admin dashboard. We are also required to import include so we can point to our"
        ],
        [
          "app urls.py file."
        ],
        [
          ""
        ],
        [
          "the_weather/the_weather/urls.py"
        ],
        [
          "from django.contrib import admin"
        ],
        [
          "from django.urls import path, include"
        ],
        [
          ""
        ],
        [
          "urlpatterns = ["
        ],
        [
          "path('admin/', admin.site.urls),"
        ],
        [
          "path('', include('weather.urls')),"
        ],
        [
          "]"
        ],
        [
          ""
        ],
        [
          "The null string means that we wonât utilize an endpoint for the entry point to our app. Instead weâll let our app handle any"
        ],
        [
          "specific endpoint. We could have put up something like path [âweather/â, â¦], which would have meant we would have to"
        ],
        [
          "type server/weather/ to get anything with our weather app."
        ]
      ],
      [
        [
          "Next, we need to add template to our project. A template in Django is an HTML file that allow for extra syntax that make the"
        ],
        [
          "template dynamic. We will be able to do things like add variables, if statement, and loops, among all other things.[9] We have"
        ],
        [
          "an HTML files, but this will be enough for you to start. We are going to create a template directory to put that file in."
        ],
        [
          ""
        ],
        [
          "â¢ cd weather"
        ],
        [
          "â¢ mkdir templates && cd templates"
        ],
        [
          "â¢ mkdir weather"
        ],
        [
          ""
        ],
        [
          "We created another directory with the similar name as our application. We did this because Django combine all the template"
        ],
        [
          "directories by the various apps we have. To prevent filename being duplicated, we can take the name of our app to prevent"
        ]
      ]
    ],
    "11": [
      [
        [
          "creating the duplicates. Inside of our weather directory, creating a new file called index.html. This will be the main template."
        ],
        [
          "We have our template created, let us create a view and URL combined so we can actually have this in our app. Views in Django"
        ],
        [
          "are either functions or classes. since we are creating a simple view, we will create a function. Add this function to your views.py:"
        ],
        [
          ""
        ],
        [
          "the_weather/weather/views.py"
        ],
        [
          "from django.shortcuts import render"
        ],
        [
          ""
        ],
        [
          "def index(request):"
        ],
        [
          "return render(request, 'weather/index.html') #returns the index.html template"
        ],
        [
          ""
        ],
        [
          "We are naming our view index because this will be at index of the app, which is the root URL. having the template render, we"
        ],
        [
          "would return request, which is must for the render function, & the name of our template file we want to render, like in this"
        ],
        [
          "case weather/index.html. Letâs add this URL that will send this request to this view. The urls.py for this app, update the urlpat-"
        ],
        [
          "terns list."
        ],
        [
          ""
        ],
        [
          "the_weather/weather/urls.py"
        ],
        [
          "from django.urls import path"
        ],
        [
          "from . import views"
        ],
        [
          ""
        ],
        [
          "urlpatterns = ["
        ],
        [
          "path('', views.index), #the path for our index view"
        ],
        [
          "]"
        ],
        [
          ""
        ],
        [
          "This allows us to refer the view we created. Django goes to match any URL without the endpoint and route it to view function"
        ],
        [
          "createded by us. Go back to your project root, start the server again."
        ],
        [
          ""
        ],
        [
          "â¢ python manage.py runserver"
        ],
        [
          ""
        ],
        [
          "What we can see now is just the result of HTML you have in index.html file. You will see an input to add cities and the weather"
        ],
        [
          "for Lucknow. However, the form does not work, and the weather is nothing more than a placeholder, Now weâll be creating"
        ],
        [
          "those for this app."
        ],
        [
          "5.3. Using the Weather API"
        ],
        [
          "What we need to do now is have to sign up for the âOpen Weather Map APIâ. This will allow us get real-time weather for any"
        ],
        [
          "city that we add in our app[1][2][3]. Now we go to the site, create an account, and then go to the API keys on their dashboard."
        ],
        [
          "Enter a name & generate a new API key. This key allows us to use the API for obtaining the weather. The 1 endpoint we will"
        ],
        [
          "use is shown below, so you can see following data that gets returned from modifying the following URL with our API key and"
        ],
        [
          "navigating to the URLs in your browser [1][2][3]. It takes a few minutes for our API key to become active http://api.openweath-"
        ],
        [
          "ermap.org/data/2.5/weather?q=lucknow&units=imperial&appid=YOUR_APP_KEY"
        ]
      ]
    ],
    "12": [
      [
        [
          "With this, let us add in a request to obtain the data into our app. First, we will need to install request so we can call our API"
        ],
        [
          "from inside our app."
        ],
        [
          "â¢ pipenv install requests"
        ],
        [
          ""
        ],
        [
          "Let us update our index view so to send a request to our URL we have."
        ],
        [
          "the_weather/weather/views.py"
        ],
        [
          "from django.shortcuts import render"
        ],
        [
          "import requests"
        ],
        [
          ""
        ],
        [
          "def index(request):"
        ],
        [
          "url = 'http://api.openweathermap.org/data/2.5/weather?q={}&units=imperial&ap-"
        ],
        [
          "pid=YOUR_APP_KEY'"
        ],
        [
          "city = 'Lucknow'"
        ],
        [
          "city_.weather = requests.get(url.format(city)).json()"
        ],
        [
          ""
        ],
        [
          "return render(request, 'weather/index.html') #returns the index.html template"
        ],
        [
          ""
        ],
        [
          "With those 3 lines, we are adding the URL that we would send a request to. We will make the part for the city just a placeholder"
        ],
        [
          "for when we allow user to add their own city. For now, we will set the city to be Lucknow, but later this will be set to the cities"
        ],
        [
          "from the database. Now run the server again and we can see the details of the city regarding the weather"
        ],
        [
          "5.4. Displaying the Data in the Template"
        ],
        [
          "Next, we need to pass the data to the template so it can be displayed to the user. Letâs create a dictionary to hold all of the"
        ],
        [
          "data we need. Of the data returned, we need temperature, description, and icon."
        ],
        [
          ""
        ],
        [
          "the_weather/weather/views.py"
        ],
        [
          "def index(request):"
        ],
        [
          "..."
        ],
        [
          "weather = {"
        ],
        [
          "'city' : city,"
        ],
        [
          "'temperature' : city_weather['main']['temp'],"
        ],
        [
          "'description' : city_weather['weather'][0]['description'],"
        ],
        [
          "'icon' : city_weather['weather'][0]['icon']"
        ],
        [
          "}"
        ],
        [
          ""
        ],
        [
          "return render(request, 'weather/index.html') #returns the index.html template"
        ],
        [
          ""
        ]
      ]
    ],
    "13": [
      [
        [
          "Now that we have the information we need, we can pass that to our template. To pass it to our template, weâll create a variable"
        ],
        [
          "named context. This will be a dictionary which will allow us to use its values inside our template."
        ],
        [
          ""
        ],
        [
          "the_weather/weather/views.py"
        ],
        [
          "def index(request):"
        ],
        [
          "..."
        ],
        [
          "context = {'weather' : weather}"
        ],
        [
          "return render(request, 'weather/index.html', context) #returns the index.html template"
        ],
        [
          ""
        ],
        [
          "And then in render, we will add the context as the 3rd argument. With the weather data add inside of context, let us go to the"
        ],
        [
          "template to add our data. Inside of the template, all we want to do is modify our HTML to use variables rather than values I"
        ],
        [
          "typed in. Variables will be using {{}} tags [9], and they will refer to anything inside of our context dictionary. Note: Djangcity will"
        ],
        [
          "give you the city name. We do not use weather['city'] like we would in Python. With all the variables replaced, we should now"
        ],
        [
          "see the current weather for our city. We will create a table in the database to hold the city that we want to know the weather"
        ],
        [
          "for. We will create a model for this. Let us go to the models.py file in your weather app, and add the following:"
        ],
        [
          ""
        ],
        [
          "the_weather/weather/models.py"
        ],
        [
          "from django.db import models"
        ],
        [
          ""
        ],
        [
          "class City(models.Model):"
        ],
        [
          "name = models.CharField(max_length=25)"
        ],
        [
          ""
        ],
        [
          "def _str_(self):"
        ],
        [
          "return self.name"
        ],
        [
          ""
        ],
        [
          "class Meta:"
        ],
        [
          "verbose_name_plural = 'cities'"
        ],
        [
          ""
        ],
        [
          "This will create a table in the database that will have a column named name, which is the cities name. This city will be a-"
        ],
        [
          "charfield, which is a string. To get the changes in our database, we have should run make migrations to generate the code that"
        ],
        [
          "updates the database and migrate to apply for those changes. python manage.py makemigration. Python manage.py migrate:"
        ],
        [
          "We need to make it so we can see this model from our admin dashboard. To achieve that, we need to register this in our ad-"
        ],
        [
          "min.py file."
        ],
        [
          ""
        ],
        [
          "the_weather/weather/admin.py"
        ],
        [
          "from django.contrib import admin from .models import City admin.site.register(City)"
        ],
        [
          "The city is added as an option on the admin dashboard. We can then add some cities into the admin dashboard. Iâll start with"
        ],
        [
          "three: Ludhiana, Tamil Nadu, and Lucknow[3]. With the entries in the database, we need to query these entries in our view."
        ],
        [
          "Start by import the City model and then query that model for all objects."
        ]
      ]
    ],
    "14": [
      [
        [
          ""
        ],
        [
          "the_weather/weather/views.py"
        ],
        [
          "from django.shortcuts import render"
        ],
        [
          "import requests"
        ],
        [
          "from .models import City"
        ],
        [
          "the_weather/weather/views.py"
        ],
        [
          "..."
        ],
        [
          "def index(request):"
        ],
        [
          "url = 'http://api.openweathermap.org/data/2.5/weather?q={}&units=imperial&ap-"
        ],
        [
          "pid=YOUR_APP_KEY'"
        ],
        [
          "cities = City.objects.all()"
        ],
        [
          "..."
        ],
        [
          ""
        ],
        [
          "Since we have the cities, we want to loop it over them & get the weather for each 1 and add it to the list that will eventually"
        ],
        [
          "be passed to the template. This will just be a variation which is of what we did in the first case. Other difference is we want to"
        ],
        [
          "looping and appending each dictionary to that list. Weâll remove the original city variable in place of a city variable in the loop:"
        ],
        [
          "the_weather/weather/views.py"
        ],
        [
          "def index(request):"
        ],
        [
          "..."
        ],
        [
          "weather_data = []"
        ],
        [
          ""
        ],
        [
          "for city in cities:"
        ],
        [
          ""
        ],
        [
          "city_weather = requests.get(url.format(city)).json()"
        ],
        [
          ""
        ],
        [
          "weather = {"
        ],
        [
          "'city' : city,"
        ],
        [
          "'temperature' : city_weather['main']['temp'],"
        ],
        [
          "'description' : city_weather['weather'][0]['description'],"
        ],
        [
          "'icon' : city_weather['weather'][0]['icon']"
        ],
        [
          "}"
        ],
        [
          ""
        ],
        [
          "weather_data.append(weather)"
        ],
        [
          "context = {'weather_data' : weather_data}"
        ],
        [
          "..."
        ],
        [
          ""
        ],
        [
          "Now letâs update the context for to pass this list instead of the single dictionary."
        ]
      ]
    ],
    "15": [
      [
        [
          "the_weather/weather/views.py"
        ],
        [
          "..."
        ],
        [
          "context = {'weather_data' : weather_data}"
        ],
        [
          "..."
        ],
        [
          ""
        ],
        [
          "Next, inside of the template, we want to loop over this list & generate the HTML for every city in the list. For this, we can put"
        ],
        [
          "up a for loop around the HTML that will generate a single box for that city. After updating the HTML file[9] we can see the data"
        ],
        [
          "for all the cities we have in the database."
        ],
        [
          "5.5. Creating the Form"
        ],
        [
          "The last thing we need to do is allow our user to add a city straight in the form. For that, we need to generate a form. We could"
        ],
        [
          "generate the form directly, but since our form will have exact same field as our model, we can use our ModelForm. Create a"
        ],
        [
          "new file called forms.py."
        ],
        [
          "the_weather/weather/forms.py"
        ],
        [
          "from django.forms import ModelForm, TextInput"
        ],
        [
          "from .models import City"
        ],
        [
          ""
        ],
        [
          "class CityForm(ModelForm):"
        ],
        [
          "class Meta:"
        ],
        [
          "model = City"
        ],
        [
          "fields = ['name']"
        ],
        [
          "widgets = {"
        ],
        [
          "'name': TextInput(attrs={'class' : 'input', 'placeholder' : 'City Name'}),"
        ],
        [
          "}"
        ],
        [
          "To view this form, we need to create it in the view and pass it to our template. To do that, let us update the index video that"
        ],
        [
          "will create the form. We will replace the old city variable the same time because we no longer need it. We can also need to"
        ],
        [
          "update context so the form gets passed to the template."
        ],
        [
          "the_weather/weather/views.py"
        ],
        [
          "def index(request):"
        ],
        [
          "..."
        ],
        [
          "form = CityForm()"
        ],
        [
          ""
        ],
        [
          "weather_data = []"
        ],
        [
          "..."
        ],
        [
          "context = {'weather_data' : weather_data, 'form' : form}"
        ],
        [
          ""
        ]
      ]
    ],
    "16": [
      [
        [
          "Now in the template, let us update the form section so that we can use the form from our view & a csrf_token, which is needed"
        ],
        [
          "for POST requests in Django. With the form in HTML working, we now want to handle the form data as this comes in[9]. For"
        ],
        [
          "that, weâll write an if block checking for the POST request. We want to add the check for this type of request before we start"
        ],
        [
          "grabbing our weather data, so we immediately obtain the data for the city we add."
        ],
        [
          ""
        ],
        [
          "the_weather/weather/views.py"
        ],
        [
          "def index(request):"
        ],
        [
          "cities = City.objects.all()"
        ],
        [
          ""
        ],
        [
          "url = 'http://api.openweathermap.org/data/2.5/weather?q={}&units=imperial&ap-"
        ],
        [
          "pid=YOUR_APP_KEY'"
        ],
        [
          ""
        ],
        [
          "if request.method == 'POST':"
        ],
        [
          "form = CityForm(request.POST)"
        ],
        [
          "form.save()"
        ],
        [
          ""
        ],
        [
          "form = CityForm()"
        ],
        [
          "..."
        ],
        [
          ""
        ],
        [
          "By passing request.POST, we will be able to validate our form data. Now you should be able to type in the name of a city, click"
        ],
        [
          "add, and see it show up. I will add Mumbai as the next city. When we drop out of the if block, the form will be recreated so we"
        ],
        [
          "can add another city if we choose."
        ]
      ],
      [
        [
          "We now have a way to keep track of the weather for multiple cities in our app. We had to work with various parts of Django to"
        ],
        [
          "get this working: views, models, forms, and templates. We also had to use the Python library requests to get the actual weather"
        ],
        [
          "data[1][2][3]."
        ]
      ]
    ]
  },
  "images": {
    "1": [
      {
        "filename": "page_1_image_1.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_1_image_1.png",
        "extraction_date": "2025-01-25T13:25:03.042850",
        "page_number": 1,
        "image_index": 1,
        "width": 100,
        "height": 86
      },
      {
        "filename": "page_1_image_2.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_1_image_2.png",
        "extraction_date": "2025-01-25T13:25:03.049140",
        "page_number": 1,
        "image_index": 2,
        "width": 191,
        "height": 156
      },
      {
        "filename": "page_1_image_3.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_1_image_3.png",
        "extraction_date": "2025-01-25T13:25:03.052732",
        "page_number": 1,
        "image_index": 3,
        "width": 88,
        "height": 31
      }
    ],
    "2": [
      {
        "filename": "page_2_image_1.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_2_image_1.png",
        "extraction_date": "2025-01-25T13:25:03.058606",
        "page_number": 2,
        "image_index": 1,
        "width": 100,
        "height": 86
      },
      {
        "filename": "page_2_image_2.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_2_image_2.png",
        "extraction_date": "2025-01-25T13:25:03.068337",
        "page_number": 2,
        "image_index": 2,
        "width": 575,
        "height": 131
      },
      {
        "filename": "page_2_image_3.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_2_image_3.png",
        "extraction_date": "2025-01-25T13:25:03.080577",
        "page_number": 2,
        "image_index": 3,
        "width": 577,
        "height": 132
      }
    ],
    "3": [
      {
        "filename": "page_3_image_1.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_3_image_1.png",
        "extraction_date": "2025-01-25T13:25:03.087061",
        "page_number": 3,
        "image_index": 1,
        "width": 100,
        "height": 86
      },
      {
        "filename": "page_3_image_2.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_3_image_2.png",
        "extraction_date": "2025-01-25T13:25:03.097681",
        "page_number": 3,
        "image_index": 2,
        "width": 577,
        "height": 116
      },
      {
        "filename": "page_3_image_3.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_3_image_3.png",
        "extraction_date": "2025-01-25T13:25:03.117283",
        "page_number": 3,
        "image_index": 3,
        "width": 568,
        "height": 148
      },
      {
        "filename": "page_3_image_4.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_3_image_4.png",
        "extraction_date": "2025-01-25T13:25:03.126564",
        "page_number": 3,
        "image_index": 4,
        "width": 580,
        "height": 85
      },
      {
        "filename": "page_3_image_5.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_3_image_5.png",
        "extraction_date": "2025-01-25T13:25:03.142636",
        "page_number": 3,
        "image_index": 5,
        "width": 585,
        "height": 170
      }
    ],
    "4": [
      {
        "filename": "page_4_image_1.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_4_image_1.png",
        "extraction_date": "2025-01-25T13:25:03.147422",
        "page_number": 4,
        "image_index": 1,
        "width": 100,
        "height": 86
      },
      {
        "filename": "page_4_image_2.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_4_image_2.png",
        "extraction_date": "2025-01-25T13:25:03.160504",
        "page_number": 4,
        "image_index": 2,
        "width": 585,
        "height": 170
      },
      {
        "filename": "page_4_image_3.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_4_image_3.png",
        "extraction_date": "2025-01-25T13:25:03.217712",
        "page_number": 4,
        "image_index": 3,
        "width": 1165,
        "height": 740
      }
    ],
    "5": [
      {
        "filename": "page_5_image_1.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_5_image_1.png",
        "extraction_date": "2025-01-25T13:25:03.222303",
        "page_number": 5,
        "image_index": 1,
        "width": 100,
        "height": 86
      },
      {
        "filename": "page_5_image_2.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_5_image_2.png",
        "extraction_date": "2025-01-25T13:25:03.231131",
        "page_number": 5,
        "image_index": 2,
        "width": 576,
        "height": 129
      },
      {
        "filename": "page_5_image_3.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_5_image_3.png",
        "extraction_date": "2025-01-25T13:25:03.283128",
        "page_number": 5,
        "image_index": 3,
        "width": 1145,
        "height": 668
      }
    ],
    "6": [
      {
        "filename": "page_6_image_1.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_6_image_1.png",
        "extraction_date": "2025-01-25T13:25:03.289064",
        "page_number": 6,
        "image_index": 1,
        "width": 100,
        "height": 86
      },
      {
        "filename": "page_6_image_2.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_6_image_2.png",
        "extraction_date": "2025-01-25T13:25:03.324222",
        "page_number": 6,
        "image_index": 2,
        "width": 986,
        "height": 527
      },
      {
        "filename": "page_6_image_3.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_6_image_3.png",
        "extraction_date": "2025-01-25T13:25:03.332312",
        "page_number": 6,
        "image_index": 3,
        "width": 582,
        "height": 117
      },
      {
        "filename": "page_6_image_4.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_6_image_4.png",
        "extraction_date": "2025-01-25T13:25:03.341584",
        "page_number": 6,
        "image_index": 4,
        "width": 565,
        "height": 104
      }
    ],
    "7": [
      {
        "filename": "page_7_image_1.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_7_image_1.png",
        "extraction_date": "2025-01-25T13:25:03.346138",
        "page_number": 7,
        "image_index": 1,
        "width": 100,
        "height": 86
      },
      {
        "filename": "page_7_image_2.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_7_image_2.png",
        "extraction_date": "2025-01-25T13:25:03.366051",
        "page_number": 7,
        "image_index": 2,
        "width": 965,
        "height": 284
      },
      {
        "filename": "page_7_image_3.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_7_image_3.png",
        "extraction_date": "2025-01-25T13:25:03.376356",
        "page_number": 7,
        "image_index": 3,
        "width": 569,
        "height": 145
      },
      {
        "filename": "page_7_image_4.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_7_image_4.png",
        "extraction_date": "2025-01-25T13:25:03.379202",
        "page_number": 7,
        "image_index": 4,
        "width": 338,
        "height": 28
      },
      {
        "filename": "page_7_image_5.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_7_image_5.png",
        "extraction_date": "2025-01-25T13:25:03.419302",
        "page_number": 7,
        "image_index": 5,
        "width": 1019,
        "height": 604
      }
    ],
    "8": [
      {
        "filename": "page_8_image_1.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_8_image_1.png",
        "extraction_date": "2025-01-25T13:25:03.425850",
        "page_number": 8,
        "image_index": 1,
        "width": 100,
        "height": 86
      },
      {
        "filename": "page_8_image_2.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_8_image_2.png",
        "extraction_date": "2025-01-25T13:25:03.462895",
        "page_number": 8,
        "image_index": 2,
        "width": 1045,
        "height": 420
      },
      {
        "filename": "page_8_image_3.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_8_image_3.png",
        "extraction_date": "2025-01-25T13:25:03.517609",
        "page_number": 8,
        "image_index": 3,
        "width": 1304,
        "height": 580
      }
    ],
    "9": [
      {
        "filename": "page_9_image_1.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_9_image_1.png",
        "extraction_date": "2025-01-25T13:25:03.523171",
        "page_number": 9,
        "image_index": 1,
        "width": 100,
        "height": 86
      }
    ],
    "10": [
      {
        "filename": "page_10_image_1.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_10_image_1.png",
        "extraction_date": "2025-01-25T13:25:03.528008",
        "page_number": 10,
        "image_index": 1,
        "width": 100,
        "height": 86
      }
    ],
    "11": [
      {
        "filename": "page_11_image_1.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_11_image_1.png",
        "extraction_date": "2025-01-25T13:25:03.534230",
        "page_number": 11,
        "image_index": 1,
        "width": 100,
        "height": 86
      }
    ],
    "12": [
      {
        "filename": "page_12_image_1.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_12_image_1.png",
        "extraction_date": "2025-01-25T13:25:03.540253",
        "page_number": 12,
        "image_index": 1,
        "width": 100,
        "height": 86
      }
    ],
    "13": [
      {
        "filename": "page_13_image_1.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_13_image_1.png",
        "extraction_date": "2025-01-25T13:25:03.544502",
        "page_number": 13,
        "image_index": 1,
        "width": 100,
        "height": 86
      }
    ],
    "14": [
      {
        "filename": "page_14_image_1.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_14_image_1.png",
        "extraction_date": "2025-01-25T13:25:03.548484",
        "page_number": 14,
        "image_index": 1,
        "width": 100,
        "height": 86
      }
    ],
    "15": [
      {
        "filename": "page_15_image_1.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_15_image_1.png",
        "extraction_date": "2025-01-25T13:25:03.553063",
        "page_number": 15,
        "image_index": 1,
        "width": 100,
        "height": 86
      }
    ],
    "16": [
      {
        "filename": "page_16_image_1.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_16_image_1.png",
        "extraction_date": "2025-01-25T13:25:03.559794",
        "page_number": 16,
        "image_index": 1,
        "width": 100,
        "height": 86
      }
    ],
    "17": [
      {
        "filename": "page_17_image_1.png",
        "path": "output\\images\\temp_dc83ad1f-cc2a-4dd0-bd53-afbcd9154d9d\\page_17_image_1.png",
        "extraction_date": "2025-01-25T13:25:03.565023",
        "page_number": 17,
        "image_index": 1,
        "width": 100,
        "height": 86
      }
    ]
  }
}