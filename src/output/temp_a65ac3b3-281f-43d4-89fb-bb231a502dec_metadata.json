{
  "metadata": {
    "filename": "temp_a65ac3b3-281f-43d4-89fb-bb231a502dec",
    "extraction_date": "2025-01-27T23:52:23.298697",
    "path": "research_assistant\\data\\temp_a65ac3b3-281f-43d4-89fb-bb231a502dec.pdf"
  },
  "pages": {
    "1": "Branch Use in Practice\nA Large-Scale Empirical Study of 2,923 Projects on GitHub\nWeiqin Zou∗, Weiqiang Zhang∗, Xin Xia†, Reid Holmes‡, Zhenyu Chen∗\n∗State Key Laboratory for Novel Software Technology, Nanjing University, China\n†Faculty of Information Technology, Monash University, Australia\n‡Department of Computer Science, University of British Columbia, Canada\nwqzou, zhangweiqiang@smail.nju.edu.cn, xin.xia@monash.edu, rtholmes@cs.ubc.ca, zychen@nju.edu.cn\nAbstract—Branching is often used to help developers work\nin parallel during distributed software development. Previous\nstudies have examined branch usage in practice. However, most\nstudies perform branch analysis on industrial projects or only\na small number of open source software (OSS) systems. There\nare no broad examinations of how branches are used across\nOSS communities. Due to the rapidly increasing popularity of\ncollaboration in OSS projects, it is important to gain insights\ninto the practice of branch usage in these communities. In this\npaper, we performed an empirical study on branch usage for\n2,923 projects developed on GitHub. Our work mainly studies\nthe way developers use branches and the effects of branching on\nthe overall productivity of these projects. Our results show that:\n1) Most projects use a few branches (<5) during development; 2)\nLarge scale projects tend to use more branches than small scale\nprojects. 3) Branches are mainly used to implement new features,\nconduct version iteration, and ﬁx bugs. 4) Almost all master\nbranches have been requested by contributors to merge their\ncontributions; 5) There always exists a branch playing a more\nimportant role in merging contributions than other branches; 6)\nAlmost all commits of more than 75% branches are included\nin the master branches; 7) The number of branches used in\na project has a positive effect on a project’s productivity but\nthe effect size is small, and there is no statistically signiﬁcantly\ndifference between personal projects and organizational projects.\nIndex Terms—branch use, GitHub, exploratory study\nI. INTRODUCTION\nAlong with the rapid growth of both project scale and\nteam size in modern software development, there comes an\nimportant and challenging problem: enabling developers to\ncollaborate and develop projects in parallel without interfering\nwith one another [5]. One common method to address this\nproblem is with branches within version control systems [3].\nMany advanced version control systems, such as Git1 and\nSVN2, have provided good support for the feature of branches.\nWhen developers plan to perform speciﬁc tasks such as bug\nﬁxing or feature implementation without affecting the main\nstream development, they often create a branch. Then they will\nwork on this new branch independently without interfering\nwith other developers. After they ﬁnish coding and testing,\nthey then merge their branch that they were changing back\ninto the branch they originally branched from, or they invite\n*Zhenyu Chen is the corresponding author.\n1http://git-scm.com/\n2http://subversion.apache.org/\nanother developer to help perform the merge for them [32]. In\nthis way, branching makes it possible for developers to work\non their own workspace without being disturbed or disturbing\nothers unnecessarily.\nWith the above beneﬁts of branching, many OSS projects\n(such as Python) and commercial companies (such as Mi-\ncrosoft) adopt branching strategies to facilitate the process\nof software development [5]. However, branching has a cost.\nSome developers do not fully understand branching and abus-\ning of branches can hinder development [1]. This can result\nin problems such as integration failures and release delays if\nbranches are used incorrectly.\nTo help developers better use branches, some researchers\nhave created branching best practices [55], [40], [1]. Others\ntry to learn the branch usage in practice and its potential\nimpact on software development [43], [39]. There also exist\napproaches that propose solutions to problems introduced\nby using branches [5], [36]. Unfortunately, most existing\nresearch studies are either largely based on researchers’ own\nexperience, are targeted at a small number of OSS projects,\nor are limited to individual industrial projects. To the best of\nour knowledge, there are no large-scale empirical studies on\ndevelopers’ behaviours of branch usage in practice. As such,\nwe do not yet have an overview about how branches are used\nin practice across the breadth of OSS communities.\nFortunately, GitHub3 makes it possible to deeply investigate\nbranch usage across a large number of practical projects.\nGitHub is a platform based on Git, which provides code\nhosting and distributed collaboration [26]. As of January 2017\nmore than 50 million repositories were hosted on GitHub.\nIn this paper, we investigated the current state of branch\nusage in OSS communities. Speciﬁcally, we conducted an\nempirical analysis on 2,923 GitHub projects that have been de-\nveloped over at least ﬁve years. We ﬁrst obtained an overview\nof branch usage in GitHub. Then we studied the purposes\nof branching. Next, we investigated the roles that branches\ntake in coping with contributions by others. We also studied\nthe commits ﬂowing from non-master branches into master\nbranches. Finally, we studied the impact of using branches on\nthe overall productivity of projects. Our major contributions\nare listed as follows:\n3http://github.com/\n306\n2019 IEEE 19th International Conference on Software Quality, Reliability and Security (QRS)\n978-1-7281-3927-2/19/$31.00 ©2019 IEEE\nDOI 10.1109/QRS.2019.00047\nAuthorized licensed use limited to: Nanjing University. Downloaded on May 20,2020 at 13:25:16 UTC from IEEE Xplore.  Restrictions apply.",
    "2": "• We conduct a large-scale empirical analysis on branch\nusage on OSS communities. In total, we investigate\n2,923 projects on GitHub. Our study sheds light into the\npractice of branching, and the large number of projects\ncan improve the generalizability of our results.\n• We investigate several aspects of branch usage practice\non GitHub, including the number of branches used,\nbranching purpose, the roles of branches in coping with\ncontributions by others, the commit ﬂow, and the impact\nof using branches on the overall productivity of projects.\nOur ﬁndings increase the understanding of branching in\npractice.\nII. RESEARCH QUESTIONS\nIn this paper, we aim to understand how branches are used\nin real OSS communities. Speciﬁcally, we seek to understand\nthe characteristics of branch usage and its potential impact on\nproject productivity. In order to achieve these goals, we study\nthe following ﬁve research questions.\nRQ1. How many branches does a project have and what\nkind of projects are more likely to have more branches?\nAlthough some researchers have conducted a series of\nstudies on branching [5], [43], to the best of our knowledge,\nthere are no broad investigations into the branching practices\nof OSS communities. In this RQ, we try to gain some insights\ninto how prevalently branches are used in GitHub. We further\ntry to ﬁnd out what kind of projects tend to use branches\nmore than others. The answer of RQ1 helps to gain a better\nunderstanding of current situation of branch usage in large-\nscale OSS communities.\nRQ2. What are branches used for?\nPhilips et al. [39] studied the purposes of branching in\nindustry by surveying 140 practitioners. They found that\nbranching for release and feature implementation are the most\ntwo most popular branch use types. Survey results represent\nthe belief of participants, which are primarily formed based on\npersonal experience, rather than on evidence found in empir-\nical research [14]. In this RQ, to complement Philips et al.’s\nstudy, we try to understand why developers create branches in\nGitHub by analyzing data collected from OSS communities.\nThe answer to this RQ can help us gain a better understanding\nabout the branching practice in OSS communities. It can also\nprovide a good complement to existing industrial studies, thus\nto make people hold a more complete view over branching in\npractice.\nRQ3. How many branches are requested to merge PRs?\nOn GitHub, developers can contribute to any project via pull\nrequests (PRs) [20]. Developers only need to fork the targeted\nproject and modify code in the forked repository. If they ﬁnish\ncoding and want to merge their code change into the targeted\nproject, they can submit a PR. When submitting a PR, they\nhave to specify which branch they want to merge the PR into.\nAlthough contributors can submit any PR to an arbitrary\nbranch as they wish, however, when we read contribution\ndocuments of projects in GitHub, we found that differ-\nent projects have different requirements on which branch\nthe contributors should push PRs into. For example, some\nprojects may allow contributors to submit PRs to master\nbranch while some projects forbid this practice. For example,\nproject orientechnologies/orientdb 4 explicitly re-\nquires contributors to never submit PRs to their master branch\nbecause the master branch is only used for releasing 5.\nConsidering the arbitrariness of specifying targeted branch\nby contributors and the speciﬁc requirement by projects, it\nis important to get a macro view of the current situation of\nbranches that are requested by contributors to merge their PRs.\nIn this RQ, we study the role of different branches in terms of\nreceiving outside contributions from PRs. Our results can be an\ninitial basis for practitioners or researchers to help contributors\nsubmit their PRs to the right branches more easily.\nRQ4. Do all commits go into the master branch? Generally\nspeaking, developers tend to create branches from the master\nbranch to complete speciﬁc tasks such as bug ﬁxing or feature\nimplementation. When they ﬁnish their work on the branch,\nthey may want to merge their work (in the form of commits)\ninto the master branch [9]. This inspires us to ﬁgure out\nwhether all such commits ﬂow into the master branch. In cases\nwhere this does not happen, we study how many commits are\nleft alone on the unmerged branch itself.\nThe answer of RQ4 can gain a high-level view of the\ncurrent commit ﬂow of non-master branches in the whole\nOSS community. Besides, for developers of a project, knowing\ndetailed commit ﬂow of non-master branches can also help\nthem understand what is going on within their project, which\ncan help better manage work on their branches. For example,\nthey may timely merge useful commits from non-master\nbranches into their master branches.\nRQ5. Does branch usage affect the overall productivity\nof a project?\nBranching is proposed to help developers\nfocus on their own work to avoid unnecessary interruptions\nby others [9]. In intuition, branching can facilitate the process\nof developing software. Nevertheless, little work has been\ndone to check the potential impact of branching on software\ndevelopment in OSS communities. In this RQ, we investigate\nthe effect of branch usage on project productivity. Speciﬁcally,\nwe aim to determine whether the number of branches used has\nan impact on a project’s productivity. The answer of this RQ\ncan help better identify the functionality of branch use.\nIII. METHODOLOGY\nIn this section, we describe three aspects of our methodol-\nogy: project selection, RQ design, and RQ statistical method\nselection.\nA. Studied Projects\nOur experimental subjects are selected from projects in\nGitHub. We select projects that have been existed on for at\n4http://github.com/orientechnologies/orientdb\n5http://orientdb.com/docs/last/Contribute-to-OrientDB.html\n307\nAuthorized licensed use limited to: Nanjing University. Downloaded on May 20,2020 at 13:25:16 UTC from IEEE Xplore.  Restrictions apply.",
    "3": "TABLE I\nSUMMARY OF ATTRIBUTES ON 2,923 GITHUB PROJECTS.\nAttribute\nMin\nMedian\nMax\nMean\nSt. Dev.\nAge (years)\n5.0\n6.8\n8.9\n6.9\n0.7\nCommits\n100\n422\n25, 052\n918.3\n1, 483.2\nTotal PRs\n1\n32\n4, 418\n91.1\n192.5\nTotal issues\n1\n47\n3, 465\n142.4\n284.5\nSize (MB)\n0.1\n2.0\n928.4\n12.4\n42.9\nDevelopers\n3\n15\n690\n29.8\n45.2\nleast ﬁve years (last update timestamp minus project creation\ntimestamp) by January of 2016. This condition ensures that the\nprojects are long-lived. With this criterion, we were left with\n431,879 projects. Among those projects, we only consider non-\nforked projects (i.e., projects that are not cloned from other\nprojects), as forked projects may bring bias to our conclusions\nwith their duplicate code and documents. With this condition,\nonly 304,694 projects were left.\nWe also ﬁlter out projects with fewer than 100 commits\nto avoid small scale and toy projects. If a project involves\nfewer than 3 contributors, we also remove it from our data set.\nAdditionally, since RQ3 studies the role of branches on coping\nwith contributions (PRs in GitHub) by others, each selected\nproject should have at least one closed PR (contributors can\nsubmit a PR to any branch as they wish). Considering the\nnumber of commits, contributors and closed PRs have been\nlisted in each project’s website in GitHub, we wrote a web\ncrawler to retrieve these numbers and directly compared them\nwith our threshold values. After ﬁltering, only 2,938 projects\nmet all the above criteria.\nWhen we analyzed the remaining projects, we found that\nthere were 15 projects that do not speciﬁcally target developing\nsoftware but instead focus on documenting tasks. For example,\nthe project msgpack/msgpack6, mainly focuses on manag-\ning the speciﬁcation of MessagePack format. These projects\nwere also eliminated from the 2,938 projects. Ultimately, 2,923\nGitHub projects were selected as our experimental subjects.\nTable I shows more details on our collected project data.\nIn our experiment, we downloaded each project using git\nclone. Then, for each project we retrieved all branches used\n(using git branch -r). In total, we retrieved 19,389 branches\ncreated for the 2,923 projects. We used these collected data to\nconduct our experiments and answer the ﬁve RQs.\nB. Design of RQs\nWe attempt to gain insight into the branch usage in OSS\nprojects via ﬁve RQs. In RQ1, we provide an overall view of\nbranches used in 2,923 projects. We further investigate some\ncharacteristics of projects that use relatively more branches\nduring development. In RQ2, we investigate branching purpose\nin GitHub. In RQ3, we study the branches that are requested\nfor merging PRs. We further study whether all commits of\nother branches make it into master branches in RQ4. Finally\nin RQ5, we examine the impact of branches usage on projects’\nproductivity. We combine bar plots, non-parametric statistical\nhypothesis tests, and regression models to answer our RQs.\n6https://github.com/msgpack/msgpack\nIn RQ1, we use bar plot and Wilcoxon Rank Sum test [34]\nto observe the overall usage of branches across the 2,923\nprojects. In RQ2, we manually check each branch’s content\nand then provide some descriptive statistics on the purpose\nof branch use. In RQ3, we calculate the number of pushed\npull requests (PRs) in each branch, and investigate the role\nof branches in coping with PRs in GitHub. In RQ4, we count\nthe number of commits that are unique to non-master branches\nand perform statistics to understand the ﬂowing of commits\nfrom non-master branches to master branches. In RQ5, we use\na multiple linear regression model [25] to measure the impact\nof branch usage on the overall productivity of projects. In\nparticular, we adopt Cohen’s f 2 to capture the effect size of\nbranching on project’s productivity. The detailed description\nabout the regression model and Choen’s f 2 will be presented\nin Section III-C. During our model building for RQ5, we\nalso use eight confounding factors that may affect project’s\nproductivity. These confounding factors are listed as follows:\nForks: The number of forks of a project. Outsiders (developers\nwho cannot directly commit to a project) must fork a project\nif they want to contribute to it. More forks may indicate that\nmore developers are involved in a project’s development. This\nmay affect a project’s ﬁnal productivity.\nWatchers: The number of watchers of a project. In general,\nthe more watchers a project has, the more popular it is\namong developers; a project’s popularity may affect its overall\nproductivity.\nProject age: Project’s age since its creation. A project’s age\nis calculated as the last update timestamp minus the creation\ntimestamp. A longer-lived project may have more commits\nthan a relatively short-lived project.\nProject size: Project’s size measured as total physical space\na project needs to store its data (MB). Generally speaking,\ndifferent projects with different sizes may behavior differently,\nthus leading to different project productivity.\nNumber of PRs: The number of PRs requested to merge into\nthe project. PR is a form of contributions. More PRs indicate\nthat more contributions are requested to merge into the project.\nThis may result in an increase of project productivity.\nNumber of PR comments: The number of comments made\non PRs. More comments on PRs may indicate an active\nresponse to contributions by developers. This may result in a\nquicker resolution to PRs, which may further affect a project’s\nproductivity.\nNumber of issue comments: The number of comments\nmade on issues. More comments on issues may indicate\nactive interactions among developers to ﬁx bugs. This may\nfacilitate a project’s development and ﬁnally affect a project’s\nproductivity [7].\nNumber of developers: The number of developers contribut-\ning to a project. More developers contributing to a project may\nindicate a higher project’s productivity.\nThe details about above eight confounding factors can be\nfound in Table II.\n308\nAuthorized licensed use limited to: Nanjing University. Downloaded on May 20,2020 at 13:25:16 UTC from IEEE Xplore.  Restrictions apply.",
    "4": "TABLE II\nSUMMARY OF EIGHT CONFOUNDING FACTORS ON 2,923 GITHUB\nPROJECTS.\nConfound\nMin\nMedian\nMax\nMean\nSt. Dev.\nForks\n0\n51\n9, 609\n161.7\n426.5\nWatchers\n1\n18\n3, 081\n47.0\n115.9\nAge (years)\n5.0\n6.8\n8.9\n6.9\n0.7\nSize (MB)\n0.1\n2.0\n928.4\n12.4\n42.9\nTotal PRs\n1\n32\n4, 418\n91.1\n192.5\nPR comments\n0\n43\n13, 366\n243.8\n767.5\nIssue comments\n0\n95\n13, 248\n439.4\n1, 030.2\nDevelopers\n3\n15\n690\n29.8\n45.2\nC. Statistical methods\n1) Multiple Linear Regression: Regression models are often\nused to measure the effects of several explanatory variables on\na response variable. In our study, we use a multiple linear\nregression model [25] to measure the impact of branches\nused on a project’s overall productivity, i.e., the total number\nof commits within a project. While building the regression\nmodels, we also perform the regression diagnostics with rec-\nommended criteria [14]. We log transform (i.e., x->log(x))\nthe response variable (i.e., the number of commits) to assure\nacceptable normality. We also do the log transformation on\nseveral explanatory variables as this can make the variance\nmore stable and can always improve the model ﬁt [11].\nVariance inﬂation is also controlled within the recommended\nrange [25]. All outliers are removed to avoid possible dis-\nturbance to the experimental results. In this paper, we use\noutlierTest function in the “car” package of R to detect\noutliers7. All regression models are conducted within the R\nstatistic environment [46].\n2) Cohen’s Effect Size: Based on the results of multiple\nregression models, we further use Cohen’s effect size [25]\nto gauge the effect of branches on the project’s productivity.\nSpeciﬁcally, we use Cohen’s f 2 to measure the effect size for\na linear regression model. Cohen’s f 2 is calculated as\nR2\nAB −R2\nB\n1 −R2\nAB\nHere R2\nB is the variance accounted by variable set B. The R2\nAB\nis the variance accounted by variable set B and A together.\nIn this paper, B is the set of eight confounding factors as\nmentioned in Table II and A is the number of branches used.\nA threshold value of 0.02 for f 2 is suggested as a minimum\nvalue to determine that the effect is small [25]. 0.15 and 0.35\nis suggested as the minimum values for median and large\neffects.\nIV. EXPERIMENTAL RESULTS\nIn this section, we present empirical results for the ﬁve RQs.\nA. RQ1: How many branches does a project have and what\nkind of projects are more likely to have more branches?\nResults. In RQ1, we study the general characteristics of\nbranches used in GitHub. Speciﬁcally, we investigate how\nmany branches are used by developers during development.\n7http://CRAN.R-project.org/package=car.\n0\n200\n400\n600\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28 >=30\nNumber of Branches\nNumber of Projects\nFig. 1. General statistics on the number of branches used in 2,923 projects.\nAdditionally, we try to identify what kind of projects tend\nto use more branches. We conduct our experiments on 2,923\nGitHub projects. For each project, we ﬁrst retrieve all branches\ncreated within the project. Then we count how many branches\neach project uses.\nFigure 1 shows the general statistics on the number of\nbranches used in 2,923 projects. The horizontal axis is the\nnumber of branches created within a project. The vertical axis\nrepresents the number of projects containing a certain number\nof branches during development. Most projects (87.9%) create\nless than ﬁve branches. Only 91 projects create more than\n30 branches, while 534 projects have only one branch. In\nother words, 18.3% (534/2,923) projects do not create other\nbranches but directly develop on the master branch.\nFinding 1. Most projects (87.9%) create fewer than ﬁve\nbranches during their development. A small number of\nprojects (3.1%) create at least 30 branches; 18.3% projects\nonly develop on their master branches.\nIn Figure 1, we also observe that different projects create\ndifferent numbers of branches during their development. Some\nuse only a few branches while some others create many\nbranches. To understand what kind of projects tend to use\nmore or fewer branches,we divide 2,923 projects into different\ngroups by speciﬁc project attributes (such as project’s scale\nand popularity) to examine the branch usage in those projects.\nWe consider three project features, namely project size, forks\nnumber, and owner type.\nProject size measures a project’s scale, which represents\nhow much physical space a project needs to store its data\n(KB). The Forks count describes how many times a project is\nforked by others. In GitHub, if a developer wants to contribute\nto a project, he/she generally needs to fork it to his/her own\naccount. Thus, forks number can be used as a proxy metric\nof a project’s popularity among developers. Owner type can\ntell us whether a project is owned by a personal user or an\norganization, which is obtained by searching relevant item\n(i.e., “type”) in the details of individual repository by using\nGitHub API (i.e., “GET /repos/:owner/:repo”).\nWe divide projects into groups based on each of the above\n309\nAuthorized licensed use limited to: Nanjing University. Downloaded on May 20,2020 at 13:25:16 UTC from IEEE Xplore.  Restrictions apply.",
    "5": "0\n200\n400\n600\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28 >=30\nNumber of Branches\nNumber of Projects\nSize_Level\nHigh\nMedian\nLow\n(a) branches used in projects grouped by size\n0\n200\n400\n600\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28 >=30\nNumber of Branches\nNumber of Projects\nForks_Level\nHigh\nMedian\nLow\n(b) branches used in projects grouped by forks\nnumber\n0\n100\n200\n300\n400\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28 >=30\nNumber of Branches\nNumber of Projects\nOwner_Type\nOrganization\nUser\n(c) branches used in projects grouped by owner\ntype\nFig. 2. Branches used in projects grouped by owner type, forks number and size.\nthree project attributes. Unlike owner type, which has only\ntwo enumeration values (“personal user” and “organization”),\nproject size and forks number are numeric values. For each of\nthe numeric project attributes, we divide the numeric values\ninto three groups: small, median, and large. For project size\nand forks number, we ﬁrst compute the 1st quartile, the\nmedian, and the 3rd quartile of all values. Projects with the\nmeasure smaller than the 1st quartile are assigned to the\nsmall group. If the value is larger than the 3rd quartile, the\nproject is assigned to the large group. The remaining projects\nare assigned to the median group. Figure 2(a)-2(c) presents\nbranches used in projects grouped by size, forks number and\nowner type respectively. The horizontal axis is the number of\nbranches used in a project. The vertical axis is the number of\nprojects which have a certain number of branches. Different\ncolours represent different groups.\nIn Figure 2(a), when the number of branches is no more\nthan three, the numbers of projects with small size, median\nsize, and large size are similar. When the number of branches\nincreases above 3, large scale projects tend to represent a much\nlarger proportion compared to small and median projects.\nThis means large-scale projects are more likely to use more\nbranches during development. A similar phenomenon can also\nbe observed in Figure 2(b). Thus, a more popular project\ntends to use more branches during development. As shown in\nFigure 2(c), when there are less than eight branches, personal\nprojects occupy a larger proportion than organization-owned\nprojects. As the branch count increases, the difference between\ntwo types of projects becomes small. For projects with more\nthan 30 branches, organization-based projects are the majority.\nThis suggests that projects created by personal users are\nmore likely to use fewer branches; while projects created by\norganizations are more likely to use more branches during their\ndevelopment.\nNext, we apply Wilcoxon Rank Sum test with Bonferroni\ncorrection [2] and Cliff Delta Effect Size [10] to check\nthe statistical signiﬁcance of the above-observed differences\nbetween different groups, i.e., user vs. organization, high\nvs. median, median vs. low, and high vs. low. We apply\nBonferroni\ncorrection\nto\nadjust\np-values\nfrom\nmultiple\ncomparisons. We ﬁnd that the differences in branch usage\nbetween\ndifferent\ngroups\nare\nall\nstatistical\nsigniﬁcant\n(p-value<0.05): for project size or owner type, all\np-values<2.2e−16; for forks number, the p-values for high\nvs. median, median vs. low and high vs. low are 0.024,\n2.68e−13 and < 2.2e−16 respectively. However, all differences\nexcept two are small evaluated by the Cliff Delta effect size\n(|d|<0.147 \"negligible\", |d|<0.33 \"small\",\n|d|<0.474 \"medium\", otherwise \"large\"):\nfor\nproject size, the difference between high and low groups is\nlarge, with effect size value being 0.543 (>0.474); for forks\nnumber, the difference between median and low groups is\nnegligible, with effect size value being 0.067 (<0.147); all\nother differences are small with their effect size values being\nlarger than 0.147 but smaller than 0.33.\nFinding 2. Large scale projects tend to use signiﬁcantly\nmore branches than small scale projects; popular projects or\nprojects owned by organizations tend to use slightly more\nbranches during software development.\nImplications. In Finding 1, we note that most (87.9%) projects\nuse no more than ﬁve branches during their development.\nHowever, it also can be observed that either some projects\n(18.3%) only work on the master branch or some projects\n(3.1%) use many branches (>30 branches). For these projects,\nin-depth analysis is desired. For example, we are not clear on\nwhy some projects create a lot of branches, what problems\nthey face when they try to manage many branches. Moreover,\nwhy do some projects, including organizational projects which\nmay involve many developers, only develop on master branch?\nIn Finding 2, we ﬁnd that more popular, larger or organiza-\ntional projects tend to use more branches than others, which\npropose more research questions to investigate, e.g., whether\nthese projects might face more challenges when managing\nmore branches, and what problems they exactly face and how\ndo they try to address them. The answers of these research\nquestions can 1) provide some guidance for other practitioners\nwho face similar problems, and 2) inspire more researchers or\n310\nAuthorized licensed use limited to: Nanjing University. Downloaded on May 20,2020 at 13:25:16 UTC from IEEE Xplore.  Restrictions apply.",
    "6": "practitioners make more efforts to help solve real problems in\nbranching practice in OSS communities.\nB. RQ2: What are branches used for?\nIn RQ2, we try to gain insights into the problem of why\nbranches are created in GitHub. Particularly, considering mas-\nter branches are used for projects’ main line development by\ndefault, in this RQ, we only explore the branching purpose\nof non-master branches. Speciﬁcally, we randomly sample\n300 branches from 16,466 non-master branches. This sample\nsize is comparable with existing work [18] that 350 out of\n>20,000 unmerged PRs are randomly selected to study why\nPRs are not merged.\nWe adopt a three-step process to conduct the branching\npurpose categorization: First, the ﬁrst two authors selected\nthe ﬁrst 100 branches and discussed their categories. Specif-\nically, for each non-master branch, they manually read its\ncommit logs, changed code and relevant conversations of\ncommits/issues/PRs on GitHub, in order to understand what\nactivities (such as bug ﬁxing, testing) developers perform on\nit. Then they took the major activity as the branching purpose\nfor each branch. The results contain 6 categories shown in\nTable III (with Dependency Conﬁguration and Others being\nexcluded).\nThen they tried to classify the remaining 200 branches\nbased on the 6 categories independently. They left the\nbranches which cannot be classiﬁed for later discussion.\nFleiss Kappa [15] was used to measure the overall agreement\nbetween the two labelers. The Kappa value was 0.78, which\nindicates a substantial agreement between them.\nAt last, for those branches that they cannot classify into\nthe initial categories or disagree with each other on certain\nbranches, they invited another senior developer with 12 years\ndevelopment experience in industry to help them make the\nﬁnal decision. As a result, a new category, i.e., Dependency\nConﬁguration was added to the original 6 categories. There are\n7 branches being created for other purposes (such as doing\nnothing, experimenting with a framework) or unknown pur-\npose that we cannot identify after reading relevant data items.\nWe placed them into the Others category. Table III shows the\nﬁnal categories of branching purposes of the sampled 300 non-\nmaster branches.\nAs shown in Table III, we summarized 8 categories of\nreasons for which developers create branches, from bug ﬁxing\nto version iteration. From the table, we can ﬁnd that approx-\nimately 83% branches are created for feature implementation\n(41.7%), version iteration (24.7%) and bug ﬁxing (16.7%).\nThe remaining branches (approx. 15%) target at testing, doc-\numentation, etc. Our ﬁndings are consistent with [39]’s study,\nwhich also found that feature implementation and version\niteration are also the most two popular branching types among\ndevelopers.\nSpecially, 58.4% branches target at two major activities\nduring software development, i.e., bug ﬁxing and feature\nimplementation. This to some extent, implies that developers\nmay have recognized branches’ potential in helping them\nTABLE III\nCATEGORIES OF BRANCHING PURPOSE.\nPurpose\nDescription\nNum.\n%\nBug Fixing\nA branch aims to ﬁx bugs.\n50\n16.7\nFeature\nImplementation\nA branch aims to implement\nfeatures.\n125\n41.7\nTesting\nA branch aims to test code, de-\nploy test platform or maintain\ntest cases, etc.\n16\n5.3\nCode Structure\nOptimization\nA branch aims to perform code\nrefactoring or style formatting.\n12\n4\nDocumentation\nA branch aims to maintain a\nproject’s documents, such as its\nwebsite, license declaration, etc.\n10\n3.3\nDependency\nConﬁguration\nA branch aims to declare a\nproject’s plugins or dependent\nlibraries’ versions.\n6\n2\nVersion\nIteration\nA branch aims to certain ver-\nsion development, prepare for\nrelease, and version upgrade. In\nsuch a branch, bug ﬁxing and\nfeature implementation are two\nmajor activities.\n74\n24.7\nOthers\nA branch which cannot be put\ninto the above categories goes\nto this category. E.g., a branch\nis created for doing nothing.\n7\n2.3\nbetter perform independent single task (i.e., bug or feature)\nin practice; After diving into those branches (24.7%) that aim\nat version iteration, we ﬁnd that 1) 25% branches are created\nfor version release; 2) 12% branches are created for a single\nversion development; 3) others (63%) mainly focus on version\nbumping, i.e., upgrading product to a higher version. This to\nsome extent, indicates that branches may play an important\nrole in helping developers manage their products’ versions.\nDespite the importance of testing during development, it\nseems that developers are less likely to build speciﬁc branches\nto conduct pure testing tasks, with only 5.3% branches fo-\ncusing on testing. Similarly, other kinds of activities, such as\ndocumentation, refactoring, are also not reﬂected too much in\na single particular branch.\nFinding 3. Developers mainly use branches to implement\nfeatures, ﬁx bugs, and conduct version iteration. Very few\ndevelopers would create particular branches for testing,\ndocumentation, etc.\nImplications. We ﬁnd that branches are mainly still focusing\non bug ﬁxing and feature implementation (both of these\ntwo activities play an important role in version iteration). In\npractice, developers can also submit pull requests to perform\nbug ﬁxing and feature implementation activities. Thus, it\nwould be interesting to investigate the difference between\nthe pull requests and branching in bug ﬁxing and feature\nimplementation.\nBesides, during our investigation into branching purpose, we\nﬁnd that it is prevalent that branches are not fully described\nin an explicit way. For example, we ﬁnd that only 69 out of\n300 sampled branches have easy-to-understand names. One\nmay have to spend lots of time on reading changed code and\ncommit logs, to infer the branching purpose. This may place\na great burden on project moderators who need to manage\n311\nAuthorized licensed use limited to: Nanjing University. Downloaded on May 20,2020 at 13:25:16 UTC from IEEE Xplore.  Restrictions apply.",
    "7": "0\n500\n1000\n1500\n1 2 3 4 5 6 7 8 9 10 1112 13 14 1516 17 18 2122 23 25 2630 37\nNumber of Branches\nNumber of Projects\nFig. 3. Branches that are requested to merge PRs.\nand maintain lots of branches. Thus, it would be valuable\nif techniques can be developed to automatically provide a\ndescriptive summary for a branch, by collecting and analyzing\ndifferent kinds of branching information, e.g., changed code,\ncommit logs, and branch names.\nC. RQ3: How many branches are requested to merge PRs?\nIn GitHub, developers use PRs to contribute to others’\nprojects. A PR contains detailed code change or document\nmodiﬁcation to the target project by developers. Developers\nspecify the destination branch (i.e., the branch that developers\nwant to have their PRs merged into) for the PRs. Since a\nproject may have several branches during their development,\nwhich inspires us to further investigate the prevalence of\nbranches within a project that are requested by developers to\nmerge their PRs.\nFor each project, we download all PRs that were submitted\nby developers. We then retrieve the destination branch of each\nPR with the help of GitHub APIs for PRs8. Finally, we count\nthe number of PRs submitted to each destination branch within\nthe project.\nAfter recording each branch’s state of receiving PRs, we\nﬁnd that only 6,159 out of 19,389 branches have ever been\nrequested to merge PRs. For those 6,159 branches, we further\ninvestigate how many branches have been requested to merge\nPRs in a project. Figure 3 shows the detailed results. In\nFigure 3, the horizontal axis is the number of branches that\nare requested to merge PRs. The vertical axis is the number\nof projects.\nFrom Figure 3, we can ﬁnd that more than 90% projects\n(2,723/2,923=93.2%) have less than 5 branches that are re-\nquested to merge PRs by contributors, among which more\nthan 60% projects (1,756/2,723=64.5%) have only one branch\nhaving been requested by merging PRs. There are extremely\nfew projects (1.9%) that have more than 10 branches re-\nquested by merging PRs. Next, we speciﬁcally study master\nbranches and ﬁnd that almost all projects’ master branches\n8https://developer.github.com/v3/pulls/\n(2,909/2,923=99.5%) have been requested to merge PRs by\ncontributors.\nAfter analyzing the overall usage of PRs in each project,\nwe further investigate those projects which have more than\ntwo branches with PR merging requests. We ﬁnd that 1,135\nprojects have more than two branches having been asked for\nmerging PRs. For those projects, we investigate whether all\nbranches weight the same on being requested by merging PRs.\nThe data shows that 1,121 out of 1,135 projects always have\none branch having more than 50% PRs merging requests.\nFinding 4. 90% projects have less than 5 branches that are\nrequested to merge PRs in GitHub. There always exists a\nbranch that is mainly targeted by contributors to merge PRs\nfor each project. About 60% projects have only one branch\nrequested to merge PRs. Almost all master branches (99.5%)\nhave been requested to merge PRs.\nImplications. In RQ3, we mainly study the current situation\nof branches that are requested to merge PRs by contributors.\nOne interesting observation is that almost all projects’ (99.5%)\nmaster branches are pushed PRs by contributors. However,\nas mentioned previously in Section II, some projects have\ntheir own requirement in to which branch a PR is supposed\nto submit (e.g., contributors should not submit PRs to the\ntargeted project’s master branch). This contrary to some extent\nindicates that not all contributors are aware of such require-\nments. Those PRs with incorrectly targeted branches may be\nrejected and be asked to re-merge to the right branches, which\nwill affect contributors’ passion on further contribution, and\nincrease project maintainers’ workload in coping with PRs.\nThus, an effective way to identify the right targeted branch for\ncontributors is very desirable. Researchers or practitioners may\nneed to build an automated approach that can help contributors\nmore easily ﬁnd the right branch to merge into, such as\ndeveloping recommending tools or providing more explicit and\nindicative information of targeted branches.\nD. RQ4: Do all commits go into the master branch?\nIn this RQ, we investigate the prevalence of commits\nﬂowing into the master branch from other branches. In other\nwords, we try to gain some insights into the validity of work\non other branches. In total, we examined 19,389 branches\non 2,923 projects (2,923 master branches and 16,466 other\nbranches). For each project, we ﬁrst ﬁnd its master branch9\n(M) and other branches (BranchSetA). Then for each branch\n(B) within BranchSetA, we use the commands “git log --\npretty=oneline B --not M --” and “git log --pretty=oneline M\n--not B --” to retrieve the number of commits which are only\nin the branch B or in the master branch M. Since the projects\nwe collected have various number of commits in them, we\nuse percentage of total commits that are only in master or\nonly in a non-master branch, in order to better observe the\nwhole situation of commit ﬂow within GitHub.\n9The master branches are identiﬁed by retrieving the default base branch\nof projects hosted in GitHub.\n312\nAuthorized licensed use limited to: Nanjing University. Downloaded on May 20,2020 at 13:25:16 UTC from IEEE Xplore.  Restrictions apply.",
    "8": "Figure 4 shows the commit ﬂow of master and non-master\nbranches. In Figure 4(a), we ﬁnd that on the whole situation,\nthe percentage of commits which are left on the non-master\nbranches is very low. It seems that at least 75% branches’ all\ncommits are almost contained in master branches (with at most\n0.56% commits are not included in the master branch). We fur-\nther ﬁnd that 50% branches have only one commit that is not\nin master branches; and about 40% (6,460/16,466) branches’\nall commits go into their master branches. In Figure 4(b), we\nobserve that the minimum value of the boxplot is also 0, which\nmeans there are branches (actually 373 branches from 278\nprojects) containing all commits from their master branches.\nFrom the 50% quantile value, we can ﬁnd that, nearly 25%\ncommits of half master branches are not contained in their\nnon-master branches, which is much more than the number\n(0.7%) of commits unique to a non-master branch. Comparing\nquantile values of Figure 4(a) with those of Figure 4(b), we\ncan ﬁnd that master branches always have many more commits\nthat are not in non-master branches.\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●●\n●\n●●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n●\n0.00\n0.01\n0.02\n0.03\n0.04\n0.05\nUnique Commits in Non−master Branches\nPercent\n(a) non-master branches\n0.00\n0.25\n0.50\n0.75\n1.00\nUnique Commits in Master Branches\nPercent\n(b) master branches\nFig. 4. Commit ﬂow of master and non-master branches\nFinding 5. Almost all commits of most branches (>75%)\nﬁnally ﬂow into their master branches. In comparison, more\nthan 97% branches (16,093/16.466=97.7%) do not include\nall commits from their master branches.\nImplications. From the results of RQ4, we ﬁnd that some\ncommits only belong to non-master branches or master\nbranches. For those unique commits, it would be helpful if\nsome techniques can be proposed to summarize these unique\ncommits and provide supportive information to further indicate\nwhat is going on in each branch. In this way, developers\nworking on either non-master branches or master branches\ncan feel more free to merge work from other branches without\nunnecessary conﬂicts or duplicate work.\nE. RQ5: Does branch usage affect the overall productivity of\na project?\nBranching is a method that can help developers focus\non their own development task without hindering, or being\nhindered by others. In this way, we assume that branching may\nfacilitate development. To our best knowledge, the impact of\nbranch usage on development in large OSS communities has\nnot been studied. In this RQ, we quantitatively measure the\nimpact of branch usage on the overall productivity of projects.\nOur experiment includes two parts. The ﬁrst part studies\nthe impact of branches used on project’s productivity. The\nsecond part investigates whether the results are different\nbetween personal projects and organization-based projects.\nWe use a multiple linear regression model to measure the\nimpact of branch usage on project’s productivity. Since code\ncontributions are always encompassed in the form of commits,\nthe number of commits is used as a proxy measure of\ndevelopers’ productivity [13]. Following existing studies [51],\n[17], [50], we also use the commit count to measure projects’\nproductivity. Speciﬁcally, we use the number of commits\nwithin master branch as a proxy of a project’s productivity\nand use the number of branches as a proxy of branch usage.\nWe aim to discover whether the more branches are used,\nthe more likely a project will have more commits on the\nmaster branch. Since there are other factors (such as project\npopularity and developers’ interaction) that can also affect\nproject’s productivity, we also use other eight factors listed\nin Table II as confounding factors.\nAs mentioned in Section III, we use Cohen’s f 2 to measure\nthe effect size of branch usage on a project’s productivity. To\nmeasure effect size, we ﬁrst build a model with all explanatory\nvariables, i.e., the factor brCnt (the number of branches) and\nother eight confounding factors. Then we build another model\nwith only eight confounding factors. We use each models’\nAdjusted R-squared to calculate the Cohen’s f 2 as the\nbranches’ effect size on each project’s productivity.\nSince some explanatory variables have large numeric scales,\nwe performed log transformation on them and outliers are\nremoved. The residual distribution is found to have acceptable\nnormality and the variance inﬂation is also within recommend-\nable ranges [25].\nTable IV and Table V show the results of two models. From\nthe two tables, we can ﬁnd that the project’s ﬁnal productivity\n(i.e., the number of commits) increases with the number of\nbranches, developers, PRs, issue comments and project age;\nthe ﬁnal productivity decreases with the number of forks and\nwatchers of projects.\nAs can be seen in Table IV and Table V, the R2 for\nmodels that includes and excludes brCnt is separately 0.625\nand 0.616. Thus the Cohen’s\nf 2 is (0.625-0.616)/(1-\n0.625)=0.024. Since 0.024 is bigger than the minimum value\n0.02 for a small effect but smaller than the minimum value\n0.15 for the median effect, we can conclude that the branch\nusage does have a positive effect on project’s productivity,\nalthough the effect is small.\nFinding 6. The number of branches used within a project\nhas a positive impact on a project’s productivity, despite of\na small effect measured by Cohen’s effect size. This means,\nto some extent, the more branches a project has, the more\nﬁnal commits a project has.\nAfter examining the effect of branch usage on project pro-\nductivity on all 2,923 projects, we further investigate whether\nthe effect is different between projects owned by personal\nusers and by organizations. We divide 2,923 projects into two\ngroups: personal projects and organizational projects. There\nare 1,891 personal projects and 1,032 organizational projects,\n313\nAuthorized licensed use limited to: Nanjing University. Downloaded on May 20,2020 at 13:25:16 UTC from IEEE Xplore.  Restrictions apply.",
    "9": "TABLE IV\nMULTIPLE REGRESSION MODEL FOR BRANCH USAGE (BRCNT) AND EIGHT\nCONFOUNDING FACTORS ON 2,923 PROJECTS.\nVariable\nT Value\nSigniﬁcance\n(Intercept)\n17.4\np<.001 ***\nbrCnt\n8.8\np<.001 ***\nlog(forks count+0.5)\n-9.2\np<.001 ***\nlog(watchers count+0.5)\n-3.5\np<.001 ***\nage\n6.6\np<.001 ***\nlog(project size)\n43.7\np<.001 ***\ndeveloper\n9.4\np<.001 ***\nPRs\n4.8\np<.001 ***\nlog(PR comments)\n4.7\np<.001 ***\nlog(issue comments)\n8.3\np<.001 ***\nSignif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\nF-statistic = 542.9, p-value: <0.001. R2 = 0.625\nThe response variable is log(total commits).\ncontaining 9,290 and 10,099 branches respectively.\nFor personal projects and organizational projects, we sep-\narately build two models in Tables IV and V to ﬁnd the R2\nto further calculate the Cohens’ f 2. The F Statistics of four\nmodels are all signiﬁcant (p-value<0.001). The detailed\nresults can be found in Table VI\nFrom Table VI, we can ﬁnd that the Cohen’s f 2 values of\nboth models are larger than 0.02 (the minimum value for a\nsmall effect) but are smaller than 0.15 (the minimum value\nfor a median effect). This means the number of branches\nindeed has a small effect on the productivity of both personal\nand organizational projects. However, despite organizational\nprojects tend to use more branches than personal projects\n(which can be observed in RQ1), the number of branches does\nnot have a stronger effect on the productivity of organizational\nprojects than that of personal projects (with both Cohen’s f 2\nvalues being almost equal, i.e., 0.0277 vs. 0.0265).\nFinding 7. The number of branches has a small effect on the\nﬁnal productivity of projects created by personal users and\norganizations, and there is no statistically signiﬁcantly differ-\nence between personal projects and organizational projects.\nImplications. In this paper, we focus on how branch usage\naffects a project’s commits productivity. We ﬁnd the branch\nuse has a small effect on a project’s overall productivity\nmeasured by Cohen’s f 2. It would be interesting to investigate\nhow branch usage affects other OSS development activities\nsuch as developer’s productivity (e.g., bug ﬁxing or feature\nimplementation) or software maintainability (e.g., conﬂicts\ninducing by merging branches). By doing so, we are likely\nto gain a more complete understanding of the functions of\nbranches.\nV. THREATS TO VALIDITY\nGeneralization of Findings. In this paper, we try to gain\nsome insights into the branch usage in OSS communities\nby conducting experiments on 2,923 GitHub projects. Since\nthere are also other OSS communities (such as SourceForge\nand BitBucket), we cannot guarantee that our conclusions\non GitHub can be generalized to other OSS communities.\nHowever, with the great popularity of GitHub for OSS de-\nvelopment and the large scale of our experiments, we think\nTABLE V\nMULTIPLE REGRESSION MODEL FOR CONFOUNDING FACTORS.\nVariable\nT Value\nSigniﬁcance\n(Intercept)\n16.7\np<.001 ***\nlog(forks count+0.5)\n-9.8\np<.001 ***\nlog(watchers count+0.5)\n-3.5\np<.001 ***\nage\n6.5\np<.001 ***\nlog(project size)\n45.9\np<.001 ***\ndeveloper\n9.3\np<.001 ***\nPRs\n5.5\np<.001 ***\nlog(PR comments)\n5.7\np<.001 ***\nlog(issue comments)\n8.2\np<.001 ***\nSignif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\nF-statistic = 585.9, p-value: <0.001. R2 = 0.616\nThe response variable is log(total commits).\nTABLE VI\nADJUSTED R-SQUARED (R2) OF REGRESSION MODELS BUILT ON\nPROJECTS OWNED BY PERSONAL USERS AND ORGANIZATIONS.\nowner\nwith brCnt\nwith no brCnt\nF value\nConhen’s f2\nusers\n0.5774\n0.5657\np<0.001\n0.0277\nOrg.\n0.6268\n0.6169\np<0.001\n0.0265\nthe ﬁndings on GitHub can reveal some insights into the\npractice of branching in OSS communities. In future, we plan\nto perform our experiments on other OSS platforms to better\ngeneralize our ﬁndings.\nPrivate Projects. In this paper, we only consider projects that\nare available in GitHub. This may make us miss some private\nprojects that are inaccessible to the public in GitHub. These\nmissing projects may bring some bias to our concluded ﬁnding\nacross the GitHub platform. However, considering the large\nscale of our experiments, we believe our ﬁndings can still be\ngeneralized to other projects.\nImplicit Merged Commits. When examining commit ﬂows in\nRQ4, we take commits only occurring in non-master branches\nas commits that are not merged into the master branch. How-\never, since developers may use rebase or cherry-pick\nprovided by Git to manipulate commits, some seemingly\nunmerged commits may have been merged into the master\nbranch [26]. These implicit merged commits may indicate a\nhigher ﬂowing ratio of commits into the master branch than\nwe have observed in RQ4. Although we are unable to track\nthese commits, we think our ﬁndings of RQ4 can shed some\nlight into the trend of how commits ﬂow between branches.\nMeasurement of Project Productivity. We use the number\nof commits as a project’s overall productivity, as has prior\nwork [51], [17]. In particular, we only take the commits\nof master branch into account without considering other\nbranches. Since some useful work may stay in other branches\nwithout being merged into the master branch, this might bring\nsome bias to our arrived conclusions. However, since it is hard\nto identify whether all unmerged commits from other branches\nare useful, and it is very likely that most useful commits would\ngo into the master branch, we think only using the commits\nof master branch is also acceptable.\nVI. RELATED WORK\nStudies on Branching. There are some studies similar to\nours. Bird et al. showed that developers working on Windows\n314\nAuthorized licensed use limited to: Nanjing University. Downloaded on May 20,2020 at 13:25:16 UTC from IEEE Xplore.  Restrictions apply.",
    "10": "use branches to divide work into tasks and teams [6]. They\nalso found some problems related to merging branches in\nWindows [5]. Phillips et al. conducted a survey among indus-\ntrial developers and gained insights into the best branching\nstrategy in practice [39]. Shihab et al. investigated the effect\nof different branching strategies on software quality [43].\nHua found that branches are often used during Linux kernel\ndevelopment, and cross-branch porting is frequent and error-\nprone in practice [21]. These studies mainly focus on industrial\nbranching practice or are limited to a small number of speciﬁc\nOSS projects. To the best of our knowledge, we are the ﬁrst\nto conduct a large-scale empirical study of branch usage on a\nbroad collection of OSS communities.\nResearchers also have made several efforts to tackle the\nproblems of using branches in practice. Bird et al. proposed\nto remove low beneﬁt but high cost branches to reduce the\nintegration delays [5]. Tarvo et al. [45] and Michaud [36]\nproposed to track commits from different branches to improve\nthe maintainability of software. Kerzazi proposed to use social\nnetwork to build better branch strategies to facilitate the\nsoftware development [28]. Costa et al. developed TIPMerge\nto recommend developers to merge commits from different\nbranches [12]. Kovalenko et al. emphasized that it was im-\nportant to properly cope with branches when calculating ﬁle\nmodiﬁcation histories [29]. We studied a different problem and\nour ﬁndings also projected some insights into the best practices\nof branching and potential related problems to be solved.\nSome researchers have also developed some guidelines for\nusing branches. Berczuk and Appleton guided people when\nto branch and how to adopt the right branch structure [4].\nWingerd et al. gave some high-level best practices of using\nbranches in software management [55]. Arve studied how to\nuse advanced branching strategies to facilitate the development\nin Agile projects [3]. Appleton et al. described some branch\npatterns for parallel software development [1]. Premraj et\nal. discussed the pros and cons of branches and presented\nsome guidelines on when and how to branch [40]. There\nalso exist some lively discussions or speciﬁc documents on\nbranching and merging over Internet. For example, Linus\nTorvalds provided some branching and merging guidance for\nGit users in an email thread [31]. Microsoft documented\nsome practical advice on branching strategies in the Team\nFoundation Server branching guide [22]. These studies mainly\nprovided some best practices of branching based on personal\nexperience. We studied the actual practice of branching in\n2,923 real GitHub projects and investigated different aspects\nof branch usage.\nStudies on GitHub. A great number of studies have been\nconducted on GitHub, with focuses ranging from pull-based\nmechanism, social coding to testing and being productive on\nGitHub [57], [37], [38], [51], [26], [53].\nZhu et al. investigated the effectiveness of pull-based mech-\nanism compared to patch-based methods [57]. Gousios et\nal. studied the challenges of pull-based development from\nboth the contributors’ and integrators’ perspectives [19], [20].\nThey further found that 40% PRs do not appear as merged\neven though they have been merged [27]. Some researchers\nexplored how social and technical factors may affect the\nevaluation of PRs [47], [18], [56]. Veen et al. proposed to\nrank PRs to help developers better handle PRs [49]. Different\nfrom above studies, we studied a new aspect of PRs, i.e., the\ndestination branches of PRs.\nVasilescu et al. found that the gender and tenure diversity,\nthe adoption of continuous integration, would affect a project’s\nproductivity [51], [52]. They also studied how context-switch\nwould affect developers’ productivity [52]. Casalnuovo et al.\nfound that both social links and language experience have an\ninﬂuence on both developers’ and projects’ outcomes [8]. We\nlooked into a new factor, i.e., branch usage, that affects a\nproject’s productivity.\nVendome et al. studied the license changing problem [54].\nRay et al. measured the naturalness of buggy source code [41]\nand explored how programming languages would affect code\nquality [42]. Silva et al. and Tufang et al. did an exploration\ninto the code smells [44] and test smells [48]. Fowkes et al.\ntried to mine APIs across GitHub [16]. Ma et al. explored how\ndevelopers coped with cross-project bugs [33]. Lee et al. found\nthat developers used rockstars to better choose and contribute\nto projects in GitHub [30]. Jiang et al. found that creators’\nstatus affected developers’ forking behavior [23]. Marlow et\nal. studied impression formation in GitHub [35]. Jiang et al.\nstudied how projects get disseminated across GitHub [24].\nUnlike them, we considered branch usage in GitHub.\nVII. SUMMARY\nIn this paper, we conduct an exploratory study of branch\nusage in 2,923 OSS projects hosted on GitHub. We ﬁrst\ninvestigate how branches are used in 2,923 projects. We\nﬁnd that most projects have less than ﬁve branches during\ndevelopment and less than 20% projects only develop on\ntheir own master branches without creating other branches.\nThen, we study the branching purpose in GitHub, we ﬁnd that\n83% branches are created by developers to conduct feature\nimplementation, version iteration, and bug ﬁxing. We also\nﬁnd that almost all master branches of 2,923 projects have\nbeen requested to merge contributions by developers. When\nstudying the commits of branches, we ﬁnd that 75% branches’\nmost commits are contained on their master branches. Finally,\nwe investigate the impact of branch usage on project’s pro-\nductivity. We ﬁnd that the more branches a project has, the\nmore commits the project has; but the impact is considered\nsmall measured by Cohen’s effect size. Our ﬁndings provide\ninsight into the situation of the current practice of branching in\nOSS communities on GitHub. Our experimental data sets are\navailable online: https://github.com/SurfGitHub/branchStudy.\nACKNOWLEDGMENTS\nThe work is supported partly by the National Natural\nScience Foundation of China (61690201) and the Fundamental\nResearch Funds for the Central Universities (021714380017,\n021714380018).\n315\nAuthorized licensed use limited to: Nanjing University. Downloaded on May 20,2020 at 13:25:16 UTC from IEEE Xplore.  Restrictions apply.",
    "11": "REFERENCES\n[1] B. Appleton, S. Berczuk, R. Cabrera, and R. Orenstein. Streamed lines:\nBranching patterns for parallel software development. In Proceedings\nof PloP, volume 98, 1998.\n[2] R. A. Armstrong. When to use the bonferroni correction. Ophthalmic\nand Physiological Optics, 34(5):502–508, 2014.\n[3] D. Arve. Branching strategies with distributed version control in agile\nprojects. pages 1–12, 2010.\n[4] S. P. Berczuk and B. Appleton.\nSoftware conﬁguration management\npatterns: effective teamwork, practical integration.\nAddison-Wesley\nLongman Publishing Co., Inc., 2002.\n[5] C. Bird and T. Zimmermann. Assessing the value of branches with what-\nif analysis. In Proceedings of the ACM SIGSOFT 20th International\nSymposium on the Foundations of Software Engineering, page 45. ACM,\n2012.\n[6] C. Bird, T. Zimmermann, and A. Teterev. A theory of branches as goals\nand virtual teams. In Proceedings of the 4th International Workshop on\nCooperative and Human Aspects of Software Engineering, pages 53–56.\nACM, 2011.\n[7] C. Casalnuovo, P. Devanbu, A. Oliveira, V. Filkov, and B. Ray. Assert\nuse in github projects.\nIn Proceedings of the 37th International\nConference on Software Engineering-Volume 1, pages 755–766. IEEE\nPress, 2015.\n[8] C. Casalnuovo, B. Vasilescu, P. Devanbu, and V. Filkov.\nDeveloper\nonboarding in github: The role of prior social links and language expe-\nrience. In Proceedings of the 2015 10th Joint Meeting on Foundations\nof Software Engineering, pages 817–828. ACM, 2015.\n[9] S. Chacon and B. Straub. Pro git. Apress, 2014.\n[10] N. Cliff. Ordinal methods for behavioral data analysis. Psychology\nPress, 2014.\n[11] J. Cohen, P. Cohen, S. G. West, and L. S. Aiken.\nApplied multiple\nregression/correlation analysis for the behavioral sciences. Routledge,\n2013.\n[12] C. Costa, J. Figueiredo, L. Murta, and A. Sarma. Tipmerge: recommend-\ning experts for integrating changes across branches. In Proceedings of\nthe 2016 24th ACM SIGSOFT International Symposium on Foundations\nof Software Engineering, pages 523–534. ACM, 2016.\n[13] S. Daniel, R. Agarwal, and K. J. Stewart. The effects of diversity in\nglobal, distributed collectives: A study of open source project success.\nInformation Systems Research, 24(2):312–333, 2013.\n[14] P. Devanbu, T. Zimmermann, and C. Bird.\nBelief & evidence in\nempirical software engineering. In Proceedings of the 38th International\nConference on Software Engineering, pages 108–119. ACM, 2016.\n[15] J. L. Fleiss. Measuring nominal scale agreement among many raters.\nPsychological bulletin, 76(5):378, 1971.\n[16] J. Fowkes and C. Sutton. Parameter-free probabilistic api mining across\ngithub. In Proceedings of the 2016 24th ACM SIGSOFT International\nSymposium on Foundations of Software Engineering, pages 254–265.\nACM, 2016.\n[17] J. Gamalielsson and B. Lundell. Long-term sustainability of open source\nsoftware communities beyond a fork: A case study of libreofﬁce. In\nIFIP International Conference on Open Source Systems, pages 29–47.\nSpringer, 2012.\n[18] G. Gousios, M. Pinzger, and A. v. Deursen.\nAn exploratory study\nof the pull-based software development model. In Proceedings of the\n36th International Conference on Software Engineering, pages 345–355.\nACM, 2014.\n[19] G. Gousios, M.-A. Storey, and A. Bacchelli.\nWork practices and\nchallenges in pull-based development: the contributor’s perspective. In\nProceedings of the 38th International Conference on Software Engineer-\ning, pages 285–296. ACM, 2016.\n[20] G. Gousios, A. Zaidman, M.-A. Storey, and A. Van Deursen.\nWork\npractices and challenges in pull-based development: the integrator’s\nperspective.\nIn Proceedings of the 37th International Conference on\nSoftware Engineering-Volume 1, pages 358–368. IEEE Press, 2015.\n[21] J. Hua. A case study of cross-branch porting in Linux Kernel. PhD\nthesis, 2014.\n[22] B. Javidi, J. Pickell, B. Heys, T. Erwee, and W.-P. Schaub. Microsoft\nVisual Studio Team Foundation Server Branching Guidance 2010.Mi-\ncrosoft Corporation, 2010 edition, 2009. 2010.\n[23] J. Jiang, D. Lo, J. He, X. Xia, P. S. Kochhar, and L. Zhang. Why and\nhow developers fork what from whom in github. Empirical Software\nEngineering, 22(1):547–578, 2017.\n[24] J. Jiang, L. Zhang, and L. Li.\nUnderstanding project dissemination\non a social coding site. In 2013 20th Working Conference on Reverse\nEngineering (WCRE), pages 132–141. IEEE, 2013.\n[25] R. Kabacoff. R in action: data analysis and graphics with R. Manning\nPublications Co., 2015.\n[26] E. Kalliamvakou, G. Gousios, K. Blincoe, L. Singer, D. M. German, and\nD. Damian. The promises and perils of mining github. In Proceedings\nof the 11th working conference on mining software repositories, pages\n92–101. ACM, 2014.\n[27] E. Kalliamvakou, G. Gousios, K. Blincoe, L. Singer, D. M. German,\nand D. Damian. An in-depth study of the promises and perils of mining\ngithub. Empirical Software Engineering, 21(5):2035–2071, 2016.\n[28] N. Kerzazi.\nBranching strategies based on social networks.\nIn\nProceedings of the 1st International Workshop on Release Engineering,\npages 25–28. IEEE Press, 2013.\n[29] V. Kovalenko, F. Palomba, and A. Bacchelli.\nMining ﬁle histories:\nshould we consider branches? In Proceedings of the 33rd ACM/IEEE\nInternational Conference on Automated Software Engineering, pages\n202–213. ACM, 2018.\n[30] M. J. Lee, B. Ferwerda, J. Choi, J. Hahn, J. Y. Moon, and J. Kim. Github\ndevelopers use rockstars to overcome overﬂow of news.\nIn CHI’13\nExtended Abstracts on Human Factors in Computing Systems, pages\n133–138. ACM, 2013.\n[31] Linus, Torvalds.\n[git pull] drm-next, March 2009.\nhttp://www.\nmail-archive.com/dri-devel@lists.sourceforge.net/msg39091.html, 2009.\n[32] J. Loeliger and M. McCullough. Version Control with Git: Powerful\ntools and techniques for collaborative software development. ” O’Reilly\nMedia, Inc.”, 2012.\n[33] W. Ma, L. Chen, X. Zhang, Y. Zhou, and B. Xu. How do developers\nﬁx cross-project correlated bugs?: a case study on the github scientiﬁc\npython ecosystem. In Proceedings of the 39th International Conference\non Software Engineering, pages 381–392. IEEE Press, 2017.\n[34] H. B. Mann and D. R. Whitney.\nOn a test of whether one of two\nrandom variables is stochastically larger than the other. The annals of\nmathematical statistics, pages 50–60, 1947.\n[35] J. Marlow, L. Dabbish, and J. Herbsleb. Impression formation in online\npeer production: activity traces and personal proﬁles in github.\nIn\nProceedings of the 2013 conference on Computer supported cooperative\nwork, pages 117–128. ACM, 2013.\n[36] H. M. Michaud. Detection of Named Branch Origin for Git Commits.\nPhD thesis, University of Akron, July 2015.\n[37] R. Pham.\nImproving the software testing skills of novices during\nonboarding through social transparency.\nIn Proceedings of the 22nd\nACM SIGSOFT International Symposium on Foundations of Software\nEngineering, pages 803–806. ACM, 2014.\n[38] R. Pham, L. Singer, and K. Schneider. Building test suites in social\ncoding sites by leveraging drive-by commits.\nIn Proceedings of the\n2013 International Conference on Software Engineering, pages 1209–\n1212. IEEE Press, 2013.\n[39] S. Phillips, J. Sillito, and R. Walker.\nBranching and merging: an\ninvestigation into current version control practices. In Proceedings of\nthe 4th International Workshop on Cooperative and Human Aspects of\nSoftware Engineering, pages 9–15. ACM, 2011.\n[40] R. Premraj, A. Tang, N. Linssen, H. Geraats, and H. van Vliet. To branch\nor not to branch? In Proceedings of the 2011 International Conference\non Software and Systems Process, ICSSP ’11, pages 81–90, New York,\nNY, USA, 2011. ACM.\n[41] B. Ray, V. Hellendoorn, S. Godhane, Z. Tu, A. Bacchelli, and P. De-\nvanbu.\nOn the naturalness of buggy code.\nIn Proceedings of the\n38th International Conference on Software Engineering, pages 428–439.\nACM, 2016.\n[42] B. Ray, D. Posnett, V. Filkov, and P. Devanbu. A large scale study of\nprogramming languages and code quality in github. In Proceedings of\nthe 22nd ACM SIGSOFT International Symposium on Foundations of\nSoftware Engineering, pages 155–165. ACM, 2014.\n[43] E. Shihab, C. Bird, and T. Zimmermann.\nThe effect of branching\nstrategies on software quality.\nIn Proceedings of the 2012 ACM-\nIEEE International Symposium on Empirical Software Engineering and\nMeasurement, pages 301–310. IEEE, 2012.\n[44] D. Silva, N. Tsantalis, and M. T. Valente. Why we refactor? confessions\nof github contributors. In Proceedings of the 2016 24th ACM SIGSOFT\nInternational Symposium on Foundations of Software Engineering, pages\n858–870. ACM, 2016.\n316\nAuthorized licensed use limited to: Nanjing University. Downloaded on May 20,2020 at 13:25:16 UTC from IEEE Xplore.  Restrictions apply.",
    "12": "[45] A. Tarvo, T. Zimmermann, and J. Czerwonka. An integration resolution\nalgorithm for mining multiple branches in version control systems. In\nSoftware Maintenance (ICSM), 2011 27th IEEE International Confer-\nence on, pages 402–411. IEEE, 2011.\n[46] R. C. Team et al.\nR: A language and environment for statistical\ncomputing. 2013.\n[47] J. Tsay, L. Dabbish, and J. Herbsleb. Inﬂuence of social and technical\nfactors for evaluating contribution in github.\nIn Proceedings of the\n36th international conference on Software engineering, pages 356–366.\nACM, 2014.\n[48] M. Tufano, F. Palomba, G. Bavota, M. Di Penta, R. Oliveto, A. De Lucia,\nand D. Poshyvanyk. An empirical investigation into the nature of test\nsmells. In Proceedings of the 31st IEEE/ACM International Conference\non Automated Software Engineering, pages 4–15. ACM, 2016.\n[49] E. van der Veen, G. Gousios, and A. Zaidman. Automatically prioritizing\npull requests.\nIn 12th IEEE/ACM Working Conference on Mining\nSoftware Repositories, Florence, Italy, May 16-17, 2015, pages 357–\n361, 2015.\n[50] B. Vasilescu, K. Blincoe, Q. Xuan, C. Casalnuovo, D. Damian, P. De-\nvanbu, and V. Filkov.\nThe sky is not the limit: multitasking across\ngithub projects. In Proceedings of the 38th International Conference on\nSoftware Engineering, pages 994–1005. ACM, 2016.\n[51] B. Vasilescu, D. Posnett, B. Ray, M. G. van den Brand, A. Serebrenik,\nP. Devanbu, and V. Filkov. Gender and tenure diversity in github teams.\nIn Proceedings of the 33rd Annual ACM Conference on Human Factors\nin Computing Systems, pages 3789–3798. ACM, 2015.\n[52] B. Vasilescu, Y. Yu, H. Wang, P. Devanbu, and V. Filkov. Quality and\nproductivity outcomes relating to continuous integration in github. In\nProceedings of the 2015 10th Joint Meeting on Foundations of Software\nEngineering, pages 805–816. ACM, 2015.\n[53] C. Vendome.\nA large scale study of license usage on github.\nIn\n2015 IEEE/ACM 37th IEEE International Conference on Software\nEngineering, volume 2, pages 772–774. IEEE, 2015.\n[54] C. Vendome, G. Bavota, M. Di Penta, M. Linares-V´asquez, D. German,\nand D. Poshyvanyk. License usage and changes: a large-scale study on\ngithub. Empirical Software Engineering, pages 1–41, 2017.\n[55] L. Wingerd and C. Seiwald.\nHigh-level best practices in software\nconﬁguration management.\nIn International Workshop on Software\nConﬁguration Management, pages 57–66. Springer, 1998.\n[56] Y. Yu, H. Wang, V. Filkov, P. Devanbu, and B. Vasilescu.\nWait for\nit: Determinants of pull request evaluation latency on github. In 2015\nIEEE/ACM 12th Working Conference on Mining Software Repositories,\npages 367–371. IEEE, 2015.\n[57] J. Zhu, M. Zhou, and A. Mockus. Effectiveness of code contribution:\nfrom patch-based to pull-request-based tools.\nIn Proceedings of the\n2016 24th ACM SIGSOFT International Symposium on Foundations of\nSoftware Engineering, pages 871–882. ACM, 2016.\n317\nAuthorized licensed use limited to: Nanjing University. Downloaded on May 20,2020 at 13:25:16 UTC from IEEE Xplore.  Restrictions apply."
  },
  "tables": {
    "3": [
      [
        [
          "Attribute Min Median Max Mean St.Dev."
        ],
        [
          "Age(years) 5.0 6.8 8.9 6.9 0.7\nCommits 100 422 25,052 918.3 1,483.2\nTotalPRs 1 32 4,418 91.1 192.5\nTotalissues 1 47 3,465 142.4 284.5\nSize(MB) 0.1 2.0 928.4 12.4 42.9\nDevelopers 3 15 690 29.8 45.2"
        ]
      ]
    ],
    "4": [
      [
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ],
        [
          "",
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ],
        [
          null,
          null,
          null,
          "",
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ]
      ],
      [
        [
          "Confound Min Median Max Mean St.Dev."
        ],
        [
          "Forks 0 51 9,609 161.7 426.5\nWatchers 1 18 3,081 47.0 115.9\nAge(years) 5.0 6.8 8.9 6.9 0.7\nSize(MB) 0.1 2.0 928.4 12.4 42.9\nTotalPRs 1 32 4,418 91.1 192.5\nPRcomments 0 43 13,366 243.8 767.5\nIssuecomments 0 95 13,248 439.4 1,030.2\nDevelopers 3 15 690 29.8 45.2"
        ]
      ]
    ],
    "5": [
      [
        [
          null,
          null,
          "Size_Level",
          null,
          null,
          "",
          "High",
          "",
          "Median",
          null,
          "Low",
          null,
          null
        ],
        [
          null,
          null,
          "",
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ],
        [
          "",
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ],
        [
          "",
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ]
      ],
      [
        [
          null,
          null,
          "Forks_Leve",
          null,
          null,
          null,
          "l",
          "High",
          "Median",
          null,
          "",
          "Low",
          null,
          null
        ],
        [
          null,
          null,
          "",
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ],
        [
          "",
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ],
        [
          "",
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ],
        [
          null,
          null,
          "",
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ]
      ],
      [
        [
          "e Organization User",
          null,
          null,
          null
        ],
        [
          "",
          null,
          null,
          null
        ],
        [
          "",
          "",
          "",
          ""
        ],
        [
          "",
          "",
          "",
          ""
        ],
        [
          "",
          "",
          "",
          ""
        ],
        [
          "",
          "",
          "",
          ""
        ],
        [
          "",
          "",
          "",
          ""
        ],
        [
          "",
          "",
          "",
          ""
        ],
        [
          "",
          "",
          "",
          ""
        ],
        [
          "",
          "",
          "",
          ""
        ]
      ]
    ],
    "6": [
      [
        [
          "Purpose Description Num. %"
        ],
        [
          "BugFixing Abranchaimstofixbugs. 50 16.7"
        ],
        [
          "Feature A branch aims to implement\n125 41.7\nImplementation features."
        ],
        [
          "Abranchaimstotestcode,de-\nTesting ploy test platform or maintain 16 5.3\ntestcases,etc."
        ],
        [
          "Code Structure Abranchaimstoperformcode\n12 4\nOptimization refactoringorstyleformatting."
        ],
        [
          "A branch aims to maintain a\nDocumentation project’sdocuments,suchasits 10 3.3\nwebsite,licensedeclaration,etc."
        ],
        [
          "A branch aims to declare a\nDependency\nproject’s plugins or dependent 6 2\nConfiguration\nlibraries’versions."
        ],
        [
          "A branch aims to certain ver-\nsion development, prepare for\nVersion release,andversionupgrade.In\n74 24.7\nIteration such a branch, bug fixing and\nfeatureimplementationaretwo\nmajoractivities."
        ],
        [
          "A branch which cannot be put\ninto the above categories goes\nOthers 7 2.3\nto this category. E.g., a branch\niscreatedfordoingnothing."
        ]
      ]
    ],
    "7": [
      [
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ],
        [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ]
      ]
    ],
    "8": [
      [
        [
          "0000 .... 0000 2345 ●● ● ●● ● ●● ●● ● ●●●● ●● ●● ● ●● ●● ●●●● ●● ●● ●● ●●● ● ●●● ●●●●● ●●● ● ●●●● ●● ●● ●●● ● ●● ● ● ●●● ●●● ●● ●● ●●● ● ● ●●● ●● ●● ● ●● ● ● ●● ●● ●●● ●● ● ●●●● ●● ●● ●● ● ●●● ●● ●●● ●●●● ●● ●● ● ● ●●● ● ●●●● ●●●● ●● ●● ●● ●●● ● ●● ●● ● ●● ● ●● ●●● ●●● ● ●● ●● ● ●●●● ● ●●● ●● ●● ●●● ●● ●● ●●●● ●● ●● ●●●●● ● ●●● ●●●● ●●●● ● ●●● ● ●● ●● ●● ●● ● ●●● ● ●● ●● ● ● ●● ●● ● ●●● ●● ●●●● ●●● ●●● ●●●●●●● ●● ●●● ● ●● ●●● ● ● ●●● ● ●●●● ● ●●● ●●●● ●● ● ●●● ●●● ●● ●● ● ●●● ● ● ●●●● ●● ●● ● ●●●●● ●● ●●● ● ●● ● ●●● ●● ● ● ●● ● ●●●● ●●●● ●●●●● ● ●● ●● ●●● ● ●●● ● ●● ●●●●● ● ●●●● ●● ● ●● ●●● ● ●● ●● ●● ● ● ●●●● ●●●●● ●●● ●● ●● ●●● ●●● ● ●●●●● ●● ●● ●●●●● ● ●● ●●●●● ●●● ●● ● ●●●●●● ●● ● ●●●●●● ●●● ●● ● ●● ●●● ●●●● ● ●●● ●●●● ●● ●● ●●● ●● ●●● ● ● ●●● ● ●● ●● ●● ● ●●● ● ●●● ●● ● ● ●●●●●●●●●●● ●● ●●●●●● ●● ●● ●●● ●●● ●●●● ●●● ●●●● ● ● ●●●● ●● ●●● ●● ●●● ● ●●● ●●●● ● ●● ●● ●● ●●● ●●●● ●●●●●●● ●●● ●● ●● ●●● ●● ● ●●● ● ●●●● ●● ● ●●● ● ●● ●●●● ●● ●●● ●●●●●● ●●● ● ●● ●● ●● ●●● ● ●● ●●● ●●●● ●●● ●●● ● ●● ●●●● ●● ●● ● ● ●●● ● ● ●● ● ●●● ●●●●●●●● ● ●●● ●● ● ●●●●● ●●● ●●● ● ●● ●● ● ●●●● ●● ● ● ●●● ●●● ●●●● ●● ●● ●●●● ●●● ●● ●● ●●●●● ●●●● ● ●●● ●●● ●● ● ●● ●●● ●●●● ●●●● ●●● ● ●● ●●●● ●● ●●● ●●● ●● ●●●●●● ● ●●●● ● ●●●● ●●●● ●● ● ●●● ●● ●● ● ● ●●● ●● ●● ●● ● ● ●● ●● ●● ●●●●● ●● ●● ●● ●● ● ●● ●● ●●● ● ●●● ● ●●● ● ●●● ●● ●●● ●● ●●●● ● ●●● ●● ●● ● ●●●●●●●●●● ● ●●● ●●●● ●● ●● ●●●● ●●● ● ●●● ● ●● ●● ●●● ●● ● ●● ● ●●●●● ●● ●● ●●● ●●● ● ●●●●●●● ●● ● ● ● ● ●●●● ● ●● ● ●●● ● ●●●● ● ●● ●● ●● ●● ● ●●● ● ● ●●● ●●● ● ●● ●● ● ●●●●● ●●●●● ●●●●● ● ●●● ● ● ●●● ●●● ●●● ●●● ● ●● ●●● ●● ● ● ●● ● ●● ● ● ●● ●● ●● ●●●● ●●● ●●● ●● ●●● ●● ●● ●● ●● ●●●● ●● ●●●● ● ●● ●● ●●●● ● ●●● ● ●● ●● ●●● ●●●● ● ●●● ● ●● ● ●●● ●● ●●● ●● ●●● ●●● ●● ●●●● ●●● ●● ● ●●● ●● ●● ● ●● ●●● ●● ● ●●● ●●●●●● ● ● ●●● ●●●● ●● ● ●●● ● ●●● ●● ●●● ●●● ●●●● ● ●●●● ● ●● ● ● ●● ●● ●●●●● ● ●● ●●●●● ●●● ●● ● ●●● ● ● ●● ●●● ●● ●● ● ●● ●● ●●● ●● ●● ●● ●● ● ●● ● ●●●● ●● ●●● ● ●● ●●●● ●●●● ●●● ●●●● ● ●● ●● ●●● ● ●● ●● ● ●●● ●● ●●●● ● ●●● ●●●●●●●●● ● ●● ● ●● ●●● ●● ●● ● ●●● ●●● ●●● ● ●●● ●●● ●● ● ●● ●● ● ●●● ● ●●● ●● ●●● ● ●●● ●● ●●●●●●●●●● ●● ●● ●●●● ●●● ●●● ●● ● ●● ●● ● ●● ●●●● ● tnecreP\n0.01\n0.00\nUnique Commits in Non−master Branches",
          "●●●● ●●●●● ●● ●●● ●●●●●●●●●●●●● ●● ●●●●● ●●● ●● ●●● ●●●●● ●● ●●●●● ●● ●●●●●●●●●●●●●● ●●● ●●● ● ●● ●●●● ●●● ●●● ●● ●●●● ●●●●●●●●● ●●● ●● ●●● ●●● ●",
          null,
          "",
          null
        ],
        [
          null,
          "●●● ●●●● ●●●●●●●●●●●● ●●●●●●● ●● ●●●●●●● ●●●●●●●●●●● ●●●●● ●●●●●●●●● ●● ●●●● ●●●●●● ●●● ●",
          null,
          "",
          null
        ],
        [
          null,
          "●●●●●●●● ●●●●●●●● ●● ●●●●●●●●●● ●●●●● ●● ●●● ●●●●●●●●●●●●●●● ●● ●● ●● ●●●●● ●● ●●●●●●●●● ●●●●●● ●●●● ●●●●",
          null,
          "",
          null
        ],
        [
          null,
          "●●●● ●●●● ●●●●●● ●●● ●●●● ●● ●● ●●● ●●● ●●●●●●●●● ●● ● ●●● ●● ●●●●●● ●●●●●●● ●●●●●● ●●●●●●●● ● ●●●● ●●●●●● ●●●● ●● ●●●●●●●●●●●●●● ●● ●●●●●● ●●●●● ●●●● ●●●●● ●●● ●●●● ●●",
          null,
          "",
          null
        ],
        [
          null,
          "●● ●●●●● ●●●●●●●●●●●● ●●●● ●●● ●●●●●● ●● ●●●●●● ●●●●● ●●● ●●●●●●●●●● ●●●●●●● ●●●●●●● ●●●●●●●●●●● ●●● ●●●●●● ●●●● ●●●●●●● ●●● ●●●●● ●●●●●●●●●●●● ●●●● ●●●●● ●● ●●●●●●●●● ●● ●●●●● ●●●●●●●●● ●●●●●●●●●● ●●●●●●\n●",
          null,
          "",
          null
        ],
        [
          null,
          "●● ●●●●●●●●● ●●●●●●●●●●●●● ●●●●●●●●●●● ●●●●●● ●●●● ●●● ●●●●●● ●●●●●●●●●●● ●●● ●●●● ●●● ●●●●● ●● ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●● ●●●●●●●●●●●●●●●●● ●● ●● ●●●●●● ●●●●●●●●●●● ●●● ●●●●●● ●●●●●●● ●●●●●●●●●●●●●● ●●●● ●●",
          null,
          "",
          null
        ],
        [
          null,
          "●● ●●● ●●●●●●●●●● ●●●●●●●●●●●● ●● ●● ●●●●●●●●●●●●●●●●●●●●●● ●● ●●●● ●●●●●●●●● ●●●● ●●●●●●● ●●●●● ●●●●●●●●●●●●●●●● ●● ●●●●●●● ●●●●●●●●●●●●●● ●●● ●●● ●●●●●●●●●●●●● ●●●●●●●●●●●●●●●● ●●●●●● ●●● ●●●●●●●●●●●●●● ●●●●●●●●●●●●●●●●●●●● ●●●●●●",
          null,
          "",
          null
        ],
        [
          null,
          "●●●●● ●●●●●●● ●●●●●●● ●●● ●●●●●● ●●●●●●●● ●● ●● ●● ●●●●●●●●●●●●●●●●● ●● ●●●● ●●●●●● ●●● ●●●●●●●●●● ●●● ●●●●●●●● ●●● ●● ●●● ●● ●●● ●●●●●●●● ●●●● ●●●●● ●●●●●●● ●●●● ●● ●●●● ●● ●●●● ●●●●● ●● ●●● ●●●●●● ●●●● ●●●● ●●●●●● ●●● ●●● ●● ●●●● ●●●●●●●●●● ●●● ●●●●● ●●● ●● ●●● ●●●●●●●● ●●● ●●●● ●● ●●●●●●● ●●● ●●●● ●●●●●● ●●● ● ●●●●● ●●● ●●●●● ●●●● ●● ●●●●●●●● ●● ●●●●●● ●● ●●●● ●●● ●●●●● ●●● ●●● ● ●● ●●●● ●● ●●●●●●●● ●●● ●●●●●●●●●●●●●●●● ●●● ●●● ●●●●● ●●● ●● ●● ●● ●●● ●●●●●●● ●●●●● ●●●●●●●●●● ●● ●●●●● ●●●●● ●●●●● ●●●●●●●●● ●●● ●●● ●",
          null,
          "",
          null
        ],
        [
          null,
          "●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●",
          null,
          "",
          null
        ],
        [
          null,
          "",
          null,
          "",
          null
        ],
        [
          null,
          "",
          "",
          "",
          ""
        ]
      ],
      [
        [
          "1.00\n0.75\ntnecreP\n0.50\n0.25\n0.00\nUnique Commits in Master Branches",
          "",
          null,
          "",
          null
        ],
        [
          null,
          "",
          null,
          "",
          null
        ],
        [
          null,
          "",
          null,
          "",
          null
        ],
        [
          null,
          "",
          null,
          "",
          null
        ],
        [
          null,
          "",
          "",
          "",
          ""
        ],
        [
          null,
          "",
          "",
          "",
          ""
        ],
        [
          null,
          "",
          "",
          "",
          ""
        ],
        [
          null,
          "",
          "",
          "",
          null
        ]
      ]
    ],
    "9": [
      [
        [
          "Variable",
          "TValue",
          "Significance"
        ],
        [
          "(Intercept)\nlog(forks count+0.5)\nlog(watchers count+0.5)\nage\nlog(projectsize)\ndeveloper\nPRs\nlog(PRcomments)\nlog(issuecomments)",
          "16.7\n-9.8\n-3.5\n6.5\n45.9\n9.3\n5.5\n5.7\n8.2",
          "p<.001***\np<.001***\np<.001***\np<.001***\np<.001***\np<.001***\np<.001***\np<.001***\np<.001***"
        ],
        [
          "Signif.codes:0‘***’0.001‘**’0.01‘*’0.05‘.’0.1‘’1\nF-statistic=585.9,p-value:<0.001.R2 =0.616\nTheresponsevariableislog(totalcommits).",
          null,
          null
        ]
      ],
      [
        [
          "Variable TValue Significance"
        ],
        [
          "(Intercept) 17.4 p<.001***\nbrCnt 8.8 p<.001***\nlog(forks count+0.5) -9.2 p<.001***\nlog(watchers count+0.5) -3.5 p<.001***\nage 6.6 p<.001***\nlog(projectsize) 43.7 p<.001***\ndeveloper 9.4 p<.001***\nPRs 4.8 p<.001***\nlog(PRcomments) 4.7 p<.001***\nlog(issuecomments) 8.3 p<.001***"
        ],
        [
          "Signif.codes:0‘***’0.001‘**’0.01‘*’0.05‘.’0.1‘’1\nF-statistic=542.9,p-value:<0.001.R2 =0.625\nTheresponsevariableislog(totalcommits)."
        ]
      ],
      [
        [
          "owner withbrCnt withnobrCnt Fvalue Conhen’sf2"
        ],
        [
          "users 0.5774 0.5657 p<0.001 0.0277\nOrg. 0.6268 0.6169 p<0.001 0.0265"
        ]
      ]
    ]
  },
  "images": {}
}