{
  "metadata": {
    "filename": "temp_9653d6f7-f2d6-48eb-af7e-39473a4b2507",
    "extraction_date": "2025-01-26T00:39:31.801483",
    "path": "research_assistant\\data\\temp_9653d6f7-f2d6-48eb-af7e-39473a4b2507.pdf"
  },
  "pages": {
    "1": "EDITORIAL\nTen Simple Rules for Taking Advantage of Git\nand GitHub\nYasset Perez-Riverol1*, Laurent Gatto2, Rui Wang1, Timo Sachsenberg3,\nJulian Uszkoreit4, Felipe da Veiga Leprevost5, Christian Fufezan6, Tobias Ternent1,\nStephen J. Eglen7, Daniel S. Katz8, Tom J. Pollard9, Alexander Konovalov10, Robert\nM. Flight11, Kai Blin12, Juan Antonio Vizcaíno1*\n1 European Molecular Biology Laboratory, European Bioinformatics Institute (EMBL-EBI), Wellcome Trust\nGenome Campus, Hinxton, Cambridge, United Kingdom, 2 Computational Proteomics Unit, Cambridge\nSystems Biology Centre, University of Cambridge, Cambridge, United Kingdom, 3 Applied Bioinformatics\nand Department of Computer Science, University of Tübingen, Tübingen, Germany, 4 Medizinisches\nProteom-Center, Ruhr-Universität Bochum, Bochum, Germany, 5 Department of Pathology, University of\nMichigan, Ann Arbor, Michigan, United States of America, 6 Institute of Plant Biology and Biotechnology,\nUniversity of Münster, Münster, Germany, 7 Centre for Mathematical Sciences, University of Cambridge,\nCambridge, United Kingdom, 8 National Center for Supercomputing Applications and Graduate School of\nLibrary and Information Science, University of Illinois, Urbana, Illinois, United States of America, 9 MIT\nLaboratory for Computational Physiology, Institute for Medical Engineering and Science, Massachusetts\nInstitute of Technology, Cambridge, Massachusetts, United States of America, 10 Centre for Interdisciplinary\nResearch in Computational Algebra, University of St Andrews, St Andrews, United Kingdom, 11 Department\nof Molecular Biology and Biochemistry, Markey Cancer Center, Resource Center for Stable Isotope-\nResolved Metabolomics, University of Kentucky, Lexington, Kentucky, United States of America, 12 The\nNovo Nordisk Foundation Center for Biosustainability, Technical University of Denmark, Hørsholm, Denmark\n* yperez@ebi.ac.uk (YPR); juan@ebi.ac.uk (JAV)\nIntroduction\nBioinformatics is a broad discipline in which one common denominator is the need to produce\nand/or use software that can be applied to biological data in different contexts. To enable and\nensure the replicability and traceability of scientific claims, it is essential that the scientific pub-\nlication, the corresponding datasets, and the data analysis are made publicly available [1,2]. All\nsoftware used for the analysis should be either carefully documented (e.g., for commercial soft-\nware) or, better yet, openly shared and directly accessible to others [3,4]. The rise of openly\navailable software and source code alongside concomitant collaborative development is facili-\ntated by the existence of several code repository services such as SourceForge, Bitbucket,\nGitLab, and GitHub, among others. These resources are also essential for collaborative software\nprojects because they enable the organization and sharing of programming tasks between dif-\nferent remote contributors. Here, we introduce the main features of GitHub, a popular web-\nbased platform that offers a free and integrated environment for hosting the source code, docu-\nmentation, and project-related web content for open-source projects. GitHub also offers paid\nplans for private repositories (see Box 1) for individuals and businesses as well as free plans\nincluding private repositories for research and educational use.\nGitHub relies, at its core, on the well-known and open-source version control system Git,\noriginally designed by Linus Torvalds for the development of the Linux kernel and now devel-\noped and maintained by the Git community. One reason for GitHub’s success is that it offers\nmore than a simple source code hosting service [5,6]. It provides developers and researchers\nwith a dynamic and collaborative environment, often referred to as a social coding platform,\nthat supports peer review, commenting, and discussion [7]. A diverse range of efforts, ranging\nfrom individual to large bioinformatics projects, laboratory repositories, as well as global\nPLOS Computational Biology | DOI:10.1371/journal.pcbi.1004947\nJuly 14, 2016\n1 / 11\na11111\nOPEN ACCESS\nCitation: Perez-Riverol Y, Gatto L, Wang R,\nSachsenberg T, Uszkoreit J, Leprevost FdV, et al.\n(2016) Ten Simple Rules for Taking Advantage of Git\nand GitHub. PLoS Comput Biol 12(7): e1004947.\ndoi:10.1371/journal.pcbi.1004947\nEditor: Scott Markel, Dassault Systemes BIOVIA,\nUNITED STATES\nPublished: July 14, 2016\nCopyright: © 2016 Perez-Riverol et al. This is an\nopen access article distributed under the terms of the\nCreative Commons Attribution License, which permits\nunrestricted use, distribution, and reproduction in any\nmedium, provided the original author and source are\ncredited.\nFunding: This study was supported by Wellcome\nTrust [grant number WT101477MA] (http://www.\nwellcome.ac.uk/), BBSRC [grant numbers BB/\nK01997X/1, BB/I00095X/1, BB/L024225/1 and BB/\nL002817/1] (http://www.bbsrc.ac.uk/), BMBF grant de.\nNBI - German Network for Bioinformatics\nInfrastructure (FKZ031 A 534A) (https://www.denbi.\nde/), NIH grant numbers R01-GM-094231 and R01-\nEB-017205 (http://www.nih.gov/), EPSRC [reference\nEP/M022641/1] (https://www.epsrc.ac.uk), NSF grant\nnumber 1252893 (http://www.nsf.gov/), and Novo\nNordisk Foundation (http://www.novonordiskfonden.\ndk/en). The funders had no role in study design, data\ncollection and analysis, decision to publish, or\npreparation of the manuscript.",
    "2": "collaborations, have found GitHub to be a productive place to share code and ideas and to col-\nlaborate (see Table 1).\nSome of the recommendations outlined below are broadly applicable to repository hosting\nservices. However, our main aim is to highlight specific GitHub features. We provide a set of\nrecommendations that we believe will help the reader to take full advantage of GitHub’s fea-\ntures for managing and promoting projects in bioinformatics as well as in many other research\ndomains. The recommendations are ordered to reflect a typical development process: learning\nGit and GitHub basics, collaboration, use of branches and pull requests, labeling and tagging of\ncode snapshots, tracking project bugs and enhancements using issues, and dissemination of the\nfinal results.\nRule 1: Use GitHub to Track Your Projects\nThe backbone of GitHub is the distributed version control system Git. Every change, from fix-\ning a typo to a complete redesign of the software, is tracked and uniquely identified. Although\nBox 1\nBy default, GitHub repositories are freely visible to all. Many projects decide to share\ntheir work publicly and openly from the start of the project in order to attract visibility\nand to benefit from contributions from the community early on. Some other groups pre-\nfer to work privately on projects until they are ready to share their work. Private reposito-\nries ensure that work is hidden but also limit collaborations to just those users who are\ngiven access to the repository. These repositories can then be made public at a later stage,\nsuch as, for example, upon submission, acceptance, or publication of corresponding jour-\nnal articles. In some cases, when the collaboration was exclusively meant to be private,\nsome repositories might never be made publicly accessible.\nTable 1. Bioinformatics repository examples with good practices of using GitHub. The table contains the name of the repository, the type of example\n(issue tracking, branch structure, unit tests), and the URL of the example. All URLs are prefixed with https://github.com/.\nName of the Repository\nType\nURL\nAdam\nCommunity Project, Multiple forks\nhttps://github.com/bigdatagenomics/adam\nBioPython [18]\nCommunity Project, Multiple contributors\nhttps://github.com/biopython/biopython/graphs/\ncontributors\nComputational Proteomics Unit\nLab Repository\nhttps://github.com/ComputationalProteomicsUnit\nGalaxy Project [19]\nCommunity Project, Bioinformatics Repository\nhttps://github.com/galaxyproject/galaxy\nGitHub Paper\nManuscript, Issue discussion, Community Project\nhttps://github.com/ypriverol/github-paper\nMSnbase [20]\nIndividual project repository\nhttps://github.com/lgatto/MSnbase/\nOpenMS [21]\nBioinformatics Repository, Issue discussion,\nbranches\nhttps://github.com/OpenMS/OpenMS/issues/1095\nPRIDE Inspector Toolsuite [22]\nProject Organization, Multiple projects\nhttps://github.com/PRIDE-Toolsuite\nRetinal wave data repository [23]\nIndividual project, Manuscript, Binary Data\norganized\nhttps://github.com/sje30/waverepo\nSAMtools [24]\nBioinformatics Repository, Project Organization\nhttps://github.com/samtools\nrOpenSci\nCommunity Project, Issue discussion\nhttps://github.com/ropensci\nThe Global Alliance For Genomics and\nHealth\nCommunity Project\nhttps://github.com/ga4gh\ndoi:10.1371/journal.pcbi.1004947.t001\nPLOS Computational Biology | DOI:10.1371/journal.pcbi.1004947\nJuly 14, 2016\n2 / 11\nCompeting Interests: The authors have no affiliation\nwith GitHub, nor with any other commercial entity\nmentioned in this article. The views described here\nreflect their own views without input from any third\nparty organization.",
    "3": "Git has a complex set of commands and can be used for rather complex operations, learning to\napply the basics requires only a handful of new concepts and commands and will provide a\nsolid ground to efficiently track code and related content for research projects. Many introduc-\ntory and detailed tutorials are available (see Table 2 below for a few examples). In particular,\nwe recommend A Quick Introduction to Version Control with Git and GitHub by Blischak et al.\n[5].\nIn a nutshell, initializing a (local) repository (often abbreviated as repo) marks a directory as\none to be tracked (Fig 1). All or parts of its content can be added explicitly to the list of files to\ntrack.\ncd project ## move into directory to be tracked\ngit init ## initialize local repository\n## add individual files such as project description, reports,\nsource code\ngit add README project.md code.R\ngit commit -m \"initial commit\" ## saves the current local snapshot\nSubsequently, every change to the tracked files, once committed, will be recorded as a new\nrevision, or snapshot, uniquely identifying the changes in all the modified files. Git is remark-\nably effective and efficient in archiving the complete history of a project by, among other\nthings, storing only the differences between files.\nIn addition to local copies of the repository, it is straightforward to create remote reposito-\nries on GitHub (called origin, with default branch master—see below) using the web interface,\nand then synchronize local and remote repositories.\ngit push origin master ## push local changes to the remote\nrepository\ngit pull origin master ## pull remote changes into the local\nrepository\nFollowing Tony Rossini’s advice in 2005 to “commit early, commit often, and commit in a\nrepository from which we can easily roll-back your mistakes,” one can organize one’s work in\nsmall incremental changes. At any time, it is possible to go back to a previous version. In larger\nprojects, multiple users are able to work on the same remote repository, with all contributions\nbeing recorded, restorable, and attributed to the author.\nUsers usually track source code, text files, images, and small data files inside their reposito-\nries and generally do not track derived files such as build logs or compiled binaries (read Box 2\nto see how to handle large binary files in GitHub). And, although the majority of GitHub repos-\nitories are used for software development, users can also keep text documents such as analysis\nTable 2. Online courses, tutorials, and workshops about GitHub and Git for scientists.\nName of the Material\nURL\nGit help and Git help -a\nDocument, installed with Git\nKarl Broman’s Git/Github Guide\nhttp://kbroman.org/github_tutorial/\nVersion Control with GitVersion Control\nwith Git\nhttp://swcarpentry.github.io/git-novice/\nIntroduction to Git\nhttp://git-scm.com/book/ch1-3.html\nGithub Training\nhttps://training.github.com/\nGithub Guides\nhttps://guides.github.com/\nGood Resources for Learning Git and\nGitHub\nhttps://help.github.com/articles/good-resources-for-learning-git-\nand-github/\nSoftware Carpentry: Version Control with\nGit\nhttp://swcarpentry.github.io/git-novice/\ndoi:10.1371/journal.pcbi.1004947.t002\nPLOS Computational Biology | DOI:10.1371/journal.pcbi.1004947\nJuly 14, 2016\n3 / 11",
    "4": "reports and manuscripts (see, for example, the repository for this manuscript at https://github.\ncom/ypriverol/github-paper).\nDue to its distributed design, each up-to-date local Git repository is an entire exact historical\ncopy of everything that was committed—file changes, commit message logs, etc. These copies\nact as independent backups as well, present on each user’s storage device. Git can be considered\nto be fault-tolerant because of this, which is a win over centralized version control systems. If\nthe remote GitHub server is unavailable, collaboration and work can continue between users,\nas opposed to centralized alternatives.\nThe web interface offered by GitHub provides friendly tools to perform many basic opera-\ntions and a gentle introduction to a more rich and complex set of functionalities. Various\ngraphical user-interface-driven clients for managing Git and GitHub repositories are also avail-\nable (https://www.git-scm.com/downloads/guis). Many editors and development environments\nFig 1. The structure of a GitHub-based project illustrating project structure and interactions with the community.\ndoi:10.1371/journal.pcbi.1004947.g001\nPLOS Computational Biology | DOI:10.1371/journal.pcbi.1004947\nJuly 14, 2016\n4 / 11",
    "5": "such as, for example, the popular RStudio editor for the R programming language [8], directly\nintegrate with code versioning using Git and GitHub. In addition, for remote Git repositories,\nGitHub provides its own features that will be described in subsequent rules (Fig 1).\nRule 2: GitHub for Single Users, Teams, and Organizations\nPublic projects on GitHub are visible to everyone, but write permission, i.e., the ability to\ndirectly modify the content of a repository, needs to be granted explicitly. As a repository\nowner, you can grant this right to other GitHub users. In addition to being owned by users,\nrepositories can also be created and managed as part of teams and organizations.\nProject managers can structure projects to manage permissions at different levels: users,\nteams, and organizations. Users are the central element of GitHub as in any other social network.\nEvery user has a profile listing their GitHub projects and activities, which can optionally be popu-\nlated with personal information including name, email address, image, and webpage. To stay up\nto date with the activity of other users, one can follow their accounts (see also Rule 10). Collabo-\nration can be achieved by simply adding a trusted Collaborator, thereby granting write access.\nHowever, development in large projects is usually done by teams of people within a larger\norganization. GitHub organizations are a great way to manage team-based access permissions\nfor the individual projects of institutes, research labs, and large open-source projects that need\nmultiple owners and administrators (Fig 1). We recommend that you, as an individual\nresearcher, make your profile visible to other users and display all of the projects and organiza-\ntions you are working in.\nRule 3: Developing and Collaborating on New Features: Branching\nand Forking\nAnyone with a GitHub account can fork any repository they have access to. This will create a\ncomplete copy of the content of the repository, while retaining a link to the original “upstream”\nversion. One can then start working on the same code base in one’s own fork (https://help.\ngithub.com/articles/fork-a-repo/) under their username (see, for example, https://github.com/\nypriverol/github-paper/network/members for this work) or organization (see Rule 2). Forking\na repository allows users to freely experiment with changes without affecting the original\nBox 2\nUsing GitHub or any similar versioning/tracking system is not a replacement for good\nproject management; it is an extension, an improvement for good project and file manag-\ning (see for example [9]). One practical consideration when using GitHub, for example,\nis dealing with large binary files. Binary files such as images, videos, executable files, or\nmany raw data used in bioinformatics, are stored as a single large entity in Git. As a\nresult, every change, even if minimal, leads to a complete new copy of the file in the\nrepository, producing large size increments and the inability to search (see https://help.\ngithub.com/articles/searching-code/) and compare file content across revisions. Git\noffers a Large File Storage (LFS) module that replaces such large files with pointers while\nthe large binary file can be stored remotely, which results in smaller and faster reposito-\nries. Git LFS is also supported by GitHub, albeit with a space quota or for a fee, to retain\nyour usual GitHub workflow (https://help.github.com/categories/managing-large-files/)\n(S1 File, Section 1).\nPLOS Computational Biology | DOI:10.1371/journal.pcbi.1004947\nJuly 14, 2016\n5 / 11",
    "6": "project and forms the basis of social coding. It allows anyone to develop and test novel features\nwith existing code and offers the possibility of contributing novel features, bug fixes, and\nimprovements to documentation back into the original upstream project (requested by open-\ning an pull request) repository and becoming a contributor. Forking a repository and providing\npull requests constitutes a simple method for collaboration inside loosely defined teams and\nover more formal organizational boundaries, with the original repository owner(s) retaining\ncontrol over which external contributions are accepted. Once a pull request is opened for\nreview and discussion, it usually results in additional insights and increased code quality [7].\nMany contributors can work on the same repository at the same time without running into\nedit conflicts. There are multiple strategies for this, and the most common way is to use Git\nbranches to separate different lines of development. Active development is often performed on\na development branch and stable versions, i.e., those used for a software release, are kept in a\nmaster or release branch (see for example https://github.com/OpenMS/OpenMS/branches). In\npractice, developers often work concurrently on one or several features or improvements. To\nkeep commits of the different features logically separated, distinct branches are typically used.\nLater, when development is complete and verified to work (i.e., none of the tests fail, see Rule\n5), new features can be merged back into the development line or master branch. In addition,\none can always pull the currently up-to-date master branch into a feature branch to adapt the\nfeature to the changes in the master branch.\nWhen developing different features in parallel, there is a risk of applying incompatible\nchanges in different branches/forks; these are said to become out of sync. Branches are just\nshort-term departures from master. If you pull frequently, you will keep your copy of the\nrepository up to date and you will have the opportunity to merge your changed code with oth-\ners’ contributors, ideally without requiring you to manually address conflicts to bring the\nbranches in sync again.\nRule 4: Naming Branches and Commits: Tags and Semantic\nVersions\nTags can be used to label versions during the development process. Version numbering should\nfollow “semantic versioning” practice, with the format X.Y.Z., with X being the major, Y the\nminor, and Z the patch version of the release, including possible meta information, as described\nin http://semver.org/. This semantic versioning scheme provides users with coherent version\nnumbers that document the extent (bug fixes or new functionality) and backwards compatibil-\nity of new releases. Correct labeling allows developers and users to easily recover older versions,\ncompare them, or simply use them to reproduce results described in publications (see Rule 8).\nThis approach also help to define a coherent software publication strategy.\nRule 5: Let GitHub Do Some Tasks for You: Integrate\nThe first rule of software development is that the code needs to be ready to use as soon as possi-\nble [10], to remain so during development, and that it should be well-documented and tested.\nIn 2005, Martin Fowler defined the basic principles for continuous integration in software\ndevelopment [11]. These principles have become the main reference for best practices in con-\ntinuous integration, providing the framework needed to deploy software and, in some way,\nalso data. In addition to mere error-free execution, dedicated code testing is aimed at detecting\npossible bugs introduced by new features or changes in the code or dependencies, as well as\ndetecting wrong results, often known as logic errors, in which the source code produces a differ-\nent result than what was intended. Continuous integration provides a way to automatically and\nPLOS Computational Biology | DOI:10.1371/journal.pcbi.1004947\nJuly 14, 2016\n6 / 11",
    "7": "systematically run a series of tests to check integrity and performance of code, a task that can\nbe automated through GitHub.\nGitHub offers a set of hooks (automatically executed scripts) that are run after each push to\na repository, making it easier to follow the basic principles of continuous integration. The\nGitHub web hooks allow third-party platforms to access and interact with a GitHub repository\nand thus to automate post-processing tasks. Continuous integration can be achieved by Travis\nCI, a hosted continued integration platform that is free for all open-source projects. Travis CI\nbuilds and tests the source code using a plethora of options such as different platforms and\ninterpreter versions (S1 File, Section 2). In addition, it offers notifications that allow your team\nand contributors to know if the new changes work and to prevent the introduction of errors in\nthe code (for instance, when merging pull requests), making the repository always ready to use.\nRule 6: Let GitHub Do More Tasks for You: Automate\nMore than just code compilation and testing can be integrated into your software project:\nGitHub hooks can be used to automate numerous tasks to help improve the overall quality of\nyour project. An important complement to successful test completion is to demonstrate that\nthe tests sufficiently cover the existing code base. For this, the integration of Codecov is recom-\nmended. This service will report how much of the code base and which lines of code are being\nexecuted as part of your code tests. The Bioconductor project, for example, highly recommends\nthat packages implement unit testing (S1 File, Section 2) to support developers in their package\ndevelopment and maintenance (http://bioconductor.org/developers/unitTesting-guidelines/)\nand systematically tests the coverage of all of its packages (https://codecov.io/github/\nBioconductor-mirror/). One might also consider generating the documentation upon code/\ndocumentation modification (S1 File, Section 3). This implies that your projects provide com-\nprehensive documentation so others can understand and contribute back to them. For Python\nor C/C++ code, automatic documentation generation can be done using sphinx and subse-\nquently integrated into GitHub using “Read the Docs.” All of these platforms will create reports\nand badges (sometimes called shields) that can be included on your GitHub project page, help-\ning to demonstrate that the content is of high quality and well-maintained.\nRule 7: Use GitHub to Openly and Collaboratively Discuss,\nAddress, and Close Issues\nGitHub issues are a great way to keep track of bugs, tasks, feature requests, and enhancements.\nWhile classical issue trackers are primarily intended to be used as bug trackers, in contrast,\nGitHub issue trackers follow a different philosophy: each tracker has its own section in every\nrepository and can be used to trace bugs, new ideas, and enhancements by using a powerful\ntagging system. The main objective of issues in GitHub is promoting collaboration and provid-\ning context by using cross-references.\nRaising an issue does not require lengthy forms to be completed. It only requires a title and,\npreferably, at least a short description. Issues have very clear formatting and provide space for\noptional comments, which allow anyone with a Github account to provide feedback. For exam-\nple, if the developer needs more information to be able to reproduce a bug, he or she can simply\nrequest it in a comment.\nAdditional elements of issues are (i) color-coded labels that help to categorize and filter\nissues, (ii) milestones, and (iii) one assignee responsible for working on the issue. They help\ndevelopers to filter and prioritize tasks and turn an issue tracker into a planning tool for their\nproject.\nPLOS Computational Biology | DOI:10.1371/journal.pcbi.1004947\nJuly 14, 2016\n7 / 11",
    "8": "It is also possible for repository administrators to create issue and pull request templates\n(https://help.github.com/articles/helping-people-contribute-to-your-project/) (see Rule 3) to\ncustomize and standardize the information to be included when contributors open issues.\nGitHub issues are thus dynamic, and they pose a low entry barrier for users to report bugs and\nrequest features. A well-organized and tagged issue tracker helps new contributors and users to\nunderstand a project more deeply. As an example, one issue in the OpenMS repository\n(https://github.com/OpenMS/OpenMS/issues/1095) allowed the interaction of eight develop-\ners and attracted more than one hundred comments. Contributors can add figures, comments,\nand references to other issues and pull requests in the repository, as well as direct references to\ncode.\nAs another illustration of issues and their generic and wide application, we (https://github.\ncom/ypriverol/github-paper/issues) and others (https://github.com/ropensci/RNeXML/issues/\n121) used GitHub issues to discuss and comment on changes in manuscripts and address\nreviewers’ comments.\nRule 8: Make Your Code Easily Citable, and Cite Source Code!\nIt is a good research practice to ensure permanent and unambiguous identifiers for citable\nitems like articles, datasets, or biological entities such as proteins, genes, and metabolites (see\nalso Box 3). Digital Object Identifiers (DOIs) have been used for many years as unique and\nunambiguous identifiers for enabling the citation of scientific publications. More recently, a\ntrend has started to mint DOIs for other types of scientific products such as datasets [12] and\ntraining materials (for example [13]). A key motivation for this is to build a framework for giv-\ning scientists broader credit for their work [14,15] while simultaneously supporting clearer,\nmore persistent ways to cite and track it. Helping to drive this change are funding agencies\nsuch as the National Institutes of Health (NIH) and National Science Foundation (NSF) in the\nUnited States and Research Councils in the United Kingdom, which are increasingly recogniz-\ning the importance of research products such as publicly available datasets and software.\nA common issue with software is that it normally evolves at a different speed than text pub-\nlished in the scientific literature. In fact, it is common to find software having novel features\nand functionality that were not described in the original publication. GitHub now integrates\nwith archiving services such as Zenodo and Figshare, enabling DOIs to be assigned to code\nrepositories. The procedure is relatively straightforward (see https://guides.github.com/\nactivities/citable-code/), requiring only the provision of metadata and a series of administrative\nsteps. By default, Zenodo creates an archive of a repository each time a new release is created in\nBox 3\nEvery repository should ideally have the following three files. The first and arguably most\nimportant file in a repository is a LICENCE file (see also Rule 8) that clearly defines the\npermissions and restrictions attached to the code and other files in your repository. The\nsecond important file is a README file, which provides, for example, a short description\nof the project, a quick start guide, information on how to contribute, a TODO list, and\nlinks to additional documentation. Such README files are typically written in mark-\ndown, a simple markup language that is automatically rendered on GitHub. Finally, a\nCITATION file to the repository informs your users how to cite and credit your project.\nPLOS Computational Biology | DOI:10.1371/journal.pcbi.1004947\nJuly 14, 2016\n8 / 11",
    "9": "GitHub, ensuring the cited code remains up to date. Once the DOI has been assigned, it can be\nadded to literature information resources such as Europe PubMed Central [16].\nAs already mentioned in the introduction, reproducibility of scientific claims should be\nenabled by providing the software, the datasets, and the process leading to interpretable results\nthat were used in a particular study. As much as possible, publications should highlight that\nthe code is freely available in, for example, GitHub, together with any other relevant outputs\nthat may have been deposited. In our experience, this openness substantially increases the\nchances of getting the paper accepted for publication. Journal editors and reviewers receive the\nopportunity to reproduce findings during the manuscript review process, increasing confi-\ndence in the reported results. In addition, once the paper is published, your work can be repro-\nduced by other members of the scientific community, which can increase citations and foster\nopportunities for further discussion and collaboration.\nThe availability of a public repository containing the source code does not make the soft-\nware open-source per se. You should use an Open Source Initiative (OSI)-approved license\nthat defines how the software can be freely used, modified, and shared. Common licenses such\nas those listed on http://choosealicense.com are preferred. Note that the LICENSE file in the\nrepository should be a plain-text file containing the contents of an OSI-approved license, not\njust a reference to the license.\nRule 9: Promote and Discuss Your Projects: Web Page and More\nThe traditional way to promote scientific software is by publishing an associated paper in the\npeer-reviewed scientific literature, though, as pointed out by Buckheir and Donoho, this is just\nadvertising [17]. Additional steps can boost the visibility of an organization. For example,\nGitHub Pages are simple websites freely hosted by GitHub. Users can create and host blog web-\nsites, help pages, manuals, tutorials, and websites related to specific projects. Pages comes with\na powerful static site generator called Jekyll that can be integrated with other frameworks such\nas Bootstrap or platforms such as Disqus to support and moderate comments.\nIn addition, several real-time communication platforms have been integrated with GitHub\nsuch as Gitter and Slack. Real-time communication systems allow the user community, devel-\nopers, and project collaborators to exchange ideas and issues and to report bugs or get support.\nFor example, Gitter is a GitHub-based chat tool that enables developers and users to share\naspects of their work. Gitter inherits the network of social groups operating around GitHub\nrepositories, organizations, and issues. It relies on identities within GitHub creating Internet\nRelay Chat (IRC)-like chat rooms for public and private projects. Within a Gitter chat, mem-\nbers can reference issues, comments, and pull requests. GitHub also supports wikis (which are\nversion-controlled repositories themselves) for each repository, in which users can create and\nedit pages for documentation, examples, or general support.\nA different service is Gist, which represents a unique way to share code snippets, single files,\nparts of files, or full applications. Gists can be generated in two different ways: public gists that\ncan be browsed and searched through Discover and secret gists that are hidden from search\nengines. One of the main features of Gist is the possibility of embedding code snippets in other\napplications, enabling users to embed gists in any text field that supports JavaScript.\nRule 10: Use GitHub to Be Social: Follow and Watch\nIn the same way researchers are following developments in their field, scientific programmers\ncould follow publicly available projects that might benefit their research. GitHub enables this\nfunctionality by following other GitHub users (see also Rule 2) or watching the activity of\nPLOS Computational Biology | DOI:10.1371/journal.pcbi.1004947\nJuly 14, 2016\n9 / 11",
    "10": "projects, which is a common feature in many social media platforms. Take advantage of it as\nmuch as possible!\nConclusions\nIf you are involved in scientific research and have not used Git and GitHub before, we recom-\nmend that you explore its potential as soon as possible. As with many tools, a learning curve\nlays ahead, but several basic yet powerful features are accessible even to the beginner and may\nbe applied to many different use-cases [6]. We anticipate the reward will be worth your effort.\nTo conclude, we would like to recommend some examples of bioinformatics repositories in\nGitHub (Table 1) and some useful training materials, including workshops, online courses, and\nmanuscripts (Table 2).\nSupporting Information\nS1 File. Supplementary Information including three sections: Git Large File Storage (LFS),\nTesting Levels of the Source Code and Continuous integration, and Source code documen-\ntation.\n(PDF)\nAcknowledgments\nThe authors would like to thank C. Titus Brown for mentioning the manuscript on social\nmedia, leading to additional contributions and further improvements. We also thank Peter\nCock (peterjc) for helpful suggestions contributed directly through GitHub.\nReferences\n1.\nGoodman A, Pepe A, Blocker AW, Borgman CL, Cranmer K, Crosas M, et al. Ten simple rules for the\ncare and feeding of scientific data. PLoS Comput Biol. 2014; 10(4):e1003542. doi: 10.1371/journal.\npcbi.1003542 PMID: 24763340\n2.\nPerez-Riverol Y, Alpi E, Wang R, Hermjakob H, Vizcaíno JA. Making proteomics data accessible and\nreusable: current state of proteomics databases and repositories. Proteomics. 2015; 15(5–6):930–49.\ndoi: 10.1002/pmic.201400302 PMID: 25158685\n3.\nOsborne JM, Bernabeu MO, Bruna M, Calderhead B, Cooper J, Dalchau N, et al. Ten simple rules for\neffective computational research. PLoS Comput Biol. 2014; 10(3):e1003506. doi: 10.1371/journal.pcbi.\n1003506 PMID: 24675742\n4.\nVihinen M. No more hidden solutions in bioinformatics. Nature. 2015; 521(7552):261. doi: 10.1038/\n521261a PMID: 25993922\n5.\nBlischak J, Davenport E, Wilson G. A Quick Introduction to Version Control with Git and GitHub. PLoS\nComput Biol. 2016; 12(1):e1004668. doi: 10.1371/journal.pcbi.1004668 PMID: 26785377\n6.\nRam K. Git can facilitate greater reproducibility and increased transparency in science. Source code for\nbiology and medicine. 2013; 8(1):1.\n7.\nDabbish L, Stuart C, Tsay J, Herbsleb J. Social Coding in GitHub: Transparency and Collaboration in\nan Open Software Repository. In: Proceedings of the ACM 2012 Conference on Computer Supported\nCooperative Work. CSCW ‘12. New York, NY, USA: ACM; 2012. p. 1277–1286. Available from: http://\ndoi.acm.org/10.1145/2145204.2145396.\n8.\nR Core Team. R: A Language and Environment for Statistical Computing; 2016. Available from: https://\nwww.R-project.org/.\n9.\nNoble WS. A quick guide to organizing computational biology projects. PLoS Comput Biol. 2009; 5(7):\ne1000424. doi: 10.1371/journal.pcbi.1000424 PMID: 19649301\n10.\nLeprevost FV, Barbosa VC, Francisco EL, Perez-Riverol Y, Carvalho PC. On best practices in the\ndevelopment of bioinformatics software. Front Genet. 2014; 5:199. doi: 10.3389/fgene.2014.00199\nPMID: 25071829\n11.\nFowler M. Continuous Integration; 2006. http://www.martinfowler.com/articles/continuousIntegration.html.\nPLOS Computational Biology | DOI:10.1371/journal.pcbi.1004947\nJuly 14, 2016\n10 / 11",
    "11": "12.\nVizcaíno JA, Deutsch EW, Wang R, Csordas A, Reisinger F, Ríos D, et al. ProteomeXchange provides\nglobally coordinated proteomics data submission and dissemination. Nat Biotechnol. 2014; 32(3):223–\n6. doi: 10.1038/nbt.2839 PMID: 24727771\n13.\nAhmadia A, Aiello-Lammens M, Ainsley J, Allen J, Alsheikh-Hussain A, Banaszkiewicz P, et al. Soft-\nware Carpentry: Programming with R; 2015. http://dx.doi.org/10.5281/zenodo.27353.\n14.\nCredit where credit is overdue. Nat Biotechnol. 2009; 27(7):579. doi: 10.1038/nbt0709-579 PMID:\n19587644\n15.\nFORCE11 Software Citation Working Group. https://www.force11.org/group/software-citation-working-\ngroup.\n16.\nEurope PMC Consortium. Europe PMC: a full-text literature database for the life sciences and platform\nfor innovation. Nucleic Acids Res. 2015; 43(Database issue):D1042–8. doi: 10.1093/nar/gku1061\nPMID: 25378340\n17.\nBuckheit J, Donoho D. WaveLab and Reproducible Research. Springer-Verlag; 1995. p. 55–81.\n18.\nCock PJ, Antao T, Chang JT, Chapman BA, Cox CJ, Dalke A, et al. Biopython: freely available Python\ntools for computational molecular biology and bioinformatics. Bioinformatics. 2009; 25(11):1422–3. doi:\n10.1093/bioinformatics/btp163 PMID: 19304878\n19.\nGoecks J, Nekrutenko A, Taylor J, Galaxy Team. Galaxy: a comprehensive approach for supporting\naccessible, reproducible, and transparent computational research in the life sciences. Genome Biol.\n2010; 11(8):R86. doi: 10.1186/gb-2010-11-8-r86 PMID: 20738864\n20.\nGatto L, Lilley KS. MSnbase-an R/Bioconductor package for isobaric tagged mass spectrometry data\nvisualization, processing and quantitation. Bioinformatics. 2012; 28(2):288–289. doi: 10.1093/\nbioinformatics/btr645 PMID: 22113085\n21.\nSturm M, Bertsch A, Gröpl C, Hildebrandt A, Hussong R, Lange E, et al. OpenMS—an open-source\nsoftware framework for mass spectrometry. BMC bioinformatics. 2008; 9(1):163.\n22.\nPerez-Riverol Y, Xu QW, Wang R, Uszkoreit J, Griss J, Sanchez A, et al. PRIDE Inspector Toolsuite:\nMoving Toward a Universal Visualization Tool for Proteomics Data Standard Formats and Quality\nAssessment of ProteomeXchange Datasets. Molecular & Cellular Proteomics. 2016; 15(1):305–317.\ndoi: 10.1074/mcp.O115.050229\n23.\nEglen SJ, Weeks M, Jessop M, Simonotto J, Jackson T, Sernagor E. A data repository and analysis\nframework for spontaneous neural activity recordings in developing retina. Gigascience. 2014; 3(1):3.\ndoi: 10.1186/2047-217X-3-3 PMID: 24666584\n24.\nLi H, Handsaker B, Wysoker A, Fennell T, Ruan J, Homer N, et al. The Sequence Alignment/Map for-\nmat and SAMtools. Bioinformatics. 2009; 25(16):2078–9. doi: 10.1093/bioinformatics/btp352 PMID:\n19505943\nPLOS Computational Biology | DOI:10.1371/journal.pcbi.1004947\nJuly 14, 2016\n11 / 11"
  },
  "tables": {
    "2": [
      [
        [
          "Type"
        ],
        [
          "CommunityProject,Multipleforks"
        ],
        [
          "CommunityProject,Multiplecontributors"
        ],
        [
          "LabRepository"
        ],
        [
          "CommunityProject,BioinformaticsRepository"
        ],
        [
          "Manuscript,Issuediscussion,CommunityProject"
        ],
        [
          "Individualprojectrepository"
        ],
        [
          "BioinformaticsRepository,Issuediscussion,\nbranches"
        ],
        [
          "ProjectOrganization,Multipleprojects"
        ],
        [
          "Individualproject,Manuscript,BinaryData\norganized"
        ],
        [
          "BioinformaticsRepository,ProjectOrganization"
        ],
        [
          "CommunityProject,Issuediscussion"
        ],
        [
          "CommunityProject"
        ]
      ]
    ]
  },
  "images": {
    "1": [
      {
        "filename": "page_1_image_1.png",
        "path": "output\\images\\temp_9653d6f7-f2d6-48eb-af7e-39473a4b2507\\page_1_image_1.png",
        "extraction_date": "2025-01-26T00:39:34.534447",
        "page_number": 1,
        "image_index": 1,
        "width": 705,
        "height": 99
      },
      {
        "filename": "page_1_image_2.jpeg",
        "path": "output\\images\\temp_9653d6f7-f2d6-48eb-af7e-39473a4b2507\\page_1_image_2.jpeg",
        "extraction_date": "2025-01-26T00:39:34.536321",
        "page_number": 1,
        "image_index": 2,
        "width": 159,
        "height": 159
      },
      {
        "filename": "page_1_image_3.png",
        "path": "output\\images\\temp_9653d6f7-f2d6-48eb-af7e-39473a4b2507\\page_1_image_3.png",
        "extraction_date": "2025-01-26T00:39:34.538649",
        "page_number": 1,
        "image_index": 3,
        "width": 38,
        "height": 49
      }
    ],
    "2": [
      {
        "filename": "page_2_image_1.png",
        "path": "output\\images\\temp_9653d6f7-f2d6-48eb-af7e-39473a4b2507\\page_2_image_1.png",
        "extraction_date": "2025-01-26T00:39:34.545899",
        "page_number": 2,
        "image_index": 1,
        "width": 705,
        "height": 99
      }
    ],
    "3": [
      {
        "filename": "page_3_image_1.png",
        "path": "output\\images\\temp_9653d6f7-f2d6-48eb-af7e-39473a4b2507\\page_3_image_1.png",
        "extraction_date": "2025-01-26T00:39:34.551755",
        "page_number": 3,
        "image_index": 1,
        "width": 705,
        "height": 99
      }
    ],
    "4": [
      {
        "filename": "page_4_image_1.png",
        "path": "output\\images\\temp_9653d6f7-f2d6-48eb-af7e-39473a4b2507\\page_4_image_1.png",
        "extraction_date": "2025-01-26T00:39:34.559882",
        "page_number": 4,
        "image_index": 1,
        "width": 705,
        "height": 99
      },
      {
        "filename": "page_4_image_2.jpeg",
        "path": "output\\images\\temp_9653d6f7-f2d6-48eb-af7e-39473a4b2507\\page_4_image_2.jpeg",
        "extraction_date": "2025-01-26T00:39:34.564808",
        "page_number": 4,
        "image_index": 2,
        "width": 2150,
        "height": 1758
      }
    ],
    "5": [
      {
        "filename": "page_5_image_1.png",
        "path": "output\\images\\temp_9653d6f7-f2d6-48eb-af7e-39473a4b2507\\page_5_image_1.png",
        "extraction_date": "2025-01-26T00:39:34.572430",
        "page_number": 5,
        "image_index": 1,
        "width": 705,
        "height": 99
      }
    ],
    "6": [
      {
        "filename": "page_6_image_1.png",
        "path": "output\\images\\temp_9653d6f7-f2d6-48eb-af7e-39473a4b2507\\page_6_image_1.png",
        "extraction_date": "2025-01-26T00:39:34.580935",
        "page_number": 6,
        "image_index": 1,
        "width": 705,
        "height": 99
      }
    ],
    "7": [
      {
        "filename": "page_7_image_1.png",
        "path": "output\\images\\temp_9653d6f7-f2d6-48eb-af7e-39473a4b2507\\page_7_image_1.png",
        "extraction_date": "2025-01-26T00:39:34.588124",
        "page_number": 7,
        "image_index": 1,
        "width": 705,
        "height": 99
      }
    ],
    "8": [
      {
        "filename": "page_8_image_1.png",
        "path": "output\\images\\temp_9653d6f7-f2d6-48eb-af7e-39473a4b2507\\page_8_image_1.png",
        "extraction_date": "2025-01-26T00:39:34.597912",
        "page_number": 8,
        "image_index": 1,
        "width": 705,
        "height": 99
      }
    ],
    "9": [
      {
        "filename": "page_9_image_1.png",
        "path": "output\\images\\temp_9653d6f7-f2d6-48eb-af7e-39473a4b2507\\page_9_image_1.png",
        "extraction_date": "2025-01-26T00:39:34.610246",
        "page_number": 9,
        "image_index": 1,
        "width": 705,
        "height": 99
      }
    ],
    "10": [
      {
        "filename": "page_10_image_1.png",
        "path": "output\\images\\temp_9653d6f7-f2d6-48eb-af7e-39473a4b2507\\page_10_image_1.png",
        "extraction_date": "2025-01-26T00:39:34.620520",
        "page_number": 10,
        "image_index": 1,
        "width": 705,
        "height": 99
      }
    ],
    "11": [
      {
        "filename": "page_11_image_1.png",
        "path": "output\\images\\temp_9653d6f7-f2d6-48eb-af7e-39473a4b2507\\page_11_image_1.png",
        "extraction_date": "2025-01-26T00:39:34.628196",
        "page_number": 11,
        "image_index": 1,
        "width": 705,
        "height": 99
      }
    ]
  }
}